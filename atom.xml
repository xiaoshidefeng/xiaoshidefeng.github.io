<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xiaoshidefeng的博客</title>
  <subtitle>一个计算机本科生</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.chenwe.top/"/>
  <updated>2017-08-12T15:24:01.536Z</updated>
  <id>http://blog.chenwe.top/</id>
  
  <author>
    <name>ChenWei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git detached HEAD状态的解决方法</title>
    <link href="http://blog.chenwe.top/2017/08/12/git%20detached%20HEAD%E7%8A%B6%E6%80%81%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://blog.chenwe.top/2017/08/12/git detached HEAD状态的解决方法/</id>
    <published>2017-08-12T15:17:02.886Z</published>
    <updated>2017-08-12T15:24:01.536Z</updated>
    
    <content type="html"><![CDATA[<p>在用IDEA的时候<br>一不小心就进入detached HEAD状态了<br><img src="http://otj6w86xd.bkt.clouddn.com/bqb-cm.jpg" alt=""><br><a id="more"></a></p>
<h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><p>首先<br>把最新写好的代码保存下<br>commit上去</p>
<p>然后<br>切换到你最后一次正确的指针代码那里（这里以master为例）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout master</div></pre></td></tr></table></figure></p>
<p>创建一条新的分支来保存代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch tempp aa63314</div></pre></td></tr></table></figure></p>
<p>这里的aa63314是我最后一次commit的</p>
<p>然后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git merge tempp</div></pre></td></tr></table></figure></p>
<p>合并过去<br>这样我们就又恢复正常了<br><img src="http://otj6w86xd.bkt.clouddn.com/lianhong.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在用IDEA的时候&lt;br&gt;一不小心就进入detached HEAD状态了&lt;br&gt;&lt;img src=&quot;http://otj6w86xd.bkt.clouddn.com/bqb-cm.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="git" scheme="http://blog.chenwe.top/categories/git/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>Android BottomNavigationView无法添加依赖</title>
    <link href="http://blog.chenwe.top/2017/08/08/Android%20BottomNavigationView%E6%97%A0%E6%B3%95%E6%B7%BB%E5%8A%A0%E4%BE%9D%E8%B5%96/"/>
    <id>http://blog.chenwe.top/2017/08/08/Android BottomNavigationView无法添加依赖/</id>
    <published>2017-08-08T13:49:31.414Z</published>
    <updated>2017-08-08T14:01:51.999Z</updated>
    
    <content type="html"><![CDATA[<p>今天在Android Studio上创建了一个Bottom Navigation Activity<br>但是创建完成后发现BottomNavigationView无法添加依赖<br><img src="http://otj6w86xd.bkt.clouddn.com/wenhao.jpg" alt=""><br><a id="more"></a></p>
<p>网上查找资料<br>发现他的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">com.android.support:design</div></pre></td></tr></table></figure></p>
<p>要25以上</p>
<p>而我的是24，所以就不能使用了</p>
<p>我们需要在 <code>dependencies</code> 里添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile &apos;com.android.support:design:25.1.0&apos;</div></pre></td></tr></table></figure></p>
<p>clean Project 就可以完成依赖了</p>
<p><img src="http://otj6w86xd.bkt.clouddn.com/lianhong.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在Android Studio上创建了一个Bottom Navigation Activity&lt;br&gt;但是创建完成后发现BottomNavigationView无法添加依赖&lt;br&gt;&lt;img src=&quot;http://otj6w86xd.bkt.clouddn.com/wenhao.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://blog.chenwe.top/categories/Android/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>练字记录（一）</title>
    <link href="http://blog.chenwe.top/2017/08/04/%E7%BB%83%E5%AD%97%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://blog.chenwe.top/2017/08/04/练字记录（一）/</id>
    <published>2017-08-04T08:27:24.136Z</published>
    <updated>2017-08-04T08:46:16.704Z</updated>
    
    <content type="html"><![CDATA[<p>练字记录<br>每五天左右发一篇博客来记录<br>目前是楷书<br><img src="http://otj6w86xd.bkt.clouddn.com/huajizuo.jpg" alt=""></p>
<a id="more"></a>
<h2 id="为什么要练字？"><a href="#为什么要练字？" class="headerlink" title="为什么要练字？"></a>为什么要练字？</h2><p>打算把自己极丑的字改善下<br>陶冶情操</p>
<h2 id="之前有练过吗？"><a href="#之前有练过吗？" class="headerlink" title="之前有练过吗？"></a>之前有练过吗？</h2><p>以前练字，都是练得英文字<br>而且有一定效果<br>因为英文练字成效快，收益大<br>好的英文字能在作文中取得一定优势</p>
<h2 id="先从哪里练？"><a href="#先从哪里练？" class="headerlink" title="先从哪里练？"></a>先从哪里练？</h2><p>先练楷书吧<br>目前正在临摹 赵孟頫 的 《道德经》</p>
<h2 id="五天的记录"><a href="#五天的记录" class="headerlink" title="五天的记录"></a>五天的记录</h2><ul>
<li><p>2017年07月31日<br><img src="http://otj6w86xd.bkt.clouddn.com/zi01.jpg" alt=""></p>
</li>
<li><p>2017年08月01日<br><img src="http://otj6w86xd.bkt.clouddn.com/zi02.jpg" alt=""></p>
</li>
<li><p>2017年08月02日<br><img src="http://otj6w86xd.bkt.clouddn.com/zi03.jpg" alt=""></p>
</li>
<li><p>2017年08月03日<br><img src="http://otj6w86xd.bkt.clouddn.com/zi04.jpg" alt=""></p>
</li>
<li><p>2017年08月04日<br><img src="http://otj6w86xd.bkt.clouddn.com/zi05.jpg" alt=""></p>
</li>
</ul>
<p><img src="http://otj6w86xd.bkt.clouddn.com/ha.jpg" alt=""><br><strong>虽然自己的字还是很难看</strong><br><strong>但还是要坚持下去</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;练字记录&lt;br&gt;每五天左右发一篇博客来记录&lt;br&gt;目前是楷书&lt;br&gt;&lt;img src=&quot;http://otj6w86xd.bkt.clouddn.com/huajizuo.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="练字" scheme="http://blog.chenwe.top/categories/%E7%BB%83%E5%AD%97/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="life" scheme="http://blog.chenwe.top/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot远程shell监控和管理</title>
    <link href="http://blog.chenwe.top/2017/08/03/SpringBoot%E8%BF%9C%E7%A8%8Bshell%E7%9B%91%E6%8E%A7%E5%92%8C%E7%AE%A1%E7%90%86/"/>
    <id>http://blog.chenwe.top/2017/08/03/SpringBoot远程shell监控和管理/</id>
    <published>2017-08-03T12:39:38.610Z</published>
    <updated>2017-08-03T12:57:05.140Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Boot支持集成一个称为’CRaSH’的Java shell<br>你可以在CRaSH中使用ssh或telnet命令连接到运行的应用<br><img src="http://otj6w86xd.bkt.clouddn.com/bucunzaide.jpg" alt=""></p>
<a id="more"></a>
<h2 id="首先我们要在SpringBoot里配置pom-xml文件"><a href="#首先我们要在SpringBoot里配置pom-xml文件" class="headerlink" title="首先我们要在SpringBoot里配置pom.xml文件"></a>首先我们要在SpringBoot里配置pom.xml文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-remote-shell<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="创建一个用户"><a href="#创建一个用户" class="headerlink" title="创建一个用户"></a>创建一个用户</h2><p>这步如果不做的话还是会有一个默认用户的<br>用户名是<code>user</code><br>密码当应用启动时会在控制台里打印出来</p>
<p>如果想自己定义一个用户<br>就在 <code>properties</code>文件里添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">management.shell.auth.simple.user.name=admin</div><div class="line">management.shell.auth.simple.user.password=123456</div></pre></td></tr></table></figure></p>
<p>这样你就生成了一个用户名是 admin<br>密码是 123456的用户了</p>
<h2 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h2><p>通过ssh 来登录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -p 2000 admin@localhost</div></pre></td></tr></table></figure>
<p>默认端口是 2000</p>
<p>连接成功后 通过help 来查看命名</p>
<p>至此，我们成功链接上了远程的SpringBoot项目<br><img src="http://otj6w86xd.bkt.clouddn.com/lianhong.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring Boot支持集成一个称为’CRaSH’的Java shell&lt;br&gt;你可以在CRaSH中使用ssh或telnet命令连接到运行的应用&lt;br&gt;&lt;img src=&quot;http://otj6w86xd.bkt.clouddn.com/bucunzaide.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://blog.chenwe.top/categories/SpringBoot/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>IDEA Maven项目依赖失效</title>
    <link href="http://blog.chenwe.top/2017/08/02/IDEA%20Maven%E9%A1%B9%E7%9B%AE%E4%BE%9D%E8%B5%96%E5%A4%B1%E6%95%88/"/>
    <id>http://blog.chenwe.top/2017/08/02/IDEA Maven项目依赖失效/</id>
    <published>2017-08-02T02:35:45.599Z</published>
    <updated>2017-08-02T03:05:18.097Z</updated>
    
    <content type="html"><![CDATA[<p>最近整理了一下硬盘<br>然后再打开我的SpringBoot项目<br>发现所有的依赖都没了，IDEA提示一片红，像满山的山楂树 红红火火恍恍惚惚</p>
<p><img src="http://otj6w86xd.bkt.clouddn.com/xianruchensi.jpg" alt=""></p>
<a id="more"></a>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>我们需要打开我们的pom.xml文件<br>找到这几行代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>关键在 <version>1.5.4.RELEASE</version> 这里</p>
<p>我们可以在IDEA中重新创建一个SpringBoot项目<br>然后查看新项目的 pom文件中的version值，会发现和这个项目不一样<br>我们复制新项目的版本到这个版本中</p>
<p>点击IDEA的import change 重新导入后就可以了</p>
<p>这时我们会发现我们之前的依赖又回来了<br><img src="http://otj6w86xd.bkt.clouddn.com/lianhong.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近整理了一下硬盘&lt;br&gt;然后再打开我的SpringBoot项目&lt;br&gt;发现所有的依赖都没了，IDEA提示一片红，像满山的山楂树 红红火火恍恍惚惚&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://otj6w86xd.bkt.clouddn.com/xianruchensi.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="IDEA" scheme="http://blog.chenwe.top/categories/IDEA/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>关于百度搜索不到Github Pages的解决方法.</title>
    <link href="http://blog.chenwe.top/2017/08/01/%E5%85%B3%E4%BA%8E%E7%99%BE%E5%BA%A6%E6%90%9C%E7%B4%A2%E4%B8%8D%E5%88%B0Github%20Pages%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://blog.chenwe.top/2017/08/01/关于百度搜索不到Github Pages的解决方法/</id>
    <published>2017-08-01T08:09:24.308Z</published>
    <updated>2017-08-01T09:10:22.909Z</updated>
    
    <content type="html"><![CDATA[<p>我的博客是托管在Github Pages上的<br>我们知道，Github是屏蔽百度的<br>所有我们的博客是不会被百度收录的<br>如果我们想要被百度收录的话该怎么办呢<br><img src="http://otj6w86xd.bkt.clouddn.com/wenhao.jpg" alt=""></p>
<a id="more"></a>
<h2 id="使用coding来一起托管"><a href="#使用coding来一起托管" class="headerlink" title="使用coding来一起托管"></a>使用coding来一起托管</h2><p>Coding也是一个代码托管平台<br>也有Coding Pages的服务<br>而且不会屏蔽百度爬虫<br>我们可以利用Coding Pages 来帮我们完成被百度收录的工作</p>
<h2 id="讲代码迁移到coding上"><a href="#讲代码迁移到coding上" class="headerlink" title="讲代码迁移到coding上"></a>讲代码迁移到coding上</h2><p>我们首先要注册一个coding的账号<br>个人设置中配置好ssh公钥</p>
<p>然后我们新建一个项目<br><img src="http://otj6w86xd.bkt.clouddn.com/2017080101.png" alt=""><br>将项目的名字命名为自己的 名字.coding.me</p>
<p><img src="http://otj6w86xd.bkt.clouddn.com/2017080102.png" alt=""><br>复制我们的项目连接</p>
<p>打开我们的博客<br>找到 _config 文件</p>
<p>在 depoly里添加coding的仓库地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">- type: git</div><div class="line">  repository:</div><div class="line">    github: https://github.com/yourname/yourname.github.io,master</div><div class="line">    coding: git@git.coding.net:yourname/yourname.coding.me.git,master</div></pre></td></tr></table></figure></p>
<p>我们打开命令行工具<br>执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g</div><div class="line">hexo d</div></pre></td></tr></table></figure></p>
<p>如果配置没问题的话，你的项目应该已经出现在coding的仓库里了</p>
<h2 id="开启coding-pages服务"><a href="#开启coding-pages服务" class="headerlink" title="开启coding pages服务"></a>开启coding pages服务</h2><p>完善自己coding的个人信息<br>达到银牌才能开启pages服务</p>
<p><img src="http://otj6w86xd.bkt.clouddn.com/2017080103.png" alt=""><br>在这里设置pages服务</p>
<p>如果没有域名的话，看到这里就可以了</p>
<p>有自己的域名的话接着往下看</p>
<h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>我买的域名是阿里云的万网<br>支持智能路由<br><img src="http://otj6w86xd.bkt.clouddn.com/2017080104.png" alt=""><br>我们设置默认访问coding pages，海外访问github pages<br>这样我们域名就绑定好了</p>
<p>但是因为coding pages 是有限制的，如果银牌会员绑定域名<br>每天第一次访问时会跳出一个5秒掉的引导页<br>这个会让搜索引擎的爬虫无法爬取数据</p>
<h2 id="收录网站"><a href="#收录网站" class="headerlink" title="收录网站"></a>收录网站</h2><p>所以我们需要关掉这个引导页<br>官方的要求是在页面里加入 Host by coding pages<br><img src="http://otj6w86xd.bkt.clouddn.com/2017080105.png" alt=""></p>
<p>毕竟用了人家的服务<br>还是要支持一下的嘛，不能总是想着占便宜，不付出</p>
<p>加完Host by Coding Pages并通过审核后<br>我们的内容就可以被百度和Google爬虫爬取了</p>
<p>测试是否能被百度收录<br>可以用百度的<a href="http://zhanzhang.baidu.com/" target="_blank" rel="external">站长工具</a><br>来测试<br>在网页抓取 -&gt; 抓取诊断里<br><img src="http://otj6w86xd.bkt.clouddn.com/2017080106.png" alt=""><br>测试能否被抓取<br>当然，要他们收录你的网站，你还要通过他的验证，这里就不赘述了</p>
<p>Google收录的方法也是类似的，但是收录的速度比百度快很多，这里也不做赘述</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我的博客是托管在Github Pages上的&lt;br&gt;我们知道，Github是屏蔽百度的&lt;br&gt;所有我们的博客是不会被百度收录的&lt;br&gt;如果我们想要被百度收录的话该怎么办呢&lt;br&gt;&lt;img src=&quot;http://otj6w86xd.bkt.clouddn.com/wenhao.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Github Pages" scheme="http://blog.chenwe.top/categories/Github-Pages/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js实现按钮点击出现倒计时</title>
    <link href="http://blog.chenwe.top/2017/07/31/Vue.js%E5%AE%9E%E7%8E%B0%E6%8C%89%E9%92%AE%E7%82%B9%E5%87%BB%E5%87%BA%E7%8E%B0%E5%80%92%E8%AE%A1%E6%97%B6/"/>
    <id>http://blog.chenwe.top/2017/07/31/Vue.js实现按钮点击出现倒计时/</id>
    <published>2017-07-31T12:09:02.116Z</published>
    <updated>2017-07-31T12:34:05.983Z</updated>
    
    <content type="html"><![CDATA[<p>有时候我们会遇到这种需求<br>比如我们在向客户发送一个验证码的时候<br>为了防止资源被浪费，所以要让客户每隔60秒才能再发送下一次验证码</p>
<p>那么如何实现这个功能呢</p>
<a id="more"></a>
<h2 id="需要用到的东西"><a href="#需要用到的东西" class="headerlink" title="需要用到的东西"></a>需要用到的东西</h2><p>这里我用Vue.js的脚手架工具和Element UI 构建了一个简单的按钮示例<br><img src="http://otj6w86xd.bkt.clouddn.com/2017073101.png" alt=""></p>
<p>我们点击右侧的获取验证码就能够出发按钮的事件<br>同时按钮开始变成不可点击<br>并显示倒计时</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>首先看下我们按钮和表单的实现<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"验 证 码"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"form.code"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">slot</span>=<span class="string">"append"</span> <span class="attr">icon</span>=<span class="string">"message"</span> <span class="attr">:loading</span>=<span class="string">"sendLoad"</span> <span class="attr">placeholder</span>=<span class="string">"请输入验证码"</span></span></div><div class="line">              @<span class="attr">click</span>=<span class="string">"sendMail()"</span>&gt;&#123;&#123;text&#125;&#125;<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>我们将按钮的文本定义为 text，通过sendMail() 方法来执行相关操作<br>我们定一个了一个sendLoad 作为加载的开关</p>
<p>在 methods里，我是这样实现的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">sendMail() &#123;</div><div class="line">  <span class="keyword">this</span>.sendLoad = <span class="literal">true</span>;</div><div class="line">  <span class="keyword">this</span>.time = <span class="number">60</span>;</div><div class="line">  <span class="keyword">this</span>.timer();</div><div class="line">&#125;,</div><div class="line">timer () &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.time &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">this</span>.time--;</div><div class="line">        setTimeout(<span class="keyword">this</span>.timer, <span class="number">1000</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>紧接着，我在computed里来实现倒计时<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">text: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.time == <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">this</span>.sendLoad = <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.time &gt; <span class="number">0</span> ? <span class="keyword">this</span>.time + <span class="string">'s 后重新获取'</span> : <span class="string">'获取验证码'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们来看下<br>点击按钮时，设置按钮为加载的不可点击状态<br>我们初始化time为60<br>然后执行timer()方法<br>里面有一个setTimeout方法<br>setTimeout() 方法用于在指定的毫秒数后调用函数或计算表达式。</p>
<p>所以我们每个一秒就会减少一次数值<br>在computed里，我们设置当time的值等于0时，重置按钮状态<br>如果不等于0，我们显示按钮上的text为 剩余时间 + s 后重新获取</p>
<p>因此，我们可以得到如下的功能</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>点击前<br><img src="http://otj6w86xd.bkt.clouddn.com/2017073101.png" alt=""></p>
<p>点击后<br><img src="http://otj6w86xd.bkt.clouddn.com/2017073102.png" alt=""></p>
<p>我们的按钮开始转动且不可点击，当倒计时结束，又变成原来的样子<br><img src="http://otj6w86xd.bkt.clouddn.com/lianhong.jpg" alt=""><br>这样，我们就实现了一个简单的按钮倒计时控件</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有时候我们会遇到这种需求&lt;br&gt;比如我们在向客户发送一个验证码的时候&lt;br&gt;为了防止资源被浪费，所以要让客户每隔60秒才能再发送下一次验证码&lt;/p&gt;
&lt;p&gt;那么如何实现这个功能呢&lt;/p&gt;
    
    </summary>
    
      <category term="vue.js" scheme="http://blog.chenwe.top/categories/vue-js/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>在Nginx上部署Vue.js项目</title>
    <link href="http://blog.chenwe.top/2017/07/30/%E5%9C%A8Nginx%E4%B8%8A%E9%83%A8%E7%BD%B2Vue.js%E9%A1%B9%E7%9B%AE/"/>
    <id>http://blog.chenwe.top/2017/07/30/在Nginx上部署Vue.js项目/</id>
    <published>2017-07-30T11:26:28.043Z</published>
    <updated>2017-07-30T11:46:14.639Z</updated>
    
    <content type="html"><![CDATA[<p>上次写过一篇在Tomcat上部署Vue.js项目的博客</p>
<p>这次我们试着在Nginx上部署一下Vue.js项目</p>
<a id="more"></a>
<h3 id="Nginx-的安装"><a href="#Nginx-的安装" class="headerlink" title="Nginx 的安装"></a>Nginx 的安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install nginx</div></pre></td></tr></table></figure>
<h3 id="确定Nginx配置文件的位置"><a href="#确定Nginx配置文件的位置" class="headerlink" title="确定Nginx配置文件的位置"></a>确定Nginx配置文件的位置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nginx -t</div></pre></td></tr></table></figure>
<p>当你执行 nginx -t 得时候，nginx会去测试你的配置文件得语法<br>并告诉你配置文件是否写得正确，同时也告诉了你配置文件得路径</p>
<p>例如在我的服务器上是在：/etc/nginx/nginx.conf</p>
<h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>执行命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/nginx/nginx.conf</div></pre></td></tr></table></figure></p>
<p>选择编辑选项</p>
<p>在里面的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">http &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>中添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">        listen 80;               # 监听本机所有 ip 上的 80 端口</div><div class="line">        server_name _;           # 域名：www.example.com 这里 &quot;_&quot; 代表获取匹配所有</div><div class="line">        root /home/filename/;    # 站点根目录</div><div class="line"></div><div class="line">        location / &#123;             # 可有多个 location 用于配置路由地址</div><div class="line">            try_files index.html =404;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>站点根目录就是存放你静态网页的位置</p>
<h3 id="打包Vue-js项目"><a href="#打包Vue-js项目" class="headerlink" title="打包Vue.js项目"></a>打包Vue.js项目</h3><p>我们在本地运行命令来打包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm run bulid</div></pre></td></tr></table></figure></p>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>将打包后生成的dist文件夹中文件复制到我们刚刚的站点根目录里</p>
<h3 id="Nginx-启动运行"><a href="#Nginx-启动运行" class="headerlink" title="Nginx 启动运行"></a>Nginx 启动运行</h3><p>有两种方法</p>
<ol>
<li><p>通过reload来重新加载配置文件，切换平滑</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo nginx -s reload</div></pre></td></tr></table></figure>
</li>
<li><p>重启服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo service nginx restart</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p><img src="http://otj6w86xd.bkt.clouddn.com/bqb-bcm.jpg" alt=""><br>下面我们访问server_name里配置的域名就好了</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上次写过一篇在Tomcat上部署Vue.js项目的博客&lt;/p&gt;
&lt;p&gt;这次我们试着在Nginx上部署一下Vue.js项目&lt;/p&gt;
    
    </summary>
    
      <category term="vue.js" scheme="http://blog.chenwe.top/categories/vue-js/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>关于博客的部分优化</title>
    <link href="http://blog.chenwe.top/2017/07/28/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2%E7%9A%84%E9%83%A8%E5%88%86%E4%BC%98%E5%8C%96/"/>
    <id>http://blog.chenwe.top/2017/07/28/关于博客的部分优化/</id>
    <published>2017-07-28T07:01:55.035Z</published>
    <updated>2017-07-28T08:24:27.966Z</updated>
    
    <content type="html"><![CDATA[<h2 id="添加网页icon"><a href="#添加网页icon" class="headerlink" title="添加网页icon"></a>添加网页icon</h2><p>我目前用的是<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="external">yilia</a>主题<br>他默认没有网页的icon<br>需要我们手动添加</p>
<a id="more"></a>
<p>在themes－&gt;yilia&gt;layout－&gt; partial 文件夹里面<br>打开head.ejs文件</p>
<p>将<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;link href=&quot;&lt;%- config.root %&gt;favicon.png&quot; rel=&quot;icon&quot;&gt;</div></pre></td></tr></table></figure></p>
<p>修改成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;link href=&quot;&lt;%- config.root %&gt;img/photo.ico&quot; rel=&quot;icon&quot; type=&quot;image/x-ico&quot;&gt;</div></pre></td></tr></table></figure></p>
<p>其中img/photo.ico 是我存放图片的目录和文件</p>
<p>然后我们<br>hexo g<br>hexo s<br>我们就能在本地预览到结果了</p>
<h2 id="添加评论模块"><a href="#添加评论模块" class="headerlink" title="添加评论模块"></a>添加评论模块</h2><p>想要添加一个评论模块<br>可以用一些厂商提供的插件来实现</p>
<h3 id="评论插件的选择"><a href="#评论插件的选择" class="headerlink" title="评论插件的选择"></a>评论插件的选择</h3><ul>
<li><p>多说<br><img src="http://otj6w86xd.bkt.clouddn.com/bucunzaide.jpg" alt=""><br>已经停止支持了，在停止支持之前，是一个很好的评论插件</p>
</li>
<li><p>网易云跟帖<br><img src="http://otj6w86xd.bkt.clouddn.com/wenhao.jpg" alt=""><br>去官网看了下，2017年8月1日也要停止支持了..</p>
</li>
<li><p>畅言<br><img src="http://otj6w86xd.bkt.clouddn.com/jiade.jpg" alt=""><br>需要域名备案。我的博客目前做不到。</p>
</li>
<li><p>Disqus<br><img src="http://otj6w86xd.bkt.clouddn.com/bqb-cm.jpg" alt=""><br>需要跨过长城..</p>
</li>
<li><p>来必力<br>最终选择了<a href="https://livere.com/" target="_blank" rel="external">来必力</a><br><img src="http://otj6w86xd.bkt.clouddn.com/bqb-bcm.jpg" alt=""><br>虽然是韩国的产品，但是要做拿来主义嘛</p>
</li>
</ul>
<h2 id="来必力-评论模块的使用"><a href="#来必力-评论模块的使用" class="headerlink" title="来必力 评论模块的使用"></a>来必力 评论模块的使用</h2><p>先去官网注册一个账号<a href="https://livere.com/" target="_blank" rel="external">来必力</a><br>申请一个key<br>在themes\ yilia\ _ partial \ post 目录下<br>新建一个livere.ejs文件<br>把安装代码复制进去<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 来必力City版安装代码 --&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"lv-container"</span> <span class="attr">data-id</span>=<span class="string">"city"</span> <span class="attr">data-uid</span>=<span class="string">"你的uid"</span>&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">   (<span class="function"><span class="keyword">function</span>(<span class="params">d, s</span>) </span>&#123;</div><div class="line">       <span class="keyword">var</span> j, e = d.getElementsByTagName(s)[<span class="number">0</span>];</div><div class="line">       <span class="keyword">if</span> (<span class="keyword">typeof</span> LivereTower === <span class="string">'function'</span>) &#123; <span class="keyword">return</span>; &#125;</div><div class="line">       j = d.createElement(s);</div><div class="line">       j.src = <span class="string">'https://cdn-city.livere.com/js/embed.dist.js'</span>;</div><div class="line">       j.async = <span class="literal">true</span>;</div><div class="line">       e.parentNode.insertBefore(j, e);</div><div class="line">   &#125;)(<span class="built_in">document</span>, <span class="string">'script'</span>);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">noscript</span>&gt;</span>为正常使用来必力评论功能请激活JavaScript<span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">&lt;!-- City版安装代码已完成 --&gt;</div></pre></td></tr></table></figure></p>
<p>记得填上自己的uid</p>
<p>在layout_partial\ article.ejs中<br>&lt;% if (!index &amp;&amp; post.comments){ %&gt;下面添加如下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;% if (theme.livere)&#123; %&gt;</div><div class="line">&lt;%- partial(&apos;post/livere&apos;, &#123;</div><div class="line">    key: post.slug,</div><div class="line">    title: post.title,</div><div class="line">    url: config.url+url_for(post.path)</div><div class="line">  &#125;) %&gt;</div><div class="line">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure></p>
<p>最后，我们在_config.xml 文件里添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">livere: true</div></pre></td></tr></table></figure></p>
<p>这样我们就完成了来必力评论模块的添加了</p>
<h2 id="关于博客的图片"><a href="#关于博客的图片" class="headerlink" title="关于博客的图片"></a>关于博客的图片</h2><p>一开始我选择把博客的图片放到github上<br>但是因为github对于项目的空间大小是有限制的<br>所以最终肯定会不够的<br>于是我选择了 <a href="https://www.qiniu.com" target="_blank" rel="external">七牛云</a>作为图床<br>上传图片-复制外链-搞定</p>
<ul>
<li>注<br>本篇博客部分内容参考<a href="http://www.zhoujy.me/2017/07/16/livere/#添加livere插件" target="_blank" rel="external">Zhou</a>的这篇博客</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;添加网页icon&quot;&gt;&lt;a href=&quot;#添加网页icon&quot; class=&quot;headerlink&quot; title=&quot;添加网页icon&quot;&gt;&lt;/a&gt;添加网页icon&lt;/h2&gt;&lt;p&gt;我目前用的是&lt;a href=&quot;https://github.com/litten/hexo-theme-yilia&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;yilia&lt;/a&gt;主题&lt;br&gt;他默认没有网页的icon&lt;br&gt;需要我们手动添加&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://blog.chenwe.top/categories/hexo/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="life" scheme="http://blog.chenwe.top/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>关于API传递参数的一些小问题</title>
    <link href="http://blog.chenwe.top/2017/07/27/%E5%85%B3%E4%BA%8EAPI%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E9%97%AE%E9%A2%98/"/>
    <id>http://blog.chenwe.top/2017/07/27/关于API传递参数的一些小问题/</id>
    <published>2017-07-27T10:24:52.472Z</published>
    <updated>2017-07-28T06:42:56.464Z</updated>
    
    <content type="html"><![CDATA[<p>有些API接口要求传回参数</p>
<p>有时候我们会在链接里直接带上参数<br>在后台用@PathVariable来获取参数<br>但是有些数据是不能直接放入链接里的</p>
<a id="more"></a>
<h2 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GetMapping</span>(<span class="string">"/forget_password/email=&#123;email&#125;"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">forgetPassword</span><span class="params">(@PathVariable(<span class="string">"email"</span>)</span> String email)</span></div></pre></td></tr></table></figure>
<p>这个是我们常用的方法，通过@PathVariable获取email的信息<br><strong>但是</strong><br>这个是有问题的<br>因为email是带有.com的<br>所以如果123456@mail.com 放入链接会变成 /forget_password/email=123456@mail.com<br>那么系统就会把 .com不当成邮箱的部分而舍去<br>后台用@PathVariable方法只会获取到123456@mail这个值</p>
<p>所以我们这里要用post放到body里传邮箱的值</p>
<p>除此之外，还有一些例如 换行之类的也是不能直接传的，要放到POST的body体里传过来（以前就犯过这个错误。。）</p>
<p><strong>除了这些带有特殊字符的值以外</strong></p>
<p><strong>我们还要注意一些敏感的数据不能直接放到连接里。</strong></p>
<h2 id="顺便一提"><a href="#顺便一提" class="headerlink" title="顺便一提"></a>顺便一提</h2><p>SpringBoot里，获取数据有两种<br>一种是从连接里获取，还有一种是从body里获取</p>
<ul>
<li>连接里获取<br>利用 @PathVariable 注解<br>例如:<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GetMapping</span>(<span class="string">"/findByDorm/dorm=&#123;dorm&#125;"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">findByDor</span><span class="params">(@PathVariable(<span class="string">"dorm"</span>)</span> String dorm) </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>这样我们就获取了连接的dorm的值了</p>
<ul>
<li>body里取值<br>利用 @RequestParam 注解<br>例如:<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@PostMapping</span>(<span class="string">"/bindingDorm"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">bindingDorm</span><span class="params">(@RequestParam(<span class="string">"dorm"</span>)</span> String dorm) </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>这样我们就获取了连接的dorm的值了</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有些API接口要求传回参数&lt;/p&gt;
&lt;p&gt;有时候我们会在链接里直接带上参数&lt;br&gt;在后台用@PathVariable来获取参数&lt;br&gt;但是有些数据是不能直接放入链接里的&lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://blog.chenwe.top/categories/SpringBoot/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js中Cookie的操作</title>
    <link href="http://blog.chenwe.top/2017/07/23/Vue.js%E4%B8%ADCookie%E7%9A%84%E6%93%8D%E4%BD%9C/"/>
    <id>http://blog.chenwe.top/2017/07/23/Vue.js中Cookie的操作/</id>
    <published>2017-07-23T06:25:01.399Z</published>
    <updated>2017-07-23T07:02:24.073Z</updated>
    
    <content type="html"><![CDATA[<p>在用vue.js搭建前端的时候<br>做到登录的功能</p>
<p>登录成功后，虽然能在界面上显示用户名<br>但是一刷新就全没了<br><img src="http://otj6w86xd.bkt.clouddn.com/bqb-cm.jpg" alt=""></p>
<a id="more"></a>
<h2 id="该怎么办？"><a href="#该怎么办？" class="headerlink" title="该怎么办？"></a>该怎么办？</h2><p>我的做法是保存到Cookie里</p>
<ul>
<li>那么该怎么保存呢？</li>
</ul>
<p>我们自己来手动保存吧<br>来到main.js文件里<br>把有关Cookie的操作都写好<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置cookie</span></div><div class="line">Vue.prototype.setCookie = <span class="function">(<span class="params">c_name, value, expiredays</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">var</span> exdate = <span class="keyword">new</span> <span class="built_in">Date</span>();　　　　</div><div class="line">  exdate.setDate(exdate.getDate() + expiredays);　　　　</div><div class="line">  <span class="built_in">document</span>.cookie = c_name + <span class="string">"="</span> + <span class="built_in">escape</span>(value) + ((expiredays == <span class="literal">null</span>) ? <span class="string">""</span> : <span class="string">";expires="</span> + exdate.toGMTString());</div><div class="line">&#125;</div><div class="line"><span class="comment">//获取cookie、</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> arr, reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(^| )"</span> + name + <span class="string">"=([^;]*)(;|$)"</span>);</div><div class="line">  <span class="keyword">if</span> (arr = <span class="built_in">document</span>.cookie.match(reg))</div><div class="line">    <span class="keyword">return</span> (arr[<span class="number">2</span>]);</div><div class="line">  <span class="keyword">else</span></div><div class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">&#125;</div><div class="line">Vue.prototype.getCookie = getCookie;</div><div class="line"></div><div class="line"><span class="comment">//删除cookie</span></div><div class="line">Vue.prototype.delCookie =<span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">var</span> exp = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">    exp.setTime(exp.getTime() - <span class="number">1</span>);</div><div class="line">    <span class="keyword">var</span> cval = getCookie(name);</div><div class="line">    <span class="keyword">if</span> (cval != <span class="literal">null</span>)</div><div class="line">      <span class="built_in">document</span>.cookie = name + <span class="string">"="</span> + cval + <span class="string">";expires="</span> + exp.toGMTString();</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>这样我们就有关于Cookie的操作了</p>
<h2 id="该怎么用？"><a href="#该怎么用？" class="headerlink" title="该怎么用？"></a>该怎么用？</h2><p>到我们想要存储Cookie的地方<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> expireDays = <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">15</span>;</div><div class="line"><span class="keyword">this</span>.setCookie(<span class="string">'username'</span>, response.data, expireDays);</div></pre></td></tr></table></figure></p>
<p>用this.xxxCookie调用就好了<br>expireDays是Cookie失效时间</p>
<p>这样，我们就能够完成对于Cookie的操作了<br>在用户刷新时，在created方法里获取Cookie就知道用户有没有登录了<br><img src="http://otj6w86xd.bkt.clouddn.com/bqb-bcm.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在用vue.js搭建前端的时候&lt;br&gt;做到登录的功能&lt;/p&gt;
&lt;p&gt;登录成功后，虽然能在界面上显示用户名&lt;br&gt;但是一刷新就全没了&lt;br&gt;&lt;img src=&quot;http://otj6w86xd.bkt.clouddn.com/bqb-cm.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="vue.js" scheme="http://blog.chenwe.top/categories/vue-js/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot定时任务</title>
    <link href="http://blog.chenwe.top/2017/07/20/SpringBoot%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <id>http://blog.chenwe.top/2017/07/20/SpringBoot定时任务/</id>
    <published>2017-07-20T10:28:30.770Z</published>
    <updated>2017-07-20T10:44:04.516Z</updated>
    
    <content type="html"><![CDATA[<p>定时任务是一个后台经常要用到的功能</p>
<a id="more"></a>
<h2 id="首先我们要在SpringBoot里配置pom-xml文件"><a href="#首先我们要在SpringBoot里配置pom-xml文件" class="headerlink" title="首先我们要在SpringBoot里配置pom.xml文件"></a>首先我们要在SpringBoot里配置pom.xml文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>只要有starter就好了（spring-boot-starter-xxx也行）</p>
<h2 id="创建一个定时任务"><a href="#创建一个定时任务" class="headerlink" title="创建一个定时任务"></a>创建一个定时任务</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by cw on 2017/7/20.</div><div class="line"> */</div><div class="line"> <span class="meta">@Component</span></div><div class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchedulerTaskFindAndSend</span> </span>&#123;</div><div class="line">     <span class="keyword">private</span> <span class="keyword">int</span> count=<span class="number">0</span>;</div><div class="line"></div><div class="line">     <span class="meta">@Scheduled</span>(cron=<span class="string">"*/30 * * * * ?"</span>)</div><div class="line">     <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span></span>&#123;</div><div class="line">         System.out.println(<span class="string">"count = "</span>+(count++));</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>在@SpringBootApplication下添加@EnableScheduling<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@SpringBootApplication</div><div class="line">@EnableScheduling</div></pre></td></tr></table></figure></p>
<p>启动运行程序<br>控制台会每隔30秒打印出 count = 计数</p>
<h2 id="关于-Scheduled"><a href="#关于-Scheduled" class="headerlink" title="关于@Scheduled"></a>关于@Scheduled</h2><p>除了cron=” “ 这种方式外<br>还有以下几种</p>
<ul>
<li>@Scheduled(fixedRate = 3000) ————————上一次开始执行时间点之后3秒再执行</li>
<li>@Scheduled(fixedDelay = 3000) ————————上一次执行完毕时间点之后3秒再执行</li>
<li>@Scheduled(initialDelay=1000, initialDelay = 3000) ————————第一次延迟1秒后执行，之后按fixedRate的规则每3秒执行一次</li>
</ul>
<p><strong>关于cron表达式</strong><br>可以看下<a href="http://rainbowdesert.iteye.com/blog/2107220" target="_blank" rel="external">这篇博客</a>对于cron表达式讲解比较详细</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;定时任务是一个后台经常要用到的功能&lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://blog.chenwe.top/categories/SpringBoot/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot邮箱注册验证</title>
    <link href="http://blog.chenwe.top/2017/07/19/SpringBoot%E9%82%AE%E7%AE%B1%E6%B3%A8%E5%86%8C%E9%AA%8C%E8%AF%81/"/>
    <id>http://blog.chenwe.top/2017/07/19/SpringBoot邮箱注册验证/</id>
    <published>2017-07-19T11:03:05.574Z</published>
    <updated>2017-07-19T11:36:58.898Z</updated>
    
    <content type="html"><![CDATA[<p>注册功能是一个网站的基本功能<br>刚刚实现了用邮箱来注册并验证的程序<br>这里记录下<br><a id="more"></a></p>
<p>有了上篇<a href="https://xiaoshidefeng.github.io/2017/07/18/SpringBoot%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/" target="_blank" rel="external">SpringBoot发送邮件</a>的基础，我们就可以完成一个简单的邮箱注册功能了</p>
<h2 id="首先我们要在SpringBoot里配置pom-xml文件"><a href="#首先我们要在SpringBoot里配置pom-xml文件" class="headerlink" title="首先我们要在SpringBoot里配置pom.xml文件"></a>首先我们要在SpringBoot里配置pom.xml文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这个比起之前的邮件服务还多了两个配置<br>分别是</p>
<ul>
<li>mysql驱动</li>
<li>jpa</li>
</ul>
<h2 id="在application-properties中添加邮件和mysql配置"><a href="#在application-properties中添加邮件和mysql配置" class="headerlink" title="在application.properties中添加邮件和mysql配置"></a>在application.properties中添加邮件和mysql配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">spring.mail.host=smtp.mxhichina.com</div><div class="line">spring.mail.username=邮箱账号</div><div class="line">spring.mail.password=密码</div><div class="line">spring.mail.default-encoding=UTF-8</div><div class="line"></div><div class="line">mail.fromMail.addr=你想要用来发送的邮箱</div><div class="line"></div><div class="line">server.port=8899</div><div class="line"></div><div class="line">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</div><div class="line">spring.datasource.url=jdbc:mysql://localhost:3306/dbname?useUnicode=true&amp;characterEncoding=utf8</div><div class="line">spring.datasource.username=root</div><div class="line">spring.datasource.password=</div><div class="line"></div><div class="line">spring.jpa.hibernate.ddl-auto=update</div><div class="line">spring.jpa.show-sql=true</div></pre></td></tr></table></figure>
<h2 id="数据库的用户字段"><a href="#数据库的用户字段" class="headerlink" title="数据库的用户字段"></a>数据库的用户字段</h2><p>用户字段至少要有这几个方面组成</p>
<ul>
<li>用户邮箱</li>
<li>用户密码</li>
<li>用户激活状态</li>
<li>用户激活码</li>
</ul>
<p>激活状态用来显示用户是否已经通过邮箱完成激活，未完成为 0 完成为 1</p>
<p>激活码是一串随机字符串，用来在邮件中添加用户标识</p>
<h2 id="邮箱验证的流程"><a href="#邮箱验证的流程" class="headerlink" title="邮箱验证的流程"></a>邮箱验证的流程</h2><p>用户填写完账号密码点击注册后<br>后台获取用户信息<br>验证是否合法<br>如果合法就将用户激活状态置0<br>开启邮件发送服务<br>用户收到邮件，邮件里有一个连接，由用户id 和 激活码组成<br>用户点击激活链接<br>账号完成激活，用户激活状态置1</p>
<p><strong>至此，一个简单的注册流程就完成了</strong></p>
<h2 id="一些相关代码"><a href="#一些相关代码" class="headerlink" title="一些相关代码"></a>一些相关代码</h2><p><strong>发送验证邮件服务</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(!user.getUserEmail().matches(<span class="string">"^\\w+@(\\w+\\.)+\\w+$"</span>)) &#123;</div><div class="line">    <span class="keyword">return</span> ResultUtil.error(<span class="number">10</span>, <span class="string">"邮箱不合法"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(userRepository.findByUserEmail(user.getUserEmail()) != <span class="keyword">null</span>) &#123;</div><div class="line">    <span class="keyword">return</span> ResultUtil.error(<span class="number">2</span>, <span class="string">"邮箱已被注册"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//加盐</span></div><div class="line">String code = CodeUtil.generateCode(user.getUserEmail());</div><div class="line">String codepw = CodeUtil.generateCode(user.getPassword());</div><div class="line">user.setPassword(codepw);</div><div class="line">user.setUserState(<span class="number">0</span>);</div><div class="line">user.setUserCode(code);</div><div class="line"></div><div class="line">SimpleDateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);<span class="comment">//设置日期格式</span></div><div class="line">user.setRegisterTime(df.format(<span class="keyword">new</span> Date()));</div><div class="line"></div><div class="line"><span class="keyword">if</span>(mailUtil.sendRegisterMail(user.getUserEmail(), code)) &#123;</div><div class="line">    <span class="keyword">return</span> ResultUtil.success(userRepository.save(user));</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> ResultUtil.error(<span class="number">4</span>, <span class="string">"邮件发送失败"</span>);</div></pre></td></tr></table></figure></p>
<p><strong>发送html邮件</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</div><div class="line"><span class="keyword">import</span> org.springframework.mail.javamail.JavaMailSender;</div><div class="line"><span class="keyword">import</span> org.springframework.mail.javamail.MimeMessageHelper;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"><span class="keyword">import</span> org.thymeleaf.TemplateEngine;</div><div class="line"><span class="keyword">import</span> org.thymeleaf.context.Context;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.mail.MessagingException;</div><div class="line"><span class="keyword">import</span> javax.mail.internet.MimeMessage;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by cw on 2017/7/19.</div><div class="line"> */</div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailUtil</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> JavaMailSender mailSender;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> TemplateEngine templateEngine;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;mail.fromMail.addr&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String from;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sendRegisterMail</span><span class="params">(String email, String code)</span> </span>&#123;</div><div class="line">        MimeMessage message = mailSender.createMimeMessage();</div><div class="line"></div><div class="line">        String register_link = <span class="string">"http://localhost:8899/api/email="</span> + email + <span class="string">"/code="</span> +code;</div><div class="line"></div><div class="line">        <span class="comment">//创建邮件正文</span></div><div class="line">        Context context = <span class="keyword">new</span> Context();</div><div class="line">        context.setVariable(<span class="string">"register_link"</span>, register_link);</div><div class="line">        String emailContent = templateEngine.process(<span class="string">"UserRegisterTemplate"</span>, context);</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//true表示需要创建一个multipart message</span></div><div class="line">            MimeMessageHelper helper = <span class="keyword">new</span> MimeMessageHelper(message, <span class="keyword">true</span>);</div><div class="line">            helper.setFrom(from);</div><div class="line">            helper.setTo(email);</div><div class="line">            helper.setSubject(<span class="string">"低电查询验证邮件"</span>);</div><div class="line">            helper.setText(emailContent, <span class="keyword">true</span>);</div><div class="line"></div><div class="line">            mailSender.send(message);</div><div class="line">            logger.info(<span class="string">"html邮件发送成功"</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125; <span class="keyword">catch</span> (MessagingException e) &#123;</div><div class="line">            logger.error(<span class="string">"发送html邮件时发生异常！"</span>, e);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>邮箱验证</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">userCheckMail</span><span class="params">(String email, String code)</span> </span>&#123;</div><div class="line">    User user = userRepository.findByUserCode(code);</div><div class="line">    <span class="keyword">if</span>(user.getUserEmail() != <span class="keyword">null</span> &amp;&amp; user.getUserEmail().equals(email)) &#123;</div><div class="line">        user.setUserState(<span class="number">1</span>);</div><div class="line">        userRepository.save(user);</div><div class="line">        <span class="keyword">return</span> ResultUtil.success();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ResultUtil.error(<span class="number">6</span>, <span class="string">"邮件验证失败"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;注册功能是一个网站的基本功能&lt;br&gt;刚刚实现了用邮箱来注册并验证的程序&lt;br&gt;这里记录下&lt;br&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://blog.chenwe.top/categories/SpringBoot/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot发送邮件</title>
    <link href="http://blog.chenwe.top/2017/07/18/SpringBoot%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"/>
    <id>http://blog.chenwe.top/2017/07/18/SpringBoot发送邮件/</id>
    <published>2017-07-18T12:03:31.612Z</published>
    <updated>2017-07-18T12:32:14.039Z</updated>
    
    <content type="html"><![CDATA[<p>最近把算打注册邮箱验证弄一下</p>
<p>学习了下如何用SpringBoot发送邮件<br><a id="more"></a></p>
<h2 id="首先我们要在SpringBoot里配置pom-xml文件"><a href="#首先我们要在SpringBoot里配置pom-xml文件" class="headerlink" title="首先我们要在SpringBoot里配置pom.xml文件"></a>首先我们要在SpringBoot里配置pom.xml文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这个就是spring推出的JavaMailSender<br>比起之前的JavaMail 更加简化了邮件发送的过程</p>
<h2 id="在application-properties中添加邮箱配置"><a href="#在application-properties中添加邮箱配置" class="headerlink" title="在application.properties中添加邮箱配置"></a>在application.properties中添加邮箱配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">spring.mail.host=smtp.mxhichina.com</div><div class="line">spring.mail.username=邮箱账号</div><div class="line">spring.mail.password=密码</div><div class="line">spring.mail.default-encoding=UTF-8</div><div class="line"></div><div class="line">mail.fromMail.addr=你想要用来发送的邮箱</div></pre></td></tr></table></figure>
<p>第一个是smtp服务（详细Google下，确保你的邮箱开启了smtp）</p>
<h2 id="编写一个简单的类来测试"><a href="#编写一个简单的类来测试" class="headerlink" title="编写一个简单的类来测试"></a>编写一个简单的类来测试</h2><p>为了防止初学者导错包，我把import也写进来<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</div><div class="line"><span class="keyword">import</span> org.springframework.mail.SimpleMailMessage;</div><div class="line"><span class="keyword">import</span> org.springframework.mail.javamail.JavaMailSender;</div><div class="line"><span class="keyword">import</span> org.springframework.mail.javamail.MimeMessageHelper;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.mail.MessagingException;</div><div class="line"><span class="keyword">import</span> javax.mail.internet.MimeMessage;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by cw on 2017/7/18.</div><div class="line"> */</div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> JavaMailSender mailSender;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;mail.fromMail.addr&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String from;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendSimpleMail</span><span class="params">(String to, String subject, String content)</span> </span>&#123;</div><div class="line">        SimpleMailMessage message = <span class="keyword">new</span> SimpleMailMessage();</div><div class="line">        message.setFrom(from);</div><div class="line">        message.setTo(to);</div><div class="line">        message.setSubject(subject);</div><div class="line">        message.setText(content);</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            mailSender.send(message);</div><div class="line">            logger.info(<span class="string">"简单邮件已经发送。"</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            logger.error(<span class="string">"发送简单邮件时发生异常！"</span>, e);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个就是来负责发送邮件的类了</p>
<p>我们编写测试类来测试下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</div><div class="line"><span class="keyword">import</span> org.thymeleaf.TemplateEngine;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@SpringBootTest</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationTests</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Autowired</span></div><div class="line">	<span class="keyword">private</span> MailService mailService;</div><div class="line"></div><div class="line">	<span class="meta">@Autowired</span></div><div class="line">	<span class="keyword">private</span> TemplateEngine templateEngine;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSimpleMail</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		mailService.sendSimpleMail(<span class="string">"123456789@qq.com"</span>,<span class="string">"测试邮件"</span>,<span class="string">" 你好"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>邮件运行测试类<br>如果按照上面的步骤来的话，123456789@qq.com里应该会收到一份邮件（请用自己的邮箱来测试）</p>
<p>但是这样的邮件是不是太单调了？<br>那么我们可以html来美化邮件</p>
<h2 id="用thymeleaf来美化邮件"><a href="#用thymeleaf来美化邮件" class="headerlink" title="用thymeleaf来美化邮件"></a>用thymeleaf来美化邮件</h2><p>在pom.xml文件里引入<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在MailService里添加新的方法来发送html邮件<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendHtmlMail</span><span class="params">(String to, String subject, String content)</span> </span>&#123;</div><div class="line">    MimeMessage message = mailSender.createMimeMessage();</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">//true表示需要创建一个multipart message</span></div><div class="line">        MimeMessageHelper helper = <span class="keyword">new</span> MimeMessageHelper(message, <span class="keyword">true</span>);</div><div class="line">        helper.setFrom(from);</div><div class="line">        helper.setTo(to);</div><div class="line">        helper.setSubject(subject);</div><div class="line">        helper.setText(content, <span class="keyword">true</span>);</div><div class="line"></div><div class="line">        mailSender.send(message);</div><div class="line">        logger.info(<span class="string">"html邮件发送成功"</span>);</div><div class="line">    &#125; <span class="keyword">catch</span> (MessagingException e) &#123;</div><div class="line">        logger.error(<span class="string">"发送html邮件时发生异常！"</span>, e);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在resources文件夹中的templates里新建HTML文件</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">您好,这是验证邮件,请点击下面的链接完成验证,<span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">th:href</span>=<span class="string">"@&#123; http://www.google.com/&#123;id&#125;(id=$&#123;id&#125;) &#125;"</span>&gt;</span>激活账号<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>测试一下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.thymeleaf.context.Context;</div><div class="line"></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendTemplateMail</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="comment">//创建邮件正文</span></div><div class="line">  Context context = <span class="keyword">new</span> Context();</div><div class="line">  context.setVariable(<span class="string">"id"</span>, <span class="string">"1"</span>);</div><div class="line">  String emailContent = templateEngine.process(<span class="string">"emailTemplate"</span>, context);</div><div class="line"></div><div class="line">  mailService.sendHtmlMail(<span class="string">"123456789@qq.com"</span>,<span class="string">"主题：这是模板邮件"</span>,emailContent);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里我们传入了一个id 到html里</p>
<p>运行测试类，你的邮箱应该又收到了一封邮件<br>不过这封会更加美观？</p>
<p><strong>这个就是SpringBoot发送邮件的简单教程了</strong></p>
<p>本篇参考了<a href="http://www.ityouknow.com/springboot/2017/05/06/springboot-mail.html" target="_blank" rel="external">这篇博客</a><br>也可以去这里学习下</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近把算打注册邮箱验证弄一下&lt;/p&gt;
&lt;p&gt;学习了下如何用SpringBoot发送邮件&lt;br&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://blog.chenwe.top/categories/SpringBoot/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>在Tomcat上部署Vue.js项目</title>
    <link href="http://blog.chenwe.top/2017/07/17/%E5%9C%A8Tomcat%E4%B8%8A%E9%83%A8%E7%BD%B2Vue.js%E9%A1%B9%E7%9B%AE/"/>
    <id>http://blog.chenwe.top/2017/07/17/在Tomcat上部署Vue.js项目/</id>
    <published>2017-07-17T06:54:17.406Z</published>
    <updated>2017-07-18T12:41:27.552Z</updated>
    
    <content type="html"><![CDATA[<p>接着上次的图书管理系统</p>
<p>修改完问题后把SpringBoot成功部署到了服务器上<br>测试了下api接口，能正常访问<br>那么下面就是在服务器上部署前端的vue.js了<br><a id="more"></a></p>
<p>这里的话我们要明确一点<br>vue.js是一个前端的框架，所以部署的时候并不需要node.js之类的服务器 像本地的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm run Dev</div></pre></td></tr></table></figure></p>
<p><strong>只是用来调试用的，不要再线上用它部署</strong></p>
<p>这里我先用比较熟悉的Tomcat来部署<br>我们先在本地运行命令来打包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm run bulid</div></pre></td></tr></table></figure></p>
<p>通过这个命令，我们会打包我们的项目到一个 dist文件夹中</p>
<p>我们把它部署到Tomcat服务器上</p>
<p>用WinSCP软件登陆我们的服务器<br>找到Tomcat的wabapps目录<br>把新建一个文件夹，我这里把它命名为 bookmanage<br>我们把本地dist文件夹里的文件复制到 bookmanage中</p>
<p>完成之后，我们访问默认的8080端口 加上 bookmanage 就可以访问到我们的项目了<br>例如我的项目地址 <a href="http://118.89.159.95:8080/bookmanage" target="_blank" rel="external">http://118.89.159.95:8080/bookmanage</a> （账号：admin 密码：admin）<br>这样我们的前端的项目部署就成功了</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接着上次的图书管理系统&lt;/p&gt;
&lt;p&gt;修改完问题后把SpringBoot成功部署到了服务器上&lt;br&gt;测试了下api接口，能正常访问&lt;br&gt;那么下面就是在服务器上部署前端的vue.js了&lt;br&gt;
    
    </summary>
    
      <category term="vue.js" scheme="http://blog.chenwe.top/categories/vue-js/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>JPA里自定义SQL查询的一些问题</title>
    <link href="http://blog.chenwe.top/2017/07/13/JPA%E9%87%8C%E8%87%AA%E5%AE%9A%E4%B9%89SQL%E6%9F%A5%E8%AF%A2%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
    <id>http://blog.chenwe.top/2017/07/13/JPA里自定义SQL查询的一些问题/</id>
    <published>2017-07-13T13:35:07.592Z</published>
    <updated>2017-07-13T13:58:50.236Z</updated>
    
    <content type="html"><![CDATA[<p>接着上次的图书管理系统</p>
<p>还书的时候不仅要在还书的数据表添加新纪录<br>还要去把借书表中对应的内容删除</p>
<a id="more"></a>
<p>但是因为前端我写的时候只返回了book_id和client_id<br>所以在还书的Service里还要根据这两个id去查出对应的借书记录，并删掉</p>
<p>这里可以用Spring data 里的自定义查询来实现<br>自定义查询以及Spring data JPA的使用方法可以在<a href="http://www.ityouknow.com/springboot/2016/08/20/springboot%28五%29-spring-data-jpa的使用" target="_blank" rel="external">这里</a> 有相关的介绍</p>
<p>因为我在设定Rent这个实体类了里设定的是book_id和client_id<br><strong>所以在机智的IDEA的帮助下，我写了这么一句在repository里写了这么一句</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Rent findByClient_idAndBook_id(Integer client_id, Integer book_id);</div></pre></td></tr></table></figure></p>
<p>哈哈，这不是简单吗<br>然后运行<br><strong>报错</strong><br>哦，我天呐，来看看控制台的信息吧<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">No property client found for type Rent!</div></pre></td></tr></table></figure></p>
<p>我来简单翻译下<br><em>在Rent里找不到client属性</em></p>
<p>client? 不是client_id 吗</p>
<p>经过查找，终于在文档里发现 一个下划线 _ 会被认为是And的意思<br>所以findByClient_idAndBook_id 就被理解为 根据client 和 id 和 book 和 id 来查找<br>然后系统在Rent里找不到client 所以就报错了</p>
<h2 id="该怎么办呢？"><a href="#该怎么办呢？" class="headerlink" title="该怎么办呢？"></a>该怎么办呢？</h2><p>嗯，所以命名时候就不要用_ 下划线就好了(IDEA 还挺 ‘机智’的)<br>现在去改应该还来的及<br>不说了，现在去改了..</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接着上次的图书管理系统&lt;/p&gt;
&lt;p&gt;还书的时候不仅要在还书的数据表添加新纪录&lt;br&gt;还要去把借书表中对应的内容删除&lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://blog.chenwe.top/categories/SpringBoot/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>MySql的保留字段的问题</title>
    <link href="http://blog.chenwe.top/2017/07/12/MySql%E7%9A%84%E4%BF%9D%E7%95%99%E5%AD%97%E6%AE%B5%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://blog.chenwe.top/2017/07/12/MySql的保留字段的问题/</id>
    <published>2017-07-12T12:20:58.091Z</published>
    <updated>2017-07-12T12:40:27.455Z</updated>
    
    <content type="html"><![CDATA[<p>今天打算把短学期实践的时候写的图书管理系统的后台用SpringBoot实现一下<br>一开始很顺利<br>但是在写插入一本书的数据的时候出现了问题<br><a id="more"></a><br>以下是报错信息的部分截取</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SQL Error: 1064, SQLState: 42000</div><div class="line">You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near &apos;write) values (321, &apos;11111111&apos;, &apos;sdasd&apos;, &apos;ssss&apos;, &apos;aaa&apos;)&apos; at line 1</div></pre></td></tr></table></figure>
<p>我试着解决整个问题<br>我打开控制台<br>因为我在properties里设置了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">spring.jpa.show-sql=true</div></pre></td></tr></table></figure></p>
<p>所以是能看到sql语句的<br>我发现控制台里打印出来的是这个信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hibernate: insert into book (author, inventory, isbn, name, publisher) values (?, ?, ?, ?, ?)</div></pre></td></tr></table></figure></p>
<p>为什么value都是问号<br>难道是传回来的数据没有收到吗？<br>问题出在传输的时候？</p>
<p>我改了一种形式来接受，并且打印出来<br>发现收到的数据是正常的<br>说明传输没有问题</p>
<p>然后我去Google了 SQL Error: 1064, SQLState: 42000<br>在stackoverflow 的<a href="https://stackoverflow.com/questions/28946567/sql-error-1064-sqlstate-42000-while-creating-new-entity" target="_blank" rel="external">这个</a>答案里找到了解决方案<br>大意就是我占用了MySql的一个保留字段<br>在我这里因为用了write 这个字段，所以报错了</p>
<p>在MySQL中，部分字显式被保留。其中大多数字进制被标准SQL用作列名和/或表名(例如，GROUP)。少数被保留了，因为MySQL需要它们，在MySQL中，当表名或字段名乃至数据库名和保留字冲突时，在sql语句里可以用撇号（）括起来,当让我们一般都尽量少使用这些保留的字段。<br>点击<a href="http://www.metsky.com/archives/3.html" target="_blank" rel="external">MySql保留字段</a> 来查看具体的字段</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天打算把短学期实践的时候写的图书管理系统的后台用SpringBoot实现一下&lt;br&gt;一开始很顺利&lt;br&gt;但是在写插入一本书的数据的时候出现了问题&lt;br&gt;
    
    </summary>
    
      <category term="MySql" scheme="http://blog.chenwe.top/categories/MySql/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>关于Spring数据库连接</title>
    <link href="http://blog.chenwe.top/2017/07/11/%E5%85%B3%E4%BA%8ESpringBoot%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5/"/>
    <id>http://blog.chenwe.top/2017/07/11/关于SpringBoot数据库连接/</id>
    <published>2017-07-11T05:49:53.542Z</published>
    <updated>2017-07-11T06:03:24.069Z</updated>
    
    <content type="html"><![CDATA[<p>之前短学期数据库实践，和同学用SpringMVC + mybatis 做了个图书管理系统的后台<br>用vue.js与ElementUI做前端</p>
<p>在合作的时候，我们采用的是GitHub 来进行代码同步协作<br>但是在中间遇到了一个小插曲<br><a id="more"></a></p>
<p>我在调试的时候，发现我通过前端向后台数据库插入和更新数据的时候，中文字符都会变成???</p>
<p>一开始我认为是前端传输的时候Header里的格式问题<br>但是用postman来调试还是没用</p>
<p>后来我打开IDEA的log窗口，查看程序运行时的log<br>发现log里中文还是正常显示的</p>
<p>那么问题应该出在后台与数据库的连接那里</p>
<p>我们数据库是utf-8格式<br>我们连接的时候是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">data_source_url=jdbc:mysql://localhost:3306/bookmanage</div></pre></td></tr></table></figure></p>
<p>没有指定编码格式<br>于是我改成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">data_source_url=jdbc:mysql://localhost:3306/bookmanage?useUnicode=true&amp;characterEncoding=utf8</div></pre></td></tr></table></figure></p>
<p>重启服务后再次进行调试，发现成功了<br>中文成功更新到数据里了</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前短学期数据库实践，和同学用SpringMVC + mybatis 做了个图书管理系统的后台&lt;br&gt;用vue.js与ElementUI做前端&lt;/p&gt;
&lt;p&gt;在合作的时候，我们采用的是GitHub 来进行代码同步协作&lt;br&gt;但是在中间遇到了一个小插曲&lt;br&gt;
    
    </summary>
    
      <category term="SpringMVC" scheme="http://blog.chenwe.top/categories/SpringMVC/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>服务器运行打包的jar</title>
    <link href="http://blog.chenwe.top/2017/07/10/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E8%A1%8C%E6%89%93%E5%8C%85%E7%9A%84jar/"/>
    <id>http://blog.chenwe.top/2017/07/10/服务器运行打包的jar/</id>
    <published>2017-07-10T09:18:32.352Z</published>
    <updated>2017-07-10T09:31:58.147Z</updated>
    
    <content type="html"><![CDATA[<p>写了个简单的SpringBoot的demo<br>打包成jar文件部署到服务器</p>
<p>通常的做法是</p>
<a id="more"></a>
<p>进入jar文件目录<br>输入命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar demo2.jar</div></pre></td></tr></table></figure></p>
<p>虽然这样确实能跑起来，但是这不是常驻后台的<br>一旦你关闭ssh窗口，服务也就停止了</p>
<p>下面介绍常驻后台的方法</p>
<p>用Linux里的nohup 命令<br>例如这里我们可以这样做<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nohup java -jar demo2.jar &gt;test.out &amp;</div></pre></td></tr></table></figure></p>
<p>解释下<br>nohup 意思是不挂断运行命令,当账户退出或终端关闭时,程序仍然运行<br>. &gt;test.out  是指把log打印到test.out文件中<br>&amp;是指在后台运行</p>
<p>执行完后会返回<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nohup: ignoring input and redirecting stderr to stdout</div></pre></td></tr></table></figure></p>
<p>下面我们到浏览器里访问目标地址就可以获取到信息了，证明我们的服务跑起来了</p>
<p>我们输入 ls</p>
<p>可以看到当前文件夹下多出了一个test.out文件</p>
<p>输入 ps -a<br>可以看到运行的进程<br>如果看不到的话 输入 top</p>
<p>想要停止进程的话 用kill命令就好了</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写了个简单的SpringBoot的demo&lt;br&gt;打包成jar文件部署到服务器&lt;/p&gt;
&lt;p&gt;通常的做法是&lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://blog.chenwe.top/categories/SpringBoot/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>关于SpringBoot部署上的一些坑</title>
    <link href="http://blog.chenwe.top/2017/07/09/%E5%85%B3%E4%BA%8ESpringBoot%E9%83%A8%E7%BD%B2%E4%B8%8A%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/"/>
    <id>http://blog.chenwe.top/2017/07/09/关于SpringBoot部署上的一些坑/</id>
    <published>2017-07-09T06:53:00.354Z</published>
    <updated>2017-07-09T07:32:06.294Z</updated>
    
    <content type="html"><![CDATA[<p>最近打算把之前写的一个SpringBoot的小demo部署到自己的腾讯云上<br>但是中间断断续续踩了很多坑，所以来写个博客，来记录下</p>
<h2 id="第一个坑"><a href="#第一个坑" class="headerlink" title="第一个坑"></a>第一个坑</h2><ul>
<li>war包的部署</li>
</ul>
<p>在IDEA里打包成war包后，我高高兴兴的把它扔到了服务器的Tomcat上<br><a id="more"></a><br>但是却没有用，我以为是环境问题<br>于是我把打包的war包扔到了本地的Tomcat上<br>还是没有用<br>我查看了本地Tomcat的日志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">严重: The web application [/ssm] registered the JDBC driver [com.alibaba.druid.proxy.DruidDriver] but failed to unregister it when the web application was stopped. To prevent a memory leak, the JDBC Driver has been forcibly unregistered.</div></pre></td></tr></table></figure></p>
<p>查了资料，说是Tomcat7里面的防止内存泄漏的机制<br>用了很多方法试着解决，但是现在还是没有解决<br>于是用了jar打包的方式，放弃用war打包</p>
<h2 id="第二个坑"><a href="#第二个坑" class="headerlink" title="第二个坑"></a>第二个坑</h2><ul>
<li>jar的打包<br>SpringBoot里用jar打包只需把pom.xml里packaging改成jar<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;packaging&gt;jar&lt;/packaging&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>然后点击右侧Maven projects里的package即可在target目录下生成对应的jar文件<br><img src="/images/20170709/2017070901.png" alt=""></p>
<p>但是有一个问题，我本地数据的密码与服务器上不一样<br>所以还要在resources文件夹下的application.properties 里把数据库密码改下<br>但是因为我这里有单元测试，所以改完后要关掉单元测试才行</p>
<p>改完后在本地测试成功<br>高高兴兴的扔到服务器上<br>执行命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar demo.jar</div></pre></td></tr></table></figure></p>
<p>报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Exception in thread “main” java.lang.UnsupportedClassVersionError: a (Unsupported major.minor version 52.0)</div></pre></td></tr></table></figure></p>
<p>这里就要注意了<br>因为我本地编译用的JAVA SDK是1.8版本的<br>而服务器上是1.7版本的，所以就出了问题</p>
<p>一开始我打算把IDEA里项目编译的SDK改为1.7<br>但是改完1.7后打包各种报错<br>估计是Maven那边又有些地方版本对不上吧（JAVA的版本真的是坑，前后不兼容）</p>
<p>于是只能在服务器上修改JAVA的版本<br>参考了这篇博客 <a href="http://www.cnblogs.com/a2211009/p/4265225.html" target="_blank" rel="external">ubuntu 安装jdk 的两种方式</a><br>总算是完成了版本的升级</p>
<h2 id="第三个坑"><a href="#第三个坑" class="headerlink" title="第三个坑"></a>第三个坑</h2><ul>
<li>服务器上的端口问题<br>一开始我在resources文件夹下的application.properties 里把项目端口设置为81端口<br>但是在服务器上运行的时候报错了<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ERROR 10148 --- [           main] o.a.coyote.http11.Http11NioProtocol      : Failed to start end point associated with ProtocolHandler [&quot;http-nio-81&quot;]</div></pre></td></tr></table></figure>
</li>
</ul>
<p>查了资料后<br>According to w3.org doc ports below 1024 are priviledged on Linux. Only root can bind to such ports. You should either use ports &gt;1024 or run under root account (not recommended).<br>发现好像不能把端口定为小于1024的端口，于是我改成了8889端口</p>
<p>打包–本地测试–上传服务器–运行–成功</p>
<p>总算是成功了！！！</p>
<h2 id="一些注意事项"><a href="#一些注意事项" class="headerlink" title="一些注意事项"></a>一些注意事项</h2><ul>
<li><p>数据库的远程管理用Mysql官方的MySql Workbench工具<br>远程连接的时候记得先在数据库中新建一个用户</p>
</li>
<li><p>Tomcat里的管理员要在tomcat-user.xml 中设置<br>设置完就可以查看进程了</p>
</li>
</ul>
<h2 id="用到的工具"><a href="#用到的工具" class="headerlink" title="用到的工具"></a>用到的工具</h2><ul>
<li>IDEA</li>
<li>Tomcat</li>
<li>Mysql</li>
<li>WinSCP</li>
<li>MySql Workbench</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近打算把之前写的一个SpringBoot的小demo部署到自己的腾讯云上&lt;br&gt;但是中间断断续续踩了很多坑，所以来写个博客，来记录下&lt;/p&gt;
&lt;h2 id=&quot;第一个坑&quot;&gt;&lt;a href=&quot;#第一个坑&quot; class=&quot;headerlink&quot; title=&quot;第一个坑&quot;&gt;&lt;/a&gt;第一个坑&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;war包的部署&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在IDEA里打包成war包后，我高高兴兴的把它扔到了服务器的Tomcat上&lt;br&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://blog.chenwe.top/categories/SpringBoot/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
</feed>
