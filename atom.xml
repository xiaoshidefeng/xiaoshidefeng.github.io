<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xiaoshidefeng的博客</title>
  <subtitle>一个计算机本科生</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.chenwe.top/"/>
  <updated>2019-07-13T09:00:31.137Z</updated>
  <id>http://blog.chenwe.top/</id>
  
  <author>
    <name>ChenWei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Kaggle入门题目Titanic的逻辑回归应用（一）</title>
    <link href="http://blog.chenwe.top/2019/07/12/2019/2019-07-12%20Kaggle%E5%85%A5%E9%97%A8%E9%A2%98%E7%9B%AETitanic%E7%9A%84%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E5%BA%94%E7%94%A8%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://blog.chenwe.top/2019/07/12/2019/2019-07-12 Kaggle入门题目Titanic的逻辑回归应用（一）/</id>
    <published>2019-07-12T12:41:57.977Z</published>
    <updated>2019-07-13T09:00:31.137Z</updated>
    
    <content type="html"><![CDATA[<p>Kaggle是一个数据建模和数据分析竞赛平台。企业和研究者可在其上发布数据，统计学者和数据挖掘专家可在其上进行竞赛以产生最好的模型。<br>这次记录一下Kaggle上的入门题目Titanic人员幸存预测，用了逻辑回归。</p>
<a id="more"></a>
<h1 id="比赛题目简析"><a href="#比赛题目简析" class="headerlink" title="比赛题目简析"></a>比赛题目简析</h1><p><a href="https://www.kaggle.com/c/titanic" target="_blank" rel="external">Titanic竞赛地址</a><br><img src="https://coding-net-production-file-ci.codehub.cn/fee15490-a4a5-11e9-b57d-4f6fc8bab870.jpg?sign=tiNgY9aZt734oVXi3U+e0pb8GX5hPTEyNTcyNDI1OTkmaz1BS0lEYXk4M2xGbWFTNlk0TFRkek1WTzFTZFpPeUpTTk9ZcHImZT0xNTYzMjAwOTQ4JnQ9MTU2Mjk4NDk0OCZyPTU3NTYyMTgmZj0vZmVlMTU0OTAtYTRhNS0xMWU5LWI1N2QtNGY2ZmM4YmFiODcwLmpwZyZiPWNvZGluZy1uZXQtcHJvZHVjdGlvbi1maWxl" alt=""></p>
<p>在它的Evaluation里的Goal里说明了这个题目的目的：</p>
<blockquote>
<p>It is your job to predict if a passenger survived the sinking of the Titanic or not.<br>For each in the test set, you must predict a 0 or 1 value for the variable.<br>你的工作是预测一名乘客是否能够幸免于泰坦尼克号沉没。<br>对于测试集中的每个，您必须预测变量的0或1值。</p>
</blockquote>
<p>预测幸存与否，其实就是一个二分类问题，可以用logistic regression来处理（当然，方法不止一种）</p>
<p>最后提交的是一个csv格式的文件，其中包含418个条目和一个标题行。<br>该文件应该有两列：<br>PassengerId（按任意顺序排序）<br>Survived（包含你的二元预测：1为幸存，0为死者）</p>
<blockquote>
<p>PassengerId,Survived<br> 892,0<br> 893,1<br> 894,0</p>
</blockquote>
<h1 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h1><h2 id="初识数据"><a href="#初识数据" class="headerlink" title="初识数据"></a>初识数据</h2><p>先从Data中下载train.csv与test.csv两个文件<br>按下面的方法导入并查看<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series, DataFrame</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    data_train = pd.read_csv(<span class="string">"data/train.csv"</span>)</div><div class="line">    <span class="comment"># 显示前10个数据</span></div><div class="line">    print(data_train.head(<span class="number">10</span>))</div></pre></td></tr></table></figure></p>
<p>控制台打印结果如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">   PassengerId  Survived  Pclass  ...     Fare Cabin  Embarked</div><div class="line">0            1         0       3  ...   7.2500   NaN         S</div><div class="line">1            2         1       1  ...  71.2833   C85         C</div><div class="line">2            3         1       3  ...   7.9250   NaN         S</div><div class="line">3            4         1       1  ...  53.1000  C123         S</div><div class="line">4            5         0       3  ...   8.0500   NaN         S</div><div class="line">5            6         0       3  ...   8.4583   NaN         Q</div><div class="line">6            7         0       1  ...  51.8625   E46         S</div><div class="line">7            8         0       3  ...  21.0750   NaN         S</div><div class="line">8            9         1       3  ...  11.1333   NaN         S</div><div class="line">9           10         1       2  ...  30.0708   NaN         C</div></pre></td></tr></table></figure></p>
<p>中间的省略号是其他列的数据，显示不下，所以省略<br>可以通过代码更改显示<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 显示所有列</span></div><div class="line">pd.set_option(<span class="string">'display.max_columns'</span>, <span class="keyword">None</span>)</div><div class="line"><span class="comment"># 显示所有行</span></div><div class="line">pd.set_option(<span class="string">'display.max_rows'</span>, <span class="keyword">None</span>)</div><div class="line"><span class="comment"># 设置value的显示长度为100，默认为50</span></div><div class="line">pd.set_option(<span class="string">'max_colwidth'</span>, <span class="number">100</span>)</div></pre></td></tr></table></figure></p>
<p>上面控制台打印的数据是典型的dataframe，可以理解为一个Excel 的表格。</p>
<p>在项目的Data界面中有对字段的说明：</p>
<ul>
<li>PassengerId =&gt; 乘客ID</li>
<li>Pclass =&gt; 乘客等级(1/2/3等舱位)</li>
<li>Name =&gt; 乘客姓名</li>
<li>Sex =&gt; 性别</li>
<li>Age =&gt; 年龄</li>
<li>SibSp =&gt; 堂兄弟/妹个数</li>
<li>Parch =&gt; 父母与小孩个数</li>
<li>Ticket =&gt; 船票信息</li>
<li>Fare =&gt; 票价</li>
<li>Cabin =&gt; 客舱</li>
<li>Embarked =&gt; 登船港口</li>
</ul>
<p>我们通过info()函数来查看数据的总体信息<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(data_train.info())</div></pre></td></tr></table></figure></p>
<p>控制台打印<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;class &apos;pandas.core.frame.DataFrame&apos;&gt;</div><div class="line">RangeIndex: 891 entries, 0 to 890</div><div class="line">Data columns (total 12 columns):</div><div class="line">PassengerId    891 non-null int64</div><div class="line">Survived       891 non-null int64</div><div class="line">Pclass         891 non-null int64</div><div class="line">Name           891 non-null object</div><div class="line">Sex            891 non-null object</div><div class="line">Age            714 non-null float64</div><div class="line">SibSp          891 non-null int64</div><div class="line">Parch          891 non-null int64</div><div class="line">Ticket         891 non-null object</div><div class="line">Fare           891 non-null float64</div><div class="line">Cabin          204 non-null object</div><div class="line">Embarked       889 non-null object</div><div class="line">dtypes: float64(2), int64(5), object(5)</div><div class="line">memory usage: 83.6+ KB</div><div class="line">None</div></pre></td></tr></table></figure></p>
<p>我们发现Age和Cabin字段有缺失，所以等下要对这两个字段进行处理。</p>
<p>查看整体的描述<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(data_train.describe())</div></pre></td></tr></table></figure></p>
<p>控制台打印<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">       PassengerId    Survived      Pclass  ...       SibSp       Parch        Fare</div><div class="line">count   891.000000  891.000000  891.000000  ...  891.000000  891.000000  891.000000</div><div class="line">mean    446.000000    0.383838    2.308642  ...    0.523008    0.381594   32.204208</div><div class="line">std     257.353842    0.486592    0.836071  ...    1.102743    0.806057   49.693429</div><div class="line">min       1.000000    0.000000    1.000000  ...    0.000000    0.000000    0.000000</div><div class="line">25%     223.500000    0.000000    2.000000  ...    0.000000    0.000000    7.910400</div><div class="line">50%     446.000000    0.000000    3.000000  ...    0.000000    0.000000   14.454200</div><div class="line">75%     668.500000    1.000000    3.000000  ...    1.000000    0.000000   31.000000</div><div class="line">max     891.000000    1.000000    3.000000  ...    8.000000    6.000000  512.329200</div></pre></td></tr></table></figure></p>
<p>可以看出，总体的生存率大约在0.383838.</p>
<h2 id="初步分析"><a href="#初步分析" class="headerlink" title="初步分析"></a>初步分析</h2><p>有时候还是图片相对直观点，同时也容易发现一些数据的信息。<br>我们先用pyplot工具画几个图来看看。</p>
<h3 id="乘客的属性分布："><a href="#乘客的属性分布：" class="headerlink" title="乘客的属性分布："></a>乘客的属性分布：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">firstGraph</span><span class="params">(pd, data_train)</span>:</span></div><div class="line">    fig = plt.figure()</div><div class="line">    <span class="comment"># 设置不透明度0.2</span></div><div class="line">    fig.set(alpha=<span class="number">0.2</span>)</div><div class="line"></div><div class="line">    <span class="comment"># 设置2 * 3的子图区域 第一个图位于（0，0）即第一行第一个列</span></div><div class="line">    plt.subplot2grid((<span class="number">2</span>, <span class="number">3</span>), (<span class="number">0</span>, <span class="number">0</span>))</div><div class="line">    <span class="comment"># 用data_train里的Survived数据作柱形图</span></div><div class="line">    data_train.Survived.value_counts().plot(kind=<span class="string">'bar'</span>)</div><div class="line">    plt.title(<span class="string">u"获救情况（1为获救）"</span>)</div><div class="line">    plt.ylabel(<span class="string">u"人数"</span>)</div><div class="line"></div><div class="line">    <span class="comment"># 第二个图位于第一行第二列</span></div><div class="line">    plt.subplot2grid((<span class="number">2</span>, <span class="number">3</span>), (<span class="number">0</span>, <span class="number">1</span>))</div><div class="line">    data_train.Pclass.value_counts().plot(kind=<span class="string">"bar"</span>)</div><div class="line">    plt.ylabel(<span class="string">u"人数"</span>)</div><div class="line">    plt.title(<span class="string">u"乘客等级分布"</span>)</div><div class="line"></div><div class="line">    plt.subplot2grid((<span class="number">2</span>, <span class="number">3</span>), (<span class="number">0</span>, <span class="number">2</span>))</div><div class="line">    plt.scatter(data_train.Survived, data_train.Age, alpha=<span class="number">0.1</span>)</div><div class="line">    plt.ylabel(<span class="string">u"年龄"</span>)</div><div class="line">    plt.grid(b=<span class="keyword">True</span>, which=<span class="string">'major'</span>, axis=<span class="string">'y'</span>)</div><div class="line">    plt.title(<span class="string">u"按年龄看获救分布（1为获救）"</span>)</div><div class="line"></div><div class="line">    <span class="comment"># 第四个图位于第二行第一列和第二列 colspan=2 是指它的列跨度有两列</span></div><div class="line">    plt.subplot2grid((<span class="number">2</span>, <span class="number">3</span>), (<span class="number">1</span>, <span class="number">0</span>), colspan=<span class="number">2</span>)</div><div class="line">    <span class="comment"># kde是密度图</span></div><div class="line">    data_train.Age[data_train.Pclass == <span class="number">1</span>].plot(kind=<span class="string">'kde'</span>)</div><div class="line">    data_train.Age[data_train.Pclass == <span class="number">2</span>].plot(kind=<span class="string">'kde'</span>)</div><div class="line">    data_train.Age[data_train.Pclass == <span class="number">3</span>].plot(kind=<span class="string">'kde'</span>)</div><div class="line">    plt.xlabel(<span class="string">u"年龄"</span>)</div><div class="line">    plt.ylabel(<span class="string">u"密度"</span>)</div><div class="line">    plt.title(<span class="string">u"各等级的乘客年龄分布"</span>)</div><div class="line">    plt.legend((<span class="string">u"头等舱"</span>, <span class="string">u"二等舱"</span>, <span class="string">u"三等舱"</span>), loc=<span class="string">"best"</span>)</div><div class="line"></div><div class="line">    plt.subplot2grid((<span class="number">2</span>, <span class="number">3</span>), (<span class="number">1</span>, <span class="number">2</span>))</div><div class="line">    data_train.Embarked.value_counts().plot(kind=<span class="string">'bar'</span>)</div><div class="line">    plt.title(<span class="string">u"各登船口岸上岸人数"</span>)</div><div class="line">    plt.ylabel(<span class="string">u"人数"</span>)</div><div class="line"></div><div class="line">    plt.show()</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line"></div><div class="line">    data_train = pd.read_csv(<span class="string">"data/train.csv"</span>)</div><div class="line"></div><div class="line">    firstGraph(pd, data_train)</div></pre></td></tr></table></figure>
<p><img src="https://coding-net-production-file-ci.codehub.cn/77417d10-a52e-11e9-be03-15bc9a96fc0b.png?sign=dUE3tjyOOC4onwaLHZo8d/99bcphPTEyNTcyNDI1OTkmaz1BS0lEYXk4M2xGbWFTNlk0TFRkek1WTzFTZFpPeUpTTk9ZcHImZT0xNTYzMjExNjMwJnQ9MTU2Mjk5NTYzMCZyPTYwMzc0ODk3JmY9Lzc3NDE3ZDEwLWE1MmUtMTFlOS1iZTAzLTE1YmM5YTk2ZmMwYi5wbmcmYj1jb2RpbmctbmV0LXByb2R1Y3Rpb24tZmlsZQ==" alt=""></p>
<p>图片比表格数据来的直观。观察后发现几个点。3等仓的乘客最多，且年龄大多分布在23岁左右。2等仓的人最少，年龄分布在26左右。一等仓比二等舱多一点，年龄在38岁左右比较多。在S登船口岸上岸的人最多。<br>我们可以考虑这几点：</p>
<ul>
<li>不同的仓位和等级与乘客的财富地位有关，可能会影响最后的获救率。</li>
<li>年龄可能对获救概率有影响</li>
<li>登船口可能也有关系</li>
</ul>
<h3 id="属性与获救结果的统计"><a href="#属性与获救结果的统计" class="headerlink" title="属性与获救结果的统计"></a>属性与获救结果的统计</h3><p><strong>看下不同等级的乘客的获救情况</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">secondGraph</span><span class="params">(pd, data_train)</span>:</span></div><div class="line">    <span class="comment"># 看看各乘客等级的获救情况</span></div><div class="line">    fig = plt.figure()</div><div class="line">    fig.set(alpha=<span class="number">0.2</span>)  <span class="comment"># 设定图表颜色alpha参数</span></div><div class="line"></div><div class="line">    Survived_0 = data_train.Pclass[data_train.Survived == <span class="number">0</span>].value_counts()</div><div class="line">    Survived_1 = data_train.Pclass[data_train.Survived == <span class="number">1</span>].value_counts()</div><div class="line">    df = pd.DataFrame(&#123;<span class="string">u"获救"</span>: Survived_1, <span class="string">u"未获救"</span>: Survived_0&#125;)</div><div class="line">    df.plot(kind=<span class="string">'bar'</span>, stacked=<span class="keyword">True</span>)</div><div class="line">    plt.title(<span class="string">u"各乘客等级的获救情况"</span>)</div><div class="line">    plt.ylabel(<span class="string">u"人数"</span>)</div><div class="line">    plt.xlabel(<span class="string">u"乘客等级"</span>)</div><div class="line">    plt.show()</div></pre></td></tr></table></figure></p>
<p><img src="https://coding-net-production-file-ci.codehub.cn/6b3cb3d0-a539-11e9-be03-15bc9a96fc0b.png?sign=IPgJPBK7FwdvBPrzEPsREhAiKMxhPTEyNTcyNDI1OTkmaz1BS0lEYXk4M2xGbWFTNlk0TFRkek1WTzFTZFpPeUpTTk9ZcHImZT0xNTYzMjE2MTc1JnQ9MTU2MzAwMDE3NSZyPTM5MTIxMDM5JmY9LzZiM2NiM2QwLWE1MzktMTFlOS1iZTAzLTE1YmM5YTk2ZmMwYi5wbmcmYj1jb2RpbmctbmV0LXByb2R1Y3Rpb24tZmlsZQ==" alt=""><br>可以看出3等仓的获救概率最低，1等仓的获救概率最高，2等仓次之。看来仓位对于最后的获救率有很大的影响。</p>
<p><strong>再来看一下性别与获救情况的关系</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">thirdGraph</span><span class="params">(pd, data_train)</span>:</span></div><div class="line">    fig = plt.figure()</div><div class="line">    fig.set(alpha=<span class="number">0.2</span>)</div><div class="line"></div><div class="line">    Survived_m = data_train.Survived[data_train.Sex == <span class="string">'male'</span>].value_counts()</div><div class="line">    Survived_f = data_train.Survived[data_train.Sex == <span class="string">'female'</span>].value_counts()</div><div class="line">    df = pd.DataFrame(&#123;<span class="string">u"男性"</span>: Survived_m, <span class="string">u"女性"</span>: Survived_f&#125;)</div><div class="line">    df.plot(kind=<span class="string">'bar'</span>, stacked=<span class="keyword">True</span>)</div><div class="line">    plt.title(<span class="string">u"按性别看获救情况"</span>)</div><div class="line">    plt.ylabel(<span class="string">u"人数"</span>)</div><div class="line">    plt.xlabel(<span class="string">u"获救"</span>)</div><div class="line"></div><div class="line">    plt.show()</div></pre></td></tr></table></figure></p>
<p><img src="https://coding-net-production-file-ci.codehub.cn/fc00f1b0-a539-11e9-be03-15bc9a96fc0b.png?sign=WVzAaPhcUX/drb/fmtxatrwu19thPTEyNTcyNDI1OTkmaz1BS0lEYXk4M2xGbWFTNlk0TFRkek1WTzFTZFpPeUpTTk9ZcHImZT0xNTYzMjE2NDE2JnQ9MTU2MzAwMDQxNiZyPTY4MTM1MTkmZj0vZmMwMGYxYjAtYTUzOS0xMWU5LWJlMDMtMTViYzlhOTZmYzBiLnBuZyZiPWNvZGluZy1uZXQtcHJvZHVjdGlvbi1maWxl" alt=""><br>可以看出女性的获救率高于男性，所以性别也是最后获救率的一个重要特征。</p>
<p><strong>再来看看综合版的</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fourthGraph</span><span class="params">(pd, data_train)</span>:</span></div><div class="line">    fig = plt.figure()</div><div class="line">    fig.set(alpha=<span class="number">0.65</span>)</div><div class="line">    plt.title(<span class="string">u"根据舱等级和性别的获救情况"</span>)</div><div class="line"></div><div class="line">    ax1 = fig.add_subplot(<span class="number">141</span>)</div><div class="line">    data_train.Survived[data_train.Sex == <span class="string">'female'</span>][data_train.Pclass != <span class="number">3</span>] \</div><div class="line">        .value_counts().plot(kind=<span class="string">'bar'</span>, label=<span class="string">"female highclass"</span>, color=<span class="string">'#FA2479'</span>)</div><div class="line">    ax1.set_xticklabels([<span class="string">u"获救"</span>, <span class="string">u"未获救"</span>], rotation=<span class="number">0</span>)</div><div class="line">    ax1.legend([<span class="string">u"女性/高级仓"</span>], loc=<span class="string">"best"</span>)</div><div class="line"></div><div class="line">    ax2 = fig.add_subplot(<span class="number">142</span>, sharey=ax1)</div><div class="line">    data_train.Survived[data_train.Sex == <span class="string">'female'</span>][data_train.Pclass == <span class="number">3</span>] \</div><div class="line">        .value_counts().plot(kind=<span class="string">'bar'</span>, label=<span class="string">"famale, low class"</span>, color=<span class="string">'pink'</span>)</div><div class="line">    ax2.set_xticklabels([<span class="string">u"获救"</span>, <span class="string">u"未获救"</span>], rotation=<span class="number">0</span>)</div><div class="line">    ax2.legend([<span class="string">u"女性/低级仓"</span>], loc=<span class="string">"best"</span>)</div><div class="line"></div><div class="line">    ax3 = fig.add_subplot(<span class="number">143</span>, sharey=ax1)</div><div class="line">    data_train.Survived[data_train.Sex == <span class="string">'male'</span>][data_train.Pclass != <span class="number">3</span>] \</div><div class="line">        .value_counts().plot(kind=<span class="string">'bar'</span>, label=<span class="string">"male highclass"</span>, color=<span class="string">"lightblue"</span>)</div><div class="line">    ax3.set_xticklabels([<span class="string">u"获救"</span>, <span class="string">u"未获救"</span>], rotation=<span class="number">0</span>)</div><div class="line">    ax3.legend([<span class="string">u"男性/高级仓"</span>], loc=<span class="string">"best"</span>)</div><div class="line"></div><div class="line">    ax4 = fig.add_subplot(<span class="number">144</span>, sharey=ax1)</div><div class="line">    data_train.Survived[data_train.Sex == <span class="string">"male"</span>][data_train.Pclass == <span class="number">3</span>] \</div><div class="line">        .value_counts().plot(kind=<span class="string">"bar"</span>, label=<span class="string">"male, low class"</span>, color=<span class="string">'steelblue'</span>)</div><div class="line">    ax4.legend([<span class="string">u"男性/低级仓"</span>], loc=<span class="string">"best"</span>)</div><div class="line"></div><div class="line">    plt.show()</div></pre></td></tr></table></figure></p>
<p><img src="https://coding-net-production-file-ci.codehub.cn/5d61d690-a53a-11e9-be03-15bc9a96fc0b.png?sign=vEZYIuJTfNEqb1/KSItkTWSKh3thPTEyNTcyNDI1OTkmaz1BS0lEYXk4M2xGbWFTNlk0TFRkek1WTzFTZFpPeUpTTk9ZcHImZT0xNTYzMjE2NTc5JnQ9MTU2MzAwMDU3OSZyPTcxNzIzNzQ2JmY9LzVkNjFkNjkwLWE1M2EtMTFlOS1iZTAzLTE1YmM5YTk2ZmMwYi5wbmcmYj1jb2RpbmctbmV0LXByb2R1Y3Rpb24tZmlsZQ==" alt=""></p>
<p><strong>各登船港口的获救情况</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fifthGraph</span><span class="params">(pd, data_train)</span>:</span></div><div class="line">    fig = plt.figure()</div><div class="line">    fig.set(alpha=<span class="number">0.2</span>)</div><div class="line"></div><div class="line">    Survived_0 = data_train.Embarked[data_train.Survived == <span class="number">0</span>].value_counts()</div><div class="line">    Survived_1 = data_train.Embarked[data_train.Survived == <span class="number">1</span>].value_counts()</div><div class="line">    df = pd.DataFrame(&#123;<span class="string">u'获救'</span>: Survived_1, <span class="string">u'未获救'</span>: Survived_0&#125;)</div><div class="line">    df.plot(kind=<span class="string">'bar'</span>, stacked=<span class="keyword">True</span>)</div><div class="line">    plt.title(<span class="string">u'各港口乘客的获救情况'</span>)</div><div class="line">    plt.xlabel(<span class="string">u'登录港口'</span>)</div><div class="line">    plt.ylabel(<span class="string">u'人数'</span>)</div><div class="line"></div><div class="line">    plt.show()</div></pre></td></tr></table></figure></p>
<p><img src="https://coding-net-production-file-ci.codehub.cn/981e4e80-a53a-11e9-be03-15bc9a96fc0b.png?sign=97YxBzHqF4IXvmfSlhqCuWyCQMlhPTEyNTcyNDI1OTkmaz1BS0lEYXk4M2xGbWFTNlk0TFRkek1WTzFTZFpPeUpTTk9ZcHImZT0xNTYzMjE2Njc2JnQ9MTU2MzAwMDY3NiZyPTQwNjAxNzE2JmY9Lzk4MWU0ZTgwLWE1M2EtMTFlOS1iZTAzLTE1YmM5YTk2ZmMwYi5wbmcmYj1jb2RpbmctbmV0LXByb2R1Y3Rpb24tZmlsZQ==" alt=""></p>
<p><strong>有兄弟姐妹对生存情况的影响</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dataFirst</span><span class="params">(pd, data_train)</span>:</span></div><div class="line">    g = data_train.groupby([<span class="string">'SibSp'</span>, <span class="string">'Survived'</span>])</div><div class="line">    df = pd.DataFrame(g.count()[<span class="string">'PassengerId'</span>])</div><div class="line">    print(df)</div><div class="line"></div><div class="line">    g = data_train.groupby([<span class="string">'Parch'</span>, <span class="string">'Survived'</span>])</div><div class="line">    df = pd.DataFrame(g.count()[<span class="string">'PassengerId'</span>])</div><div class="line">    print(df)</div></pre></td></tr></table></figure></p>
<p>控制台打印<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">                PassengerId</div><div class="line">SibSp Survived             </div><div class="line">0     0                 398</div><div class="line">      1                 210</div><div class="line">1     0                  97</div><div class="line">      1                 112</div><div class="line">2     0                  15</div><div class="line">      1                  13</div><div class="line">3     0                  12</div><div class="line">      1                   4</div><div class="line">4     0                  15</div><div class="line">      1                   3</div><div class="line">5     0                   5</div><div class="line">8     0                   7</div><div class="line">                PassengerId</div><div class="line">Parch Survived             </div><div class="line">0     0                 445</div><div class="line">      1                 233</div><div class="line">1     0                  53</div><div class="line">      1                  65</div><div class="line">2     0                  40</div><div class="line">      1                  40</div><div class="line">3     0                   2</div><div class="line">      1                   3</div><div class="line">4     0                   4</div><div class="line">5     0                   4</div><div class="line">      1                   1</div><div class="line">6     0                   1</div></pre></td></tr></table></figure></p>
<p>没有太明显的关系</p>
<p><strong>看下Cabin的分布</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(data_train.Cabin.value_counts())</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">G6             4</div><div class="line">B96 B98        4</div><div class="line">C23 C25 C27    4</div><div class="line">D              3</div><div class="line">C22 C26        3</div><div class="line">F33            3</div><div class="line">F2             3</div><div class="line">E101           3</div><div class="line">B28            2</div><div class="line">C125           2</div><div class="line">B49            2</div><div class="line">C78            2</div><div class="line">D17            2</div><div class="line">B18            2</div><div class="line">E67            2</div><div class="line">C2             2</div><div class="line">D20            2</div><div class="line">D26            2</div><div class="line">B5             2</div><div class="line">B77            2</div><div class="line">E44            2</div><div class="line">D33            2</div><div class="line">C65            2</div><div class="line">C123           2</div><div class="line">E25            2</div><div class="line">C124           2</div><div class="line">C68            2</div><div class="line">E24            2</div><div class="line">B35            2</div><div class="line">E121           2</div><div class="line">              ..</div><div class="line">D7             1</div><div class="line">E63            1</div><div class="line">D37            1</div><div class="line">E10            1</div><div class="line">C54            1</div><div class="line">E34            1</div><div class="line">C101           1</div><div class="line">F G63          1</div><div class="line">A14            1</div><div class="line">C45            1</div><div class="line">C46            1</div><div class="line">C32            1</div><div class="line">A32            1</div><div class="line">C91            1</div><div class="line">C99            1</div><div class="line">E49            1</div><div class="line">B73            1</div><div class="line">C110           1</div><div class="line">A24            1</div><div class="line">D15            1</div><div class="line">F38            1</div><div class="line">B37            1</div><div class="line">F E69          1</div><div class="line">B86            1</div><div class="line">B69            1</div><div class="line">E50            1</div><div class="line">E40            1</div><div class="line">C128           1</div><div class="line">E31            1</div><div class="line">E36            1</div><div class="line">Name: Cabin, Length: 147, dtype: int64</div></pre></td></tr></table></figure>
<p>数据太少，且有些数据的意义不明，所以不妨将他处理成有/无Cabin。</p>
<p><strong>有无Cabin与幸存情况的关系</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dataSecond</span><span class="params">(pd, data_train)</span>:</span></div><div class="line">    fig = plt.figure()</div><div class="line">    fig.set(alpha=<span class="number">0.2</span>)</div><div class="line"></div><div class="line">    Survived_cabin = data_train.Survived[pd.notnull(data_train.Cabin)].value_counts()</div><div class="line">    Survived_nocabin = data_train.Survived[pd.isnull(data_train.Cabin)].value_counts()</div><div class="line">    df = pd.DataFrame(&#123;<span class="string">u'有票'</span>: Survived_cabin, <span class="string">u'无票'</span>: Survived_nocabin&#125;).transpose()</div><div class="line">    df.plot(kind=<span class="string">'bar'</span>, stacked=<span class="keyword">True</span>)</div><div class="line">    plt.title(<span class="string">u"按照有无Cabin的获救情况"</span>)</div><div class="line">    plt.ylabel(<span class="string">u'人数'</span>)</div><div class="line">    plt.xlabel(<span class="string">u'Cabin有无'</span>)</div><div class="line"></div><div class="line">    plt.show()</div></pre></td></tr></table></figure></p>
<p><img src="https://coding-net-production-file-ci.codehub.cn/0082e570-a53c-11e9-be03-15bc9a96fc0b.png?sign=JGxdM6FWgMUXZONG3IvloHoeSJFhPTEyNTcyNDI1OTkmaz1BS0lEYXk4M2xGbWFTNlk0TFRkek1WTzFTZFpPeUpTTk9ZcHImZT0xNTYzMjE3Mjg0JnQ9MTU2MzAwMTI4NCZyPTQ1NzYzODU5JmY9LzAwODJlNTcwLWE1M2MtMTFlOS1iZTAzLTE1YmM5YTk2ZmMwYi5wbmcmYj1jb2RpbmctbmV0LXByb2R1Y3Rpb24tZmlsZQ==" alt=""><br>可以看出有Cabin相对于没有Cabin的幸存率高一点，所以有无Cabin也可以作为一个特征。</p>
<h2 id="对数据的简单预处理"><a href="#对数据的简单预处理" class="headerlink" title="对数据的简单预处理"></a>对数据的简单预处理</h2><p>接下来要做特征工程(feature engineering)，这个十分重要。对于有缺失的数据，我们要进行处理，就是Age和Cabin。<br>对于Cabin，我们采用是否有数据来处理成yes/no。<br>对于Age，因为缺失的数量不多，所以可以采用决策树算法里的<code>随机森林</code>算法来补充上。<br>这里使用了scikit-learn里面的RandomForest来拟合缺失的年龄数据。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_missing_age</span><span class="params">(df)</span>:</span></div><div class="line">    <span class="comment"># 把已有的数值型特征取出来丢进Random Forest Regressor中</span></div><div class="line">    age_df = df[[<span class="string">'Age'</span>, <span class="string">'Fare'</span>, <span class="string">'Parch'</span>, <span class="string">'SibSp'</span>, <span class="string">'Pclass'</span>]]</div><div class="line"></div><div class="line">    <span class="comment"># 乘客分成已知年龄和未知年龄两部分</span></div><div class="line">    known_age = age_df[age_df.Age.notnull()].values</div><div class="line">    unknown_age = age_df[age_df.Age.isnull()].values</div><div class="line"></div><div class="line">    <span class="comment"># y即目标年龄</span></div><div class="line">    <span class="comment"># [行,列]</span></div><div class="line">    y = known_age[:, <span class="number">0</span>]</div><div class="line">    <span class="comment"># X即特征属性值</span></div><div class="line">    <span class="comment"># 舍弃第0列（即需要预测的Age那列）</span></div><div class="line">    X = known_age[:, <span class="number">1</span>:]</div><div class="line"></div><div class="line">    <span class="comment"># RandomForestRegressor参数：</span></div><div class="line">    <span class="comment"># n_estimators弱学习器的最大迭代次数大小影响拟合度</span></div><div class="line">    <span class="comment"># n_jobs并行job个数 -1 是指与本机核心数相关</span></div><div class="line">    rfr = RandomForestRegressor(random_state=<span class="number">0</span>, n_estimators=<span class="number">2000</span>, n_jobs=<span class="number">-1</span>)</div><div class="line">    <span class="comment"># 拟合</span></div><div class="line">    rfr.fit(X, y)</div><div class="line"></div><div class="line">    <span class="comment"># [所有行, 舍弃第一列]</span></div><div class="line">    predictedAges = rfr.predict(unknown_age[:, <span class="number">1</span>::])</div><div class="line"></div><div class="line">    <span class="comment"># 将预测的年龄结果 赋值给 数据中Age为空的数据的Age列</span></div><div class="line">    df.loc[(df.Age.isnull()), <span class="string">'Age'</span>] = predictedAges</div><div class="line"></div><div class="line">    <span class="keyword">return</span> df, rfr</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_Cabin_type</span><span class="params">(df)</span>:</span></div><div class="line">    df.loc[(df.Cabin.notnull()), <span class="string">'Cabin'</span>] = <span class="string">'Yes'</span></div><div class="line">    df.loc[(df.Cabin.isnull()), <span class="string">'Cabin'</span>] = <span class="string">'No'</span></div><div class="line">    <span class="keyword">return</span> df</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    data_train = pd.read_csv(<span class="string">"data/train.csv"</span>)</div><div class="line">    data_train, rfr = set_missing_age(data_train)</div><div class="line">    data_train = set_Cabin_type(data_train)</div><div class="line">    print(data_train.head(<span class="number">10</span>))</div></pre></td></tr></table></figure></p>
<p>控制台打印<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">   PassengerId  Survived  Pclass  ...     Fare Cabin  Embarked</div><div class="line">0            1         0       3  ...   7.2500    No         S</div><div class="line">1            2         1       1  ...  71.2833   Yes         C</div><div class="line">2            3         1       3  ...   7.9250    No         S</div><div class="line">3            4         1       1  ...  53.1000   Yes         S</div><div class="line">4            5         0       3  ...   8.0500    No         S</div><div class="line">5            6         0       3  ...   8.4583    No         Q</div><div class="line">6            7         0       1  ...  51.8625   Yes         S</div><div class="line">7            8         0       3  ...  21.0750    No         S</div><div class="line">8            9         1       3  ...  11.1333    No         S</div><div class="line">9           10         1       2  ...  30.0708    No         C</div><div class="line">[10 rows x 12 columns]</div></pre></td></tr></table></figure></p>
<p>部分数据没有显示出来，但是去查看的话会发现Age被填上了。</p>
<p>接下来要<strong>特征因子化</strong><br>特征因子化就是将特征的值取成0/1，以Sex为例子，属性的值是male和female，我们将Sex属性拆分成Sex_male和Sex_female两个属性，用0/1来表示。Sex_male为0和Sex_female为1表示是女性，反之为男性。<br>我们可以用pandas的”get_dummies”来完成这个工作</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_dummies</span><span class="params">(pd, data)</span>:</span></div><div class="line">    dummies_cabin = pd.get_dummies(data[<span class="string">'Cabin'</span>], prefix=<span class="string">'Cabin'</span>)</div><div class="line">    dummies_embarked = pd.get_dummies(data[<span class="string">'Embarked'</span>], prefix=<span class="string">'Embarked'</span>)</div><div class="line">    dummies_sex = pd.get_dummies(data[<span class="string">'Sex'</span>], prefix=<span class="string">'Sex'</span>)</div><div class="line">    dummies_pclass = pd.get_dummies(data[<span class="string">'Pclass'</span>], prefix=<span class="string">'Pclass'</span>)</div><div class="line"></div><div class="line">    df = pd.concat([data, dummies_cabin, dummies_embarked, dummies_sex, dummies_pclass], axis=<span class="number">1</span>)</div><div class="line"></div><div class="line">    df.drop([<span class="string">'Pclass'</span>, <span class="string">'Name'</span>, <span class="string">'Sex'</span>, <span class="string">'Ticket'</span>, <span class="string">'Cabin'</span>, <span class="string">'Embarked'</span>], axis=<span class="number">1</span>, inplace=<span class="keyword">True</span>)</div><div class="line">    <span class="keyword">return</span> df</div></pre></td></tr></table></figure>
<p>控制台打印<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">   PassengerId  Survived        Age  ...  Pclass_1  Pclass_2  Pclass_3</div><div class="line">0            1         0  22.000000  ...         0         0         1</div><div class="line">1            2         1  38.000000  ...         1         0         0</div><div class="line">2            3         1  26.000000  ...         0         0         1</div><div class="line">3            4         1  35.000000  ...         1         0         0</div><div class="line">4            5         0  35.000000  ...         0         0         1</div><div class="line">5            6         0  23.838953  ...         0         0         1</div><div class="line">6            7         0  54.000000  ...         1         0         0</div><div class="line">7            8         0   2.000000  ...         0         0         1</div><div class="line">8            9         1  27.000000  ...         0         0         1</div><div class="line">9           10         1  14.000000  ...         0         1         0</div><div class="line">[10 rows x 16 columns]</div></pre></td></tr></table></figure></p>
<p>成功的将这些数据转换成了0/1属性。</p>
<p>但是发现Age和Fare属性跨度太大，对之后的拟合会有影响，所以我们要对它进行归一化处理。<br>用scikit-learn里面的preprocessing模块可以实现。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">data_preporocessing</span><span class="params">(data)</span>:</span></div><div class="line">    scaler = preprocessing.StandardScaler()</div><div class="line">    age_scale_param = scaler.fit(data[<span class="string">'Age'</span>].values.reshape(<span class="number">-1</span>, <span class="number">1</span>))</div><div class="line">    data[<span class="string">'Age_scaled'</span>] = scaler.fit_transform(data[<span class="string">'Age'</span>].values.reshape(<span class="number">-1</span>, <span class="number">1</span>), age_scale_param)</div><div class="line">    fare_scale_param = scaler.fit(data[<span class="string">'Fare'</span>].values.reshape(<span class="number">-1</span>, <span class="number">1</span>))</div><div class="line">    data[<span class="string">'Fare_scaled'</span>] = scaler.fit_transform(data[<span class="string">'Fare'</span>].values.reshape(<span class="number">-1</span>, <span class="number">1</span>), fare_scale_param)</div><div class="line">    <span class="keyword">return</span> data</div></pre></td></tr></table></figure></p>
<p>控制台打印<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">   PassengerId  Survived        Age  ...  Pclass_3  Age_scaled  Fare_scaled</div><div class="line">0            1         0  22.000000  ...         1   -0.561380    -0.502445</div><div class="line">1            2         1  38.000000  ...         0    0.613171     0.786845</div><div class="line">2            3         1  26.000000  ...         1   -0.267742    -0.488854</div><div class="line">3            4         1  35.000000  ...         0    0.392942     0.420730</div><div class="line">4            5         0  35.000000  ...         1    0.392942    -0.486337</div><div class="line">5            6         0  23.838953  ...         1   -0.426384    -0.478116</div><div class="line">6            7         0  54.000000  ...         0    1.787722     0.395814</div><div class="line">7            8         0   2.000000  ...         1   -2.029569    -0.224083</div><div class="line">8            9         1  27.000000  ...         1   -0.194333    -0.424256</div><div class="line">9           10         1  14.000000  ...         0   -1.148655    -0.042956</div><div class="line">[10 rows x 18 columns]</div></pre></td></tr></table></figure></p>
<p>看到Age_scaled与Fare_scaled都将Age和Fare转换成了[-1,1]的范围里了。</p>
<h2 id="逻辑回归建模"><a href="#逻辑回归建模" class="headerlink" title="逻辑回归建模"></a>逻辑回归建模</h2><p>使用scikit-learn中的LogisticRegression建模<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">logistic_regression</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># 通过正则拿出需要的那几列</span></div><div class="line">    train_df = df.filter(regex=<span class="string">'Survived|Age_.*|SibSp|Parch|Fare_.*|Cabin_.*|Embarked_.*|Sex_.*|Pclass_.*'</span>)</div><div class="line">    train_np = train_df.values</div><div class="line"></div><div class="line">    <span class="comment"># 取出Survived那列 即第一列 作为y</span></div><div class="line">    y = train_np[:, <span class="number">0</span>]</div><div class="line"></div><div class="line">    <span class="comment"># 取出第一列后面的所有列 作为x</span></div><div class="line">    X = train_np[:, <span class="number">1</span>:]</div><div class="line"></div><div class="line">    <span class="comment"># 逻辑回归 正则化选择参数（惩罚项的种类）：</span></div><div class="line">    <span class="comment"># penalty 'l1'or 'l2', default: 'l2' 对应L1的正则化和L2的正则化 影响solver（损失函数优化算法）的选择</span></div><div class="line">    <span class="comment"># l1: solver 只能选liblinear</span></div><div class="line">    <span class="comment"># l2: solver 可选'newton-cg', 'lbfgs', 'liblinear', 'sag'</span></div><div class="line">    <span class="comment"># a) liblinear：使用了开源的liblinear库实现，内部使用了坐标轴下降法来迭代优化损失函数。</span></div><div class="line">    <span class="comment"># b) lbfgs：拟牛顿法的一种，利用损失函数二阶导数矩阵即海森矩阵来迭代优化损失函数。</span></div><div class="line">    <span class="comment"># c) newton-cg：也是牛顿法家族的一种，利用损失函数二阶导数矩阵即海森矩阵来迭代优化损失函数。</span></div><div class="line">    <span class="comment"># d) sag：即随机平均梯度下降，是梯度下降法的变种，和普通梯度下降法的区别是每次迭代仅仅用一部分的样本来计算梯度，</span></div><div class="line"></div><div class="line">    <span class="comment"># C为正则化系数λ的倒数，通常默认为1</span></div><div class="line">    <span class="comment"># tol是迭代终止判据的误差范围</span></div><div class="line">    clf = linear_model.LogisticRegression(solver=<span class="string">'liblinear'</span>, C=<span class="number">1.0</span>, penalty=<span class="string">'l1'</span>, tol=<span class="number">1e-6</span>)</div><div class="line">    clf.fit(X, y)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> clf</div></pre></td></tr></table></figure></p>
<p>控制台打印<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,</div><div class="line">          intercept_scaling=1, max_iter=100, multi_class=&apos;warn&apos;,</div><div class="line">          n_jobs=None, penalty=&apos;l1&apos;, random_state=None, solver=&apos;liblinear&apos;,</div><div class="line">          tol=1e-06, verbose=0, warm_start=False)</div></pre></td></tr></table></figure></p>
<p>关于LogisticRegression()函数的参数解释与选择我已经注释在代码里了。<br>这样我们就得到了一个model<br>但是我们对于测试数据也要做和train数据之前一样的处理才能应用模型。</p>
<h3 id="处理测试数据的格式"><a href="#处理测试数据的格式" class="headerlink" title="处理测试数据的格式"></a>处理测试数据的格式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">format_test_data</span><span class="params">(data_test)</span>:</span></div><div class="line">    <span class="comment"># 将test文件的格式改成和train一样</span></div><div class="line">    data_test.loc[(data_test.Fare.isnull()), <span class="string">'Fare'</span>] = <span class="number">0</span></div><div class="line">    tmp_df = data_test[[<span class="string">'Age'</span>, <span class="string">'Fare'</span>, <span class="string">'Parch'</span>, <span class="string">'SibSp'</span>, <span class="string">'Pclass'</span>]]</div><div class="line">    null_age = tmp_df[data_test.Age.isnull()].values</div><div class="line"></div><div class="line">    <span class="comment"># 用之前创建号的随机森林的决策树来补充test数据的缺失Age</span></div><div class="line">    X = null_age[:, <span class="number">1</span>:]</div><div class="line">    predictedAge = rfr.predict(X)</div><div class="line">    data_test.loc[(data_test.Age.isnull()), <span class="string">'Age'</span>] = predictedAge</div><div class="line"></div><div class="line">    <span class="comment"># 复用先前的函数</span></div><div class="line">    data_test = set_Cabin_type(data_test)</div><div class="line">    df_test = change_dummies(pd, data_test)</div><div class="line">    df_test = data_preporocessing(df_test)</div><div class="line">    <span class="comment"># print(df_test.head())</span></div><div class="line">    <span class="keyword">return</span> df_test</div></pre></td></tr></table></figure>
<p>控制台打印<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">   PassengerId   Age  SibSp  Parch  ...  Pclass_2  Pclass_3  Age_scaled  Fare_scaled</div><div class="line">0          892  34.5      0      0  ...         0         1    0.307521    -0.496637</div><div class="line">1          893  47.0      1      0  ...         0         1    1.256241    -0.511497</div><div class="line">2          894  62.0      0      0  ...         1         0    2.394706    -0.463335</div><div class="line">3          895  27.0      0      0  ...         0         1   -0.261711    -0.481704</div><div class="line">4          896  22.0      1      1  ...         0         1   -0.641199    -0.416740</div><div class="line">5          897  14.0      0      0  ...         0         1   -1.248380    -0.471623</div><div class="line">6          898  30.0      0      0  ...         0         1   -0.034018    -0.500221</div><div class="line">7          899  26.0      1      1  ...         1         0   -0.337609    -0.117238</div><div class="line">8          900  18.0      0      0  ...         0         1   -0.944790    -0.507390</div><div class="line">9          901  21.0      2      0  ...         0         1   -0.717097    -0.204154</div><div class="line">[10 rows x 17 columns]</div></pre></td></tr></table></figure></p>
<p>成功将test的数据转换成了train数据之前的格式。</p>
<p>接下去就是应用之前的逻辑回归模型来预测测试数据了。</p>
<h3 id="应用模型"><a href="#应用模型" class="headerlink" title="应用模型"></a>应用模型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 取出需要的列</span></div><div class="line">test = df_test.filter(regex=<span class="string">'Age_.*|SibSp|Parch|Fare_.*|Cabin_.*|Embarked_.*|Sex_.*|Pclass_.*'</span>)</div><div class="line">predictions = clf.predict(test)</div><div class="line"><span class="comment"># 得出结果 写入csv文件</span></div><div class="line">result = pd.DataFrame(&#123;<span class="string">'PassengerId'</span>:data_test[<span class="string">'PassengerId'</span>].values, <span class="string">'Survived'</span>:predictions.astype(np.int32)&#125;)</div><div class="line">result.to_csv(<span class="string">"data/logistic_regression_prediction.csv"</span>, index=<span class="keyword">False</span>)</div></pre></td></tr></table></figure>
<p>成功获得<code>logistic_regression_prediction.csv</code>这个文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">PassengerId,Survived</div><div class="line">892,0</div><div class="line">893,0</div><div class="line">894,0</div><div class="line">895,0</div><div class="line">896,1</div><div class="line">897,0</div><div class="line">898,1</div><div class="line">899,0</div><div class="line">900,1</div><div class="line">901,0</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>去kaggle上提交这个.csv文件，就可以知道自己的分数与排名了。<br>因为是一个简单的模型，没有做优化，所以分数不会太高。<br><img src="https://coding-net-production-file-ci.codehub.cn/ff1160d0-a54b-11e9-be03-15bc9a96fc0b.png?sign=2WQ6M+G3wUFEJGTTijJj9SHUa+lhPTEyNTcyNDI1OTkmaz1BS0lEYXk4M2xGbWFTNlk0TFRkek1WTzFTZFpPeUpTTk9ZcHImZT0xNTYzMjI0MTUxJnQ9MTU2MzAwODE1MSZyPTk0ODExODk0JmY9L2ZmMTE2MGQwLWE1NGItMTFlOS1iZTAzLTE1YmM5YTk2ZmMwYi5wbmcmYj1jb2RpbmctbmV0LXByb2R1Y3Rpb24tZmlsZQ==" alt=""></p>
<p>接下来就是优化了，下次再讲。</p>
<blockquote>
<p><a href="https://blog.csdn.net/han_xiaoyang/article/details/49797143" target="_blank" rel="external">参考博客</a><br>自己对其中的一些代码做了注释方便理解。<br>自己的代码已经上传到了github，欢迎查看<a href="https://github.com/xiaoshidefeng/MachineLearning/tree/master/kaggle/Titanic" target="_blank" rel="external">kaggle Titanic</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Kaggle是一个数据建模和数据分析竞赛平台。企业和研究者可在其上发布数据，统计学者和数据挖掘专家可在其上进行竞赛以产生最好的模型。&lt;br&gt;这次记录一下Kaggle上的入门题目Titanic人员幸存预测，用了逻辑回归。&lt;/p&gt;
    
    </summary>
    
      <category term="Machine Learning" scheme="http://blog.chenwe.top/categories/Machine-Learning/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
      <category term="kaggle" scheme="http://blog.chenwe.top/tags/kaggle/"/>
    
  </entry>
  
  <entry>
    <title>朴素贝叶斯</title>
    <link href="http://blog.chenwe.top/2019/05/19/2019/2019-05-19%20%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF/"/>
    <id>http://blog.chenwe.top/2019/05/19/2019/2019-05-19 朴素贝叶斯/</id>
    <published>2019-05-19T07:25:09.787Z</published>
    <updated>2019-07-12T12:39:00.799Z</updated>
    
    <content type="html"><![CDATA[<p>学习Peter Harrington的《Machine Learning in Action》的一些笔记与个人理解<br>这次是关于朴素贝叶斯算法部分的内容</p>
<a id="more"></a>
<h1 id="贝叶斯定理"><a href="#贝叶斯定理" class="headerlink" title="贝叶斯定理"></a>贝叶斯定理</h1><p><code>P(B|A) = P(A|B) * P(B) / P(A)</code><br>即在已知P(A|B)的情况下如何求得P(B|A)</p>
<h1 id="朴素贝叶斯"><a href="#朴素贝叶斯" class="headerlink" title="朴素贝叶斯"></a>朴素贝叶斯</h1><p>基于贝叶斯定理的分类算法一种<br>不同于之前的KNN与决策树的不可变性，朴素贝叶斯的结果是概率的可变的<br>“朴素”是指假设特征之间相互独立 每个特征同等重要。<br>例如一句话中，“美味”这个词后面通常跟着“食物”，所以“美味”和“食物”不是相互独立的，两者之间是有关系的。<br>而“美味”和“跑步”就不太可能出现在同一个句子中，因此这两个是相互独立的。</p>
<p>尽管假设存在一些问题，但朴素贝叶斯实际效果很好。<br>简单来说就是将<code>P(F1F2...Fn|C)P(C)</code> 变为 <code>P(F1|C)P(F2|C) ... P(Fn|C)P(C)</code><br>P(F1|C) 之类的数值是容易通过统计资料得到的</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习Peter Harrington的《Machine Learning in Action》的一些笔记与个人理解&lt;br&gt;这次是关于朴素贝叶斯算法部分的内容&lt;/p&gt;
    
    </summary>
    
      <category term="Machine Learning" scheme="http://blog.chenwe.top/categories/Machine-Learning/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>决策树简析</title>
    <link href="http://blog.chenwe.top/2019/05/18/2019/2019-05-18%20%E5%86%B3%E7%AD%96%E6%A0%91%E7%AE%80%E6%9E%90/"/>
    <id>http://blog.chenwe.top/2019/05/18/2019/2019-05-18 决策树简析/</id>
    <published>2019-05-18T08:07:06.669Z</published>
    <updated>2019-05-18T12:30:35.724Z</updated>
    
    <content type="html"><![CDATA[<p>学习Peter Harrington的《Machine Learning in Action》的一些笔记与个人理解<br>这次是关于决策树算法部分的内容</p>
<a id="more"></a>
<h1 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h1><p>决策树在分类问题中表示基于特征对实例进行分类的过程<br>决策树的生成通常包括：特征选择、决策树构建、剪枝三个过程<br>目前有ID3、C4.5、CART三种决策树模型<br>这里简单介绍下ID3的决策树</p>
<h1 id="ID3"><a href="#ID3" class="headerlink" title="ID3"></a>ID3</h1><p>ID3主要通过信息增益来进行决策树的抉择划分</p>
<h2 id="熵与信息增益"><a href="#熵与信息增益" class="headerlink" title="熵与信息增益"></a>熵与信息增益</h2><p>熵：表示随机变量的不确定性</p>
<p>条件熵：在一个条件下，随机变量的不确定性</p>
<p>信息增益：熵 - 条件熵</p>
<p>公式如图：<br><img src="https://images2015.cnblogs.com/blog/754644/201609/754644-20160924102146715-235068092.png" alt=""></p>
<p>信息增益就是在划分数据集前后信息发生的变化<br>ID3就是每次根据“最大信息熵增益”选取当前最佳的特征来分割数据（贪心）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习Peter Harrington的《Machine Learning in Action》的一些笔记与个人理解&lt;br&gt;这次是关于决策树算法部分的内容&lt;/p&gt;
    
    </summary>
    
      <category term="Machine Learning" scheme="http://blog.chenwe.top/categories/Machine-Learning/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>KNN算法简析</title>
    <link href="http://blog.chenwe.top/2019/02/28/2019/2019-05-09%20KNN%E7%AE%97%E6%B3%95%E7%AE%80%E6%9E%90/"/>
    <id>http://blog.chenwe.top/2019/02/28/2019/2019-05-09 KNN算法简析/</id>
    <published>2019-02-28T03:33:26.599Z</published>
    <updated>2019-05-11T06:29:58.498Z</updated>
    
    <content type="html"><![CDATA[<p>学习Peter Harrington的《Machine Learning in Action》的一些笔记与个人理解<br>这次是关于KNN算法部分的内容</p>
<a id="more"></a>
<p>Peter Harrington的《Machine Learning in Action》还是挺适合入门的，简单易懂<br>他的第一个机器学习算法就是KNN算法（K-最近邻算法）</p>
<h1 id="KNN"><a href="#KNN" class="headerlink" title="KNN"></a>KNN</h1><p>KNN其实就是基于距离来进行分类的算法</p>
<h2 id="距离"><a href="#距离" class="headerlink" title="距离"></a>距离</h2><p>关于不同特征值之间的距离的定义有很多的方法。<br>我们比较常见的有：欧式距离与曼哈顿距离等。<br>欧式距离就是我们中学阶段学过的在几何空间中的两点直线距离。<br>曼哈顿距离是两点间水平距离与纵向距离想家的距离，类似于城市不同街道中的两点距离。</p>
<h2 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h2><p>KNN算法先存在一个样本数据的集合，并且每个样本中每个数据都有自己的标签（知道这个数据的所属类别），这个数据集合就是训练样本集。<br>然后输入没有标签的数据，计算它和所有点之间的距离。然后取出前K个最近的距离的点（KNN的K的由来），统计K个中出现次数最多的分类，那么这个没有标签的数据也作为这个分类。</p>
<h2 id="一些优化"><a href="#一些优化" class="headerlink" title="一些优化"></a>一些优化</h2><p>算法浅显易懂，但还是有很多值得优化的地方。<br>首先，就是计算量较大，如果所有的数都两两比较来计算距离，那将是一笔巨大的开销。<br>所以可以构建KD-TREE来优化。KD-TREE就像一个二叉搜索树，但它是空间化的搜索树，以某一特征值作为一次划分的节点。通过搜索，免去了不必要的点的计算，节省了计算开销。关于KD-TREE的详细介绍，网络上已经有了许多文章，这里不再赘述。</p>
<p>其次，KNN中某些距离的值可能对结果的影响较大。例如部分数据数值较大，差值较大，而一些数据的数值变化较小，数值较小。所以还要采用归一化的方法来合理分类。<br>归一化将数值的取值范围统一到0-1之间，公式为<code>newValue = (oldValue - min) / (max - min)</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习Peter Harrington的《Machine Learning in Action》的一些笔记与个人理解&lt;br&gt;这次是关于KNN算法部分的内容&lt;/p&gt;
    
    </summary>
    
      <category term="Machine Learning" scheme="http://blog.chenwe.top/categories/Machine-Learning/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu交换空间设置</title>
    <link href="http://blog.chenwe.top/2018/05/07/2018/2018-05-07%20Ubuntu%E4%BA%A4%E6%8D%A2%E7%A9%BA%E9%97%B4%E8%AE%BE%E7%BD%AE/"/>
    <id>http://blog.chenwe.top/2018/05/07/2018/2018-05-07 Ubuntu交换空间设置/</id>
    <published>2018-05-07T11:41:46.463Z</published>
    <updated>2018-05-07T12:16:08.198Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Swap分区，即交换区，Swap空间的作用可简单描述为：当系统的物理内存不够用的时候，就需要将物理内存中的一部分空间释放出来，以供当前运行的程序使用。那些被释放的空间可能来自一些很长时间没有什么操作的程序，这些被释放的空间被临时保存到Swap空间中，等到那些程序要运行时，再从Swap中恢复保存的数据到内存中。这样，系统总是在物理内存不够时，才进行Swap交换。</p>
</blockquote>
<p>这次来讲下交换分区的设置</p>
<a id="more"></a>
<h2 id="查看当前的内存情况"><a href="#查看当前的内存情况" class="headerlink" title="查看当前的内存情况"></a>查看当前的内存情况</h2><p>输入 free -m<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">root@iZbp14fsydxm6juwspn5gjZ:~# free -m</div><div class="line">              total        used        free      shared  buff/cache   available</div><div class="line">Mem:           2000          84         143           2        1772        1713</div><div class="line">Swap:             0           0           0</div></pre></td></tr></table></figure></p>
<p>我们可以看到，物理内存为2,交换分区为0</p>
<p>所以我们要设置一下</p>
<h2 id="设置交换分区"><a href="#设置交换分区" class="headerlink" title="设置交换分区"></a>设置交换分区</h2><p>我们先去根目录新建一个swap文件夹</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">root@iZbp14fsydxm6juwspn5gjZ:~# cd ..</div><div class="line">root@iZbp14fsydxm6juwspn5gjZ:/# ls</div><div class="line">bin   dev  home        initrd.img.old  lib64       media  opt   root  sbin  sys  usr  vmlinuz</div><div class="line">boot  etc  initrd.img  lib             lost+found  mnt    proc  run   srv   tmp  var  vmlinuz.old</div><div class="line">root@iZbp14fsydxm6juwspn5gjZ:/# mkdir /swap</div><div class="line">root@iZbp14fsydxm6juwspn5gjZ:/# ls</div><div class="line">bin   etc         initrd.img.old  lost+found  opt   run   swap  usr      vmlinuz.old</div><div class="line">boot  home        lib             media       proc  sbin  sys   var</div><div class="line">dev   initrd.img  lib64           mnt         root  srv   tmp   vmlinuz</div></pre></td></tr></table></figure>
<p>然后进入刚刚建立的swap文件夹里<br><code>cd swap</code></p>
<p>创建一个2G的分区<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">root@iZbp14fsydxm6juwspn5gjZ:/swap# dd if=/dev/zero of=swap bs=1M count=2k</div><div class="line">2048+0 records in</div><div class="line">2048+0 records out</div><div class="line">2147483648 bytes (2.1 GB, 2.0 GiB) copied, 18.8597 s, 114 MB/s</div><div class="line">root@iZbp14fsydxm6juwspn5gjZ:/swap# sudo mkswap /swap</div><div class="line">sudo: unable to resolve host iZbp14fsydxm6juwspn5gjZ</div><div class="line">mkswap: warning: truncating swap area to 17179869180 KiB</div><div class="line">mkswap: cannot open /swap: Is a directory</div><div class="line">root@iZbp14fsydxm6juwspn5gjZ:/swap# ls</div><div class="line">swap</div></pre></td></tr></table></figure></p>
<p>创建交换文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">root@iZbp14fsydxm6juwspn5gjZ:/swap# mkswap swap</div><div class="line">Setting up swapspace version 1, size = 2 GiB (2147479552 bytes)</div><div class="line">no label, UUID=0c2db10b-0f48-41f5-b158-8e2c57f95bc3</div></pre></td></tr></table></figure></p>
<p>挂载交换信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root@iZbp14fsydxm6juwspn5gjZ:/swap# swapon swap</div><div class="line">swapon: /swap/swap: insecure permissions 0644, 0600 suggested.</div></pre></td></tr></table></figure></p>
<p>下面再输入 <code>free -m</code> 来查看</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">root@iZbp14fsydxm6juwspn5gjZ:/swap# free -m</div><div class="line">              total        used        free      shared  buff/cache   available</div><div class="line">Mem:           2000          85          72           2        1842        1713</div><div class="line">Swap:          2047           0        2047</div></pre></td></tr></table></figure>
<p>成功增加2G交换空间</p>
<p><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20180507201314759.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Swap分区，即交换区，Swap空间的作用可简单描述为：当系统的物理内存不够用的时候，就需要将物理内存中的一部分空间释放出来，以供当前运行的程序使用。那些被释放的空间可能来自一些很长时间没有什么操作的程序，这些被释放的空间被临时保存到Swap空间中，等到那些程序要运行时，再从Swap中恢复保存的数据到内存中。这样，系统总是在物理内存不够时，才进行Swap交换。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这次来讲下交换分区的设置&lt;/p&gt;
    
    </summary>
    
      <category term="ubuntu" scheme="http://blog.chenwe.top/categories/ubuntu/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>docker安装owncloud</title>
    <link href="http://blog.chenwe.top/2018/03/25/2018/2018-03-25%20docker%E5%AE%89%E8%A3%85owncloud/"/>
    <id>http://blog.chenwe.top/2018/03/25/2018/2018-03-25 docker安装owncloud/</id>
    <published>2018-03-25T03:28:25.652Z</published>
    <updated>2018-03-25T04:49:01.030Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>ownCloud是一个自由且开源的个人云存储解决方案</p>
</blockquote>
<p>因为偶尔会有文件想要备份或者共享<br>所以就自己搭建了一下ownCloud，这里记录下搭建过程</p>
<a id="more"></a>
<h2 id="安装数据库"><a href="#安装数据库" class="headerlink" title="安装数据库"></a>安装数据库</h2><p>我们要先安装数据库，我这里选择mysql 用docker来安装<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">acm@acm-Lenovo:~/acmcloud$ sudo docker pull registry.docker-cn.com/library/mysql</div><div class="line">Using default tag: latest</div><div class="line">latest: Pulling from library/mysql</div></pre></td></tr></table></figure></p>
<p>这里我用了国内的镜像加速，提高速度。</p>
<p>启动容器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=mypassword -d mysql</div></pre></td></tr></table></figure></p>
<p>MYSQL_ROOT_PASSWORD后面填写你要设置的的root密码</p>
<p>输入 sudo docker ps 查看是否成功运行</p>
<h2 id="安装owncloud"><a href="#安装owncloud" class="headerlink" title="安装owncloud"></a>安装owncloud</h2><p>用docker安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">acm@acm-Lenovo:~/acmcloud$ sudo docker pull registry.docker-cn.com/library/owncloud</div><div class="line">Using default tag: latest</div><div class="line">latest: Pulling from library/owncloud</div></pre></td></tr></table></figure></p>
<p>还是利用了国内的镜像加速。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker run -d -p 80:80 owncloud</div></pre></td></tr></table></figure>
<p>启动容器</p>
<p>启动成功后访问服务器ip<br><img src="http://ow9eu3p52.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720180325124304.png" alt=""><br>会看到这样的界面<br>我们填写创建管理员账号密码<br>配置下数据库</p>
<p>这里我们选择mysql数据库，我们创建一个表 名字就叫做owncloud<br>然后填写数据库用户名密码就好了</p>
<p>等待安装完成<br>完成后，我们再次打开页面，就会看到登陆界面了<br>这样我们的云盘就搭好了<br>开始愉快的使用吧</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;ownCloud是一个自由且开源的个人云存储解决方案&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因为偶尔会有文件想要备份或者共享&lt;br&gt;所以就自己搭建了一下ownCloud，这里记录下搭建过程&lt;/p&gt;
    
    </summary>
    
      <category term="docker" scheme="http://blog.chenwe.top/categories/docker/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>UItimateRecyclerView的使用</title>
    <link href="http://blog.chenwe.top/2018/03/17/2018/2018-03-17%20UItimateRecyclerView%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://blog.chenwe.top/2018/03/17/2018/2018-03-17 UItimateRecyclerView的使用/</id>
    <published>2018-03-17T07:37:29.241Z</published>
    <updated>2018-03-19T06:18:38.813Z</updated>
    
    <content type="html"><![CDATA[<p>如果说项目里有用到RecyclerView的话<br>那么UItimateRecyclerView的使用能让你更加轻松的完成你想要的功能</p>
<a id="more"></a>
<h2 id="框架介绍"><a href="#框架介绍" class="headerlink" title="框架介绍"></a>框架介绍</h2><blockquote>
<p>UltimateRecyclerView是一个RecyclerView（高级和灵活版本的ListView），带有拉动刷新，加载更多，滑动解散，拖放和动画，粘滞标题，滚动显示或隐藏工具栏和FAB等许多功能。您可以使用它just like RecyclerView。</p>
</blockquote>
<h2 id="框架特性"><a href="#框架特性" class="headerlink" title="框架特性"></a>框架特性</h2><ul>
<li>多种动画</li>
<li>滑动即可解散</li>
<li>视差或正常的头部视图</li>
<li>拖放项目</li>
</ul>
<h2 id="官方下载地址"><a href="#官方下载地址" class="headerlink" title="官方下载地址"></a>官方下载地址</h2><p><a href="https://github.com/cymcsg/UltimateRecyclerView" target="_blank" rel="external">https://github.com/cymcsg/UltimateRecyclerView</a></p>
<h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>在Gradle里加入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">repositories &#123;</div><div class="line">    jcenter()</div><div class="line">    &#125;</div><div class="line">dependencies &#123;</div><div class="line">    ...</div><div class="line">    compile &apos;com.marshalchen.ultimaterecyclerview:library:0.7.3&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>或者maven里加入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">  &lt;groupId&gt;com.marshalchen.ultimaterecyclerview&lt;/groupId&gt;</div><div class="line">  &lt;artifactId&gt;library&lt;/artifactId&gt;</div><div class="line">  &lt;version&gt;0.7.2&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>在对应的layout.xml文件中加入<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">com.marshalchen.ultimaterecyclerview.UltimateRecyclerView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/ultimate_recycler_view"</span></div><div class="line">/&gt;</div></pre></td></tr></table></figure></p>
<p>就可以使用了</p>
<h2 id="入门例子"><a href="#入门例子" class="headerlink" title="入门例子"></a>入门例子</h2><p>这里我们来模仿下支付宝的记账本里的滑动替换head的效果<br>列表里有不同的分组，每个分组有一个头部，这个头部会长期驻留在顶部，当下一个分组的头部移动到顶部时，替换头部。</p>
<p>下面是布局代码<br>activity_main.xml 主布局<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">com.marshalchen.ultimaterecyclerview.UltimateRecyclerView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/recycler_view"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        &gt;<span class="tag">&lt;/<span class="name">com.marshalchen.ultimaterecyclerview.UltimateRecyclerView</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>head_view.xml 头部的样式<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"60dp"</span></div><div class="line">    <span class="attr">android:background</span>=<span class="string">"@color/colorPrimary"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/tv2"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:padding</span>=<span class="string">"20dp"</span>&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">TextView</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"40dp"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"40dp"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"right"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@mipmap/ic_launcher"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>item_layout.xml  列表子布局<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">TextView</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/tv"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:padding</span>=<span class="string">"20dp"</span></div><div class="line">    <span class="attr">android:background</span>=<span class="string">"@color/colorAccent"</span>&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">TextView</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>以上就是布局的全部文件了</p>
<p>下面是程序的代码<br>MainActivity.java     主程序 Activity<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.asus.ultimaterecyclerviewtest;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.os.Handler;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.LinearLayoutManager;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.RecyclerView;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.helper.ItemTouchHelper;</div><div class="line"><span class="keyword">import</span> android.view.LayoutInflater;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.marshalchen.ultimaterecyclerview.UltimateRecyclerView;</div><div class="line"><span class="keyword">import</span> com.marshalchen.ultimaterecyclerview.itemTouchHelper.SimpleItemTouchHelperCallback;</div><div class="line"><span class="keyword">import</span> com.marshalchen.ultimaterecyclerview.stickyheadersrecyclerview.StickyRecyclerHeadersDecoration;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    UltimateRecyclerView recyclerView;</div><div class="line"></div><div class="line">    View headerView;</div><div class="line">    <span class="keyword">private</span> StringAdapter adapter;</div><div class="line">    <span class="keyword">private</span> Handler handler;</div><div class="line"></div><div class="line">    ArrayList&lt;String&gt; strings = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        <span class="comment">//生成数据</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</div><div class="line">            strings.add(i + <span class="string">""</span>);</div><div class="line">        &#125;</div><div class="line">        recyclerView = (UltimateRecyclerView) findViewById(R.id.recycler_view);</div><div class="line">        handler = <span class="keyword">new</span> Handler();</div><div class="line">        recyclerView.setLayoutManager(<span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>));</div><div class="line">        headerView = LayoutInflater.from(<span class="keyword">this</span>).inflate(R.layout.head_view, <span class="keyword">null</span>);</div><div class="line">        adapter = <span class="keyword">new</span> StringAdapter(strings, <span class="keyword">this</span>);</div><div class="line">        recyclerView.setAdapter(adapter);</div><div class="line"></div><div class="line">        <span class="comment">//为每个item添加头部的布局   这里运用到的其实就是RecyclerView.ItemDecoration</span></div><div class="line">        <span class="comment">//可能一般都是用这个来实现item之间的分隔线的  但是线也是一个view，但这个view够大的时候，就是一个头部了</span></div><div class="line">        StickyRecyclerHeadersDecoration stickyRecyclerHeadersDecoration = <span class="keyword">new</span> StickyRecyclerHeadersDecoration(adapter);</div><div class="line">        recyclerView.addItemDecoration(stickyRecyclerHeadersDecoration);</div><div class="line"></div><div class="line">        ItemTouchHelper.Callback callback = <span class="keyword">new</span> SimpleItemTouchHelperCallback(adapter) &#123;</div><div class="line">            <span class="comment">//这个方法还有别的方法可以重载  可以控制如滑动删除等功能</span></div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMovementFlags</span><span class="params">(RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder)</span> </span>&#123;</div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> dragFlags = ItemTouchHelper.UP | ItemTouchHelper.DOWN;<span class="comment">//控制拖动的方向   这里设置了智能上下拖动交换位置</span></div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> swipeFlags = ItemTouchHelper.LEFT;<span class="comment">//控制滑动删除的方向  这里设置了只能左滑删除</span></div><div class="line"></div><div class="line">                <span class="keyword">return</span> makeMovementFlags(dragFlags, swipeFlags);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isItemViewSwipeEnabled</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">super</span>.isItemViewSwipeEnabled();<span class="comment">//这里控制开启或关闭item是否可以滑动删除的功能</span></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLongPressDragEnabled</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">super</span>.isLongPressDragEnabled();<span class="comment">//控制长按拖动功能</span></div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> ItemTouchHelper itemTouchHelper = <span class="keyword">new</span> ItemTouchHelper(callback);</div><div class="line">        itemTouchHelper.attachToRecyclerView(recyclerView.mRecyclerView);</div><div class="line">        <span class="comment">//设置头部一定要在setAdapter后面，因为这个操作会调用adapter的方法来显示头部，如果adapter为null，则出错</span></div><div class="line">        recyclerView.setParallaxHeader(headerView);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>StringAdapter.java    数据适配器<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.asus.ultimaterecyclerviewtest;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.RecyclerView;</div><div class="line"><span class="keyword">import</span> android.view.LayoutInflater;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.view.ViewGroup;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.marshalchen.ultimaterecyclerview.UltimateViewAdapter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by asus on 2018/3/19.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringAdapter</span> <span class="keyword">extends</span> <span class="title">UltimateViewAdapter</span>&lt;<span class="title">StringViewHolder</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;String&gt; stringList;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Context context;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StringAdapter</span><span class="params">(List&lt;String&gt; stringList, Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.stringList = stringList;</div><div class="line">        <span class="keyword">this</span>.context = context;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> StringViewHolder <span class="title">getViewHolder</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StringViewHolder(view, <span class="keyword">false</span>);</div><div class="line">        <span class="comment">//这个getViewHolder方法在内部实现中只有在获取头部、加载更多、下拉刷新的时候会调用</span></div><div class="line">        <span class="comment">//直接设置itemView为GONE，所以不需要初始化什么的，只要返回的是个ViewHolder就行</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> StringViewHolder <span class="title">newFooterHolder</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> StringViewHolder <span class="title">newHeaderHolder</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> StringViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent)</span> </span>&#123;</div><div class="line">        View view = LayoutInflater.from(<span class="keyword">this</span>.context).inflate(R.layout.item_layout, parent, <span class="keyword">false</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StringViewHolder(view, <span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAdapterItemCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> stringList == <span class="keyword">null</span> ? <span class="number">0</span> : stringList.size();</div><div class="line">        <span class="comment">//这里返回的是你的item的个数  不包括头部和加载view</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">generateHeaderId</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (customHeaderView != <span class="keyword">null</span>) &#123;</div><div class="line">            position -= <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//为每一项item生成头部的View，如果返回－1，则不生成，假如多个连续的item返回同一个id，</span></div><div class="line">        <span class="comment">//则只会生成一个头部View</span></div><div class="line">        <span class="comment">//这里提取position的第一个数作为id</span></div><div class="line">        String s = position + <span class="string">""</span>;</div><div class="line">        <span class="keyword">return</span> s.charAt(<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(StringViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="comment">//一定要加这个判断  因为UltimateRecyclerView本身有加了头部和尾部  这个方法返回的是包括头部和尾部在内的</span></div><div class="line">        <span class="keyword">if</span> (position &lt; getItemCount() &amp;&amp; (customHeaderView</div><div class="line">                != <span class="keyword">null</span> ? position &lt;= stringList.size() : position &lt; stringList.size())</div><div class="line">                &amp;&amp; (customHeaderView != <span class="keyword">null</span> ? position &gt; <span class="number">0</span> : <span class="keyword">true</span>)) &#123;</div><div class="line">            position -= customHeaderView == <span class="keyword">null</span> ? <span class="number">0</span> : <span class="number">1</span>;</div><div class="line">            holder.tv.setText(stringList.get(position));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> RecyclerView.<span class="function">ViewHolder <span class="title">onCreateHeaderViewHolder</span><span class="params">(ViewGroup parent)</span> </span>&#123;</div><div class="line">        View view = LayoutInflater.from(<span class="keyword">this</span>.context).inflate(R.layout.head_view, parent, <span class="keyword">false</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StringHeadViewHolder(view);</div><div class="line">        <span class="comment">//初始化item的头部布局  这里为了方便 就直接用StringViewHolder,实际使用可以使用不同于item的布局</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindHeaderViewHolder</span><span class="params">(RecyclerView.ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (customHeaderView != <span class="keyword">null</span>) &#123;</div><div class="line">            position -= <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//绑定item头部view的数据，这里提取每个view的position的第一个数来作为头部显示数据</span></div><div class="line">        ((StringHeadViewHolder) holder).tv2.setText(<span class="string">"header  "</span> + (position + <span class="string">" "</span>).charAt(<span class="number">0</span>));</div><div class="line">        ((StringHeadViewHolder) holder).tv2.setTextColor(<span class="keyword">this</span>.context.getResources().getColor(android.R.color.holo_red_dark));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemMove</span><span class="params">(<span class="keyword">int</span> fromPosition, <span class="keyword">int</span> toPosition)</span> </span>&#123;</div><div class="line">        swapPositions(stringList, fromPosition, toPosition);</div><div class="line"></div><div class="line">        <span class="comment">//如果开启的拖动移动位置的功能</span></div><div class="line">        <span class="comment">//要重写这个方法  因为如果不重写  交换的只是view的位置，数据的位置没有交换 一拖动，就会变成原来的样子</span></div><div class="line">        <span class="keyword">super</span>.onItemMove(fromPosition, toPosition);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemDismiss</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        removeInternal(stringList, position);<span class="comment">//控制删除的</span></div><div class="line">        <span class="keyword">super</span>.onItemDismiss(position);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>StringHeadViewHolder.java    头部的ViewHolder<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.asus.ultimaterecyclerviewtest;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.widget.TextView;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.marshalchen.ultimaterecyclerview.UltimateRecyclerviewViewHolder;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by asus on 2018/3/17.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringHeadViewHolder</span> <span class="keyword">extends</span> <span class="title">UltimateRecyclerviewViewHolder</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> TextView tv2;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StringHeadViewHolder</span><span class="params">(View itemView)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(itemView);</div><div class="line">        tv2 = (TextView) itemView.findViewById(R.id.tv2);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>StringViewHolder.java  列表的ViewHolder<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">package</span> com.example.asus.ultimaterecyclerviewtest;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.widget.TextView;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.marshalchen.ultimaterecyclerview.UltimateRecyclerviewViewHolder;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by asus on 2018/3/17.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringViewHolder</span> <span class="keyword">extends</span> <span class="title">UltimateRecyclerviewViewHolder</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> TextView tv;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StringViewHolder</span><span class="params">(View itemView, <span class="keyword">boolean</span> isItem)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(itemView);</div><div class="line">        <span class="keyword">if</span> (isItem) &#123;</div><div class="line">            tv = (TextView) itemView;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里再说下关于viewholder知识。<br>ViewHolder通常出现在适配器里，为的是列表滚动的时候快速设置值，而不必每次都重新创建很多对象，从而提升性能。<br>也可以说是一个持有者的类，他里面一般没有方法，只有属性，作用就是一个临时的储存器，把你getView方法中每次返回的View存起来，可以下次再用。这样做的好处就是不必每次都到布局文件中去拿到你的View，提高了效率。</p>
<h2 id="效果演示"><a href="#效果演示" class="headerlink" title="效果演示"></a>效果演示</h2><video src="http://ow9eu3p52.bkt.clouddn.com/Screenrecorder-2018-03-19-13-52-14-486.mp4" type="video/mp4" controls="controls" width="33%" height="33%"><br></video>


<h2 id="框架文档"><a href="#框架文档" class="headerlink" title="框架文档"></a>框架文档</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><blockquote>
<p>UltimateRecyclerView是一个RecyclerView（高级和灵活版本的ListView），带有拉动刷新，加载更多，滑动解散，拖放和动画，粘滞标题，滚动显示或隐藏工具栏和FAB等许多功能。您可以使用它just like RecyclerView。</p>
</blockquote>
<p>当前版本: v0.7.0</p>
<h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>Gradle:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">repositories &#123;</div><div class="line">    jcenter()</div><div class="line">    &#125;</div><div class="line">dependencies &#123;</div><div class="line">    ...</div><div class="line">    compile &apos;com.marshalchen.ultimaterecyclerview:library:0.7.3&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Maven:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">  &lt;groupId&gt;com.marshalchen.ultimaterecyclerview&lt;/groupId&gt;</div><div class="line">  &lt;artifactId&gt;library&lt;/artifactId&gt;</div><div class="line">  &lt;version&gt;0.7.2&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure></p>
<p>使用：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">com.marshalchen.ultimaterecyclerview.UltimateRecyclerView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/ultimate_recycler_view"</span></div><div class="line">/&gt;</div></pre></td></tr></table></figure></p>
<p>一些demo：<br>我的demo 参考上文的入门例子部分</p>
<p><a href="https://github.com/cymcsg/UltimateRecyclerView/tree/master/UltimateRecyclerView" target="_blank" rel="external">官方demo</a></p>
<h2 id="自己对于框架的评价"><a href="#自己对于框架的评价" class="headerlink" title="自己对于框架的评价"></a>自己对于框架的评价</h2><p>我觉得这个框架可以说是对于原生的RecyclerView的一些补充<br>将一些实际使用中可能需要用到而官方没有提供的功能给整合了进来。<br>让一些刚开始接触列表这块功能的新人开发者专注于一块组件，而不用去各处寻找资料，方便了开发者。</p>
<p>但是因为是对于原生的RecyclerView的一些补充，所以容易造成一些安装上的报错，或者因为更新而产生版本不匹配的问题，相对于原来的RecyclerView，这可以说是这个框架的一个缺点了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果说项目里有用到RecyclerView的话&lt;br&gt;那么UItimateRecyclerView的使用能让你更加轻松的完成你想要的功能&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://blog.chenwe.top/categories/Android/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>React Native开发中的一些坑 (二)</title>
    <link href="http://blog.chenwe.top/2018/03/08/2018/2018-03-08%20React%20Native%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91%20(%E4%BA%8C)/"/>
    <id>http://blog.chenwe.top/2018/03/08/2018/2018-03-08 React Native开发中的一些坑 (二)/</id>
    <published>2018-03-08T11:34:08.100Z</published>
    <updated>2018-03-31T06:23:17.368Z</updated>
    
    <content type="html"><![CDATA[<p>这几天在弄React Native<br>中间难免踩坑<br>这里继续记录下</p>
<a id="more"></a>
<h2 id="Could-not-expand-ZIP"><a href="#Could-not-expand-ZIP" class="headerlink" title="Could not expand ZIP"></a>Could not expand ZIP</h2><p>问题描述：</p>
<blockquote>
<p>Execution failed for task ‘:app:prepareCameReactNativeCameraUnspecifiedLibrary’.<br>Could not expand ZIP ‘D:\ReactNative\came\node_modules\react-native-camera\android\build\outputs\aar\react-native-camera-release.aar’.</p>
</blockquote>
<p>解决方法：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">D:\ReactNative\came</div><div class="line">λ cd android</div><div class="line"></div><div class="line">D:\ReactNative\came\android</div><div class="line">λ gradlew clean</div><div class="line">Incremental java compilation is an incubating feature.</div><div class="line">:app:clean</div><div class="line">:react-native-camera:clean</div><div class="line"></div><div class="line">BUILD SUCCESSFUL</div><div class="line"></div><div class="line">Total time: 27.948 secs</div><div class="line">D:\ReactNative\came\android</div><div class="line">λ cd ..</div><div class="line"></div><div class="line">D:\ReactNative\came</div><div class="line">λ react-native run-android</div></pre></td></tr></table></figure></p>
<h2 id="java-io-IOException-Could-not-delete-path"><a href="#java-io-IOException-Could-not-delete-path" class="headerlink" title="java.io.IOException: Could not delete path"></a>java.io.IOException: Could not delete path</h2><p>问题描述：</p>
<blockquote>
<p>Execution failed for task ‘:app:transformClassesWithDexForDebug’.<br>java.io.IOException: Could not delete path ‘D:\ReactNative\came\android\app\build\intermediates\transforms\dex\debug\folders’.</p>
</blockquote>
<p>解决方法：<br>删除相关问题的node_module 然后重装。</p>
<h2 id="undefined-is-not-an-object-evaluating-this-props-navigation-navigate"><a href="#undefined-is-not-an-object-evaluating-this-props-navigation-navigate" class="headerlink" title="undefined is not an object (evaluating this.props.navigation.navigate)"></a>undefined is not an object (evaluating this.props.navigation.navigate)</h2><p>问题产生：<br>想从一个页面的组件中实现导航跳转<br>但是没有传入navigation这个props</p>
<p>解决方法：<br>传入navigation<br>例如 <me navigation="{this.props.navigation}/"></me></p>
<h2 id="图片点击没反应"><a href="#图片点击没反应" class="headerlink" title="图片点击没反应"></a>图片点击没反应</h2><p>图片之类的控件要在外面加上<code>TouchableWithoutFeedback</code> 才能监听点击</p>
<p>例如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">TouchableWithoutFeedback</span> <span class="attr">onPress</span>=<span class="string">&#123;()</span> =&gt;</span> this.toTakePhoto()&#125; &gt;</div><div class="line">  <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.img_facewarpper&#125;</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">Image</span> <span class="attr">style</span>=<span class="string">&#123;styles.img_face&#125;</span></span></div><div class="line">          <span class="attr">source</span>=<span class="string">&#123;require(</span>'<span class="attr">.</span>/<span class="attr">components</span>/<span class="attr">img</span>/<span class="attr">face.png</span>')&#125; /&gt;</div><div class="line">  <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">TouchableWithoutFeedback</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="Undefined-is-not-an-object-evaluating-this-state"><a href="#Undefined-is-not-an-object-evaluating-this-state" class="headerlink" title="Undefined is not an object evaluating this.state.*"></a>Undefined is not an object evaluating this.state.*</h2><p>这个state的值取不到，说是未定义。</p>
<p>我们只要在对应调用的方法后面加上 <code>.bind(this)</code> 就好了。<br>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 错误</div><div class="line">renderHeader=&#123;this._renderHeader&#125;</div><div class="line"></div><div class="line">// 正确</div><div class="line">renderHeader=&#123;this._renderHeader.bind(this)&#125;</div></pre></td></tr></table></figure></p>
<p>上面那种方法，在_renderHeader里的state是取不到的<br>要像下面那种方法那样.bing(this)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这几天在弄React Native&lt;br&gt;中间难免踩坑&lt;br&gt;这里继续记录下&lt;/p&gt;
    
    </summary>
    
      <category term="React Native" scheme="http://blog.chenwe.top/categories/React-Native/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>React Native开发中的一些坑（一）</title>
    <link href="http://blog.chenwe.top/2018/03/07/2018/2018-03-07%20React%20Native%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/"/>
    <id>http://blog.chenwe.top/2018/03/07/2018/2018-03-07 React Native开发中的一些坑/</id>
    <published>2018-03-07T14:19:02.214Z</published>
    <updated>2018-03-07T14:39:19.419Z</updated>
    
    <content type="html"><![CDATA[<p>这几天在弄React Native<br>中间难免踩坑<br>这里记录下</p>
<a id="more"></a>
<h2 id="Configuration-with-name-‘default’-not-found-react-native"><a href="#Configuration-with-name-‘default’-not-found-react-native" class="headerlink" title="Configuration with name ‘default’ not found react-native"></a>Configuration with name ‘default’ not found react-native</h2><p>引入一些库再去运行，可能会报的错<br>原因：因为 android目录下的settings.gradle文件里有些东西的引用和node_modules里不同<br>解决方法： 删掉其中缺失的部分，重新安装。</p>
<h2 id="react-native-camera-相关的错误"><a href="#react-native-camera-相关的错误" class="headerlink" title="react-native-camera 相关的错误"></a>react-native-camera 相关的错误</h2><h3 id="react-native-camera-unspecified"><a href="#react-native-camera-unspecified" class="headerlink" title="react-native-camera:unspecified"></a>react-native-camera:unspecified</h3><p>在 <code>react-native link react-native-camera</code> 之后容易报的错<br>原因：因为没有在 android/build.gradle 文件里添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">maven &#123; url &apos;https://jitpack.io&apos; &#125;</div></pre></td></tr></table></figure></p>
<p>注意：添加到上一个maven的下面就行，中间不用加 ,<br>例如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">maven &#123; url &apos;https://jitpack.io&apos; &#125;</div><div class="line">maven &#123;</div><div class="line">    url &quot;https://maven.google.com&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>即可</p>
<h3 id="Could-not-find-com-android-support-support-v4-26-0-1"><a href="#Could-not-find-com-android-support-support-v4-26-0-1" class="headerlink" title="Could not find com.android.support:support-v4:26.0.1."></a>Could not find com.android.support:support-v4:26.0.1.</h3><p>在 <code>react-native link react-native-camera</code> 之后容易报的错<br>原因：因为build tool 版本太低吗，要求26<br>解决方法：升级。<br>在android/app目录里，修改 build.gradle 里的版本信息为26<br>例如修改为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">compileSdkVersion 26</div><div class="line">buildToolsVersion &quot;26.0.1&quot;</div><div class="line"></div><div class="line">defaultConfig &#123;</div><div class="line">    applicationId &quot;com.came&quot;</div><div class="line">    minSdkVersion 16</div><div class="line">    targetSdkVersion 26</div><div class="line">    versionCode 1</div><div class="line">    versionName &quot;1.0&quot;</div><div class="line">    ndk &#123;</div><div class="line">        abiFilters &quot;armeabi-v7a&quot;, &quot;x86&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>修改之后也还是不行，要在android/build.gradle 文件里添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">maven &#123;</div><div class="line">    url &quot;https://maven.google.com&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这几天在弄React Native&lt;br&gt;中间难免踩坑&lt;br&gt;这里记录下&lt;/p&gt;
    
    </summary>
    
      <category term="React Native" scheme="http://blog.chenwe.top/categories/React-Native/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>LaTeX的入门</title>
    <link href="http://blog.chenwe.top/2018/02/19/2018/2018-02-19%20LaTeX%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://blog.chenwe.top/2018/02/19/2018/2018-02-19 LaTeX的一些基本操作/</id>
    <published>2018-02-19T04:51:54.324Z</published>
    <updated>2018-02-19T05:41:24.227Z</updated>
    
    <content type="html"><![CDATA[<p>前几天参加了数学建模美赛<br>里面用到了LaTeX来排版，这里来简单讲解下<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20180219125407218.png" alt=""></p>
<a id="more"></a>
<blockquote>
<p>LaTeX（LATEX，音译“拉泰赫”）是一种基于ΤΕΧ的排版系统，由美国计算机学家莱斯利·兰伯特（Leslie Lamport）在20世纪80年代初期开发，利用这种格式，即使使用者没有排版和程序设计的知识也可以充分发挥由TeX所提供的强大功能，能在几天，甚至几小时内生成很多具有书籍质量的印刷品。对于生成复杂表格和数学公式，这一点表现得尤为突出。因此它非常适用于生成高印刷质量的科技和数学类文档。这个系统同样适用于生成从简单的信件到完整书籍的所有其他种类的文档。</p>
</blockquote>
<p>个人觉得这个有点像markdown</p>
<h2 id="安装LaTeX环境"><a href="#安装LaTeX环境" class="headerlink" title="安装LaTeX环境"></a>安装LaTeX环境</h2><p>windows用户推荐TeXlive  <a href="http://tug.org/texlive/" target="_blank" rel="external">下载地址</a><br>下载完成后将该 iso 文件解压缩 (普通的解压软件就可以), 在解压得到的文件夹中双击 installtl-windows,<br>开始安装.</p>
<p>安装需要挺久时间的，TeXlive是自带TeXworks编辑器的，但是这里用的是vscode安装插件来作为编辑器。</p>
<h2 id="用vscode来写LaTeX"><a href="#用vscode来写LaTeX" class="headerlink" title="用vscode来写LaTeX"></a>用vscode来写LaTeX</h2><p><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20180219132818547.png" alt=""><br>我们需要一个LaTeX Workshop的插件</p>
<p>安装完成后，我们就可以使用了。</p>
<h2 id="第一个LaTeX文档"><a href="#第一个LaTeX文档" class="headerlink" title="第一个LaTeX文档"></a>第一个LaTeX文档</h2><p>去网上下载一个LaTeX的文档模板，把它添加到vscode的资源管理器中，我们点击.tex后，在文档里右键 Build LateX project 来编译（或者按 Ctrl + alt + B）。<br>编译完成后，我们点击右上角来查看（或者Ctrl + alt + T）。<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20180219133249294.png" alt=""></p>
<p>这样我们第一个LateX文档就能成功编译运行了。<br>具体编写方式请参考 <a href="https://www.latex-project.org/help/documentation/" target="_blank" rel="external">官方文档</a></p>
<h2 id="一个表格示例"><a href="#一个表格示例" class="headerlink" title="一个表格示例"></a>一个表格示例</h2><p>我这里来写一个表格的例子<br>在头部要添加 ‘ \ usepackage{tabu}’<br>下面是一个基本表格的写法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">\begin&#123;table&#125;[htbp]  </div><div class="line">  \caption&#123;Criterion matrix judgment matrix&#125;  </div><div class="line">  \begin&#123;center&#125;  </div><div class="line">  \begin&#123;tabu&#125; to 0.8\textwidth&#123;X[c]|X[2,c]X[2,c]X[2,c]&#125;  </div><div class="line">  %0.8\textwidth  为设置表格宽度  </div><div class="line">  %X[c]   表示这一列居中，所占比例为1，相当于X[1,c]  </div><div class="line">  %X[3,c]  表示这一列居中，所占比例为3，这列的宽度是X[c]列的3倍  </div><div class="line">  \hline  </div><div class="line">  $A$ &amp;$B_1$   &amp;$B_2$   &amp;$B_3$\\  </div><div class="line">  \hline  </div><div class="line">  $B_1$  &amp;1    &amp;3      &amp;5\\  </div><div class="line">  $B_2$  &amp;1/3   &amp;1      &amp;2\\  </div><div class="line">  $B_3$  &amp;1/5   &amp;1/2     &amp;1\\  </div><div class="line"></div><div class="line">  \hline  </div><div class="line">  \end&#123;tabu&#125;  </div><div class="line">  \end&#123;center&#125;  </div><div class="line">  \end&#123;table&#125;</div></pre></td></tr></table></figure></p>
<p>写完之后 重新编译运行，效果如下<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20180219133944558.png" alt=""></p>
<p>一个简单的表格就写完了</p>
<p>LaTeX最强大的功能还是它的公式编辑功能<br>它能够写出更加工整的公式。<br>但是这里就不过多介绍了，感兴趣的话可以去看看文档和其他的一些博客教程。<img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20180219134114663.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几天参加了数学建模美赛&lt;br&gt;里面用到了LaTeX来排版，这里来简单讲解下&lt;br&gt;&lt;img src=&quot;http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20180219125407218.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数学建模" scheme="http://blog.chenwe.top/categories/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
  </entry>
  
  <entry>
    <title>层次分析法</title>
    <link href="http://blog.chenwe.top/2018/02/17/2018/2018-02-17%20%E5%B1%82%E6%AC%A1%E5%88%86%E6%9E%90%E6%B3%95/"/>
    <id>http://blog.chenwe.top/2018/02/17/2018/2018-02-17 层次分析法/</id>
    <published>2018-02-17T05:28:13.489Z</published>
    <updated>2018-02-17T06:34:21.903Z</updated>
    
    <content type="html"><![CDATA[<p>前几天参加了数学建模美赛<br>里面用到了层次分析法，这里来简单讲解下<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20180217132951752.png" alt=""></p>
<a id="more"></a>
<blockquote>
<p>层次分析法（Analytic Hierarchy Process，简称 AHP）是对一些较为复杂、较为模 糊的问题作出决策的简易方法，它特别适用于那些难于完全定量分析的问题。它是美 国运筹学家 T. L. Saaty 教授于上世纪 70 年代初期提出的一种简便、灵活而又实用的 多准则决策方法。</p>
</blockquote>
<h2 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h2><h3 id="建立递阶层次结构模型"><a href="#建立递阶层次结构模型" class="headerlink" title="建立递阶层次结构模型"></a>建立递阶层次结构模型</h3><p>挑选合适的工作。经双方恳谈，已有三个单位表示愿意录用某毕业生。该 生根据已有信息建立了一个层次结构模型<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20180217141624943.png" alt=""><br>在层次分析法中，我们一般会根据问题来建立三个层次。<br>最顶层是目标层，是我们的分析目标，一般只有一个。<br>第二层是用来判断的准则层，里面是那些影响你选择与决策的因素，例如这里是 研究课题、发展前途、待遇等。<br>最底层是方案层，一般放你想要决策的目标选项，这里是工作选项 工作1、工作2、工作3。</p>
<h3 id="构造判断矩阵"><a href="#构造判断矩阵" class="headerlink" title="构造判断矩阵"></a>构造判断矩阵</h3><p>层次结构反映了因素之间的关系，但准则层中的各准则在目标衡量中所占的比重 并不一定相同，在决策者的心目中，它们各占有一定的比例。<br>比如可能有的人在这几个判断准则中更看重景色，有的人更看重费用。<br>在确定影响某因素的诸因子在该因素中所占的比重时，遇到的主要困难是这些比 重常常不易定量化。此外，当影响某因素的因子较多时，直接考虑各因子对该因素有 多大程度的影响时，常常会因考虑不周全、顾此失彼而使决策者提出与他实际认为的 重要性程度不相一致的数据，甚至有可能提出一组隐含矛盾的数据。<br>所以可以采取对因子进行两两比较建立成对比较矩阵的 办法。即每次取两个因子 Xi 和 Xj，以 Aij 表示 Xi 和 Xj 对Z 的影响大小之比，全部比较 结果用矩阵 A=(Aij)n*n 表示，称 A为 Z-X 之间的成对比较判断矩阵（简称判断矩 阵）。容易看出，若 Xi 与 Xj 对Z 的影响之比为 Aij ，则 Xj 与 Xi 对Z 的影响之比应为 Aji.</p>
<p>建议引用数字 1~9 及其倒数作为标度。表 1 列出 了 1~9 标度的含义：<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-2018021714133988.png" alt=""></p>
<p>我们可以构建出准则层的矩阵：<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20180217141813845.png" alt=""></p>
<p>方案层的矩阵：<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20180217141833991.png" alt=""></p>
<h3 id="matlab计算"><a href="#matlab计算" class="headerlink" title="matlab计算"></a>matlab计算</h3><p>计算就交给matlab 代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">clc,clear</div><div class="line">fid=fopen(&apos;data.txt&apos;,&apos;r&apos;);  </div><div class="line">n1=6;n2=3;</div><div class="line">a=[];</div><div class="line">if fid == -1</div><div class="line">    disp(&apos;读取文件出错&apos;)</div><div class="line">end</div><div class="line">for i=1:n1    </div><div class="line">    tmp=str2num(fgetl(fid));      </div><div class="line">    a=[a;tmp];</div><div class="line">    %读准则层判断矩阵</div><div class="line">end</div><div class="line">for i=1:n1     </div><div class="line">    str1=char([&apos;b&apos;,int2str(i),&apos;=[];&apos;]);   </div><div class="line">    str2=char([&apos;b&apos;,int2str(i),&apos;=[b&apos;,int2str(i),&apos;;tmp];&apos;]);    </div><div class="line">    eval(str1);     </div><div class="line">    for j=1:n2         </div><div class="line">        tmp=str2num(fgetl(fid));         </div><div class="line">        eval(str2); %读方案层的判断矩阵    </div><div class="line">    end</div><div class="line">end</div><div class="line">ri=[0,0,0.58,0.90,1.12,1.24,1.32,1.41,1.45];</div><div class="line">%一致性指标</div><div class="line">[x,y]=eig(a);</div><div class="line">lamda=max(diag(y));</div><div class="line">num=find(diag(y)==lamda);</div><div class="line">w0=x(:,num)/sum(x(:,num));</div><div class="line">cr0=(lamda-n1)/(n1-1)/ri(n1)</div><div class="line">for i=1:n1     </div><div class="line">    [x,y]=eig(eval(char([&apos;b&apos;,int2str(i)])));     </div><div class="line">    lamda=max(diag(y));     </div><div class="line">    num=find(diag(y)==lamda);     </div><div class="line">    w1(:,i)=x(:,num)/sum(x(:,num));     </div><div class="line">    cr1(i)=(lamda-n2)/(n2-1)/ri(n2);</div><div class="line">end</div><div class="line">cr1, ts=w1*w0, w0, w1, cr=cr1*w0</div></pre></td></tr></table></figure></p>
<p>data.txt的数据如下：<br>1   1      1     4   1      1/2<br>1   1      2     4   1   1/2<br>1   1/2  1     5   3      1/2<br>1/4   1/4  1/5   1   1/3   1/3<br>1   1      1/3   3   1      1<br>2   2      2     3   3      1<br>1   1/4  1/2<br>4   1      3<br>2   1/3  1<br>1   1/4  1/5<br>4   1      1/2<br>5   2      1<br>1   3      1/3 1/3  1<br>1/7 3   7<br>1 1   1/3<br>5 3   1      7<br>1/5   1/7  1<br>1   1      7<br>1   1      7<br>1/7  1/7  1<br>1   7      9<br>1/7  1      1<br>1/9   1      1</p>
<p>最后我们可以得到这样一个表格：<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20180217142949780.png" alt=""></p>
<p>根据总权值排序，我们可以看出工作1是最满意的工作。</p>
<p>这个就是层次分析法的简单介绍了，这次的比赛中也用到了<img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-2018021714310881.png" alt=""></p>
<p>这篇博客参考了 《MATLAB数学建模算法及实例分析》一书</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几天参加了数学建模美赛&lt;br&gt;里面用到了层次分析法，这里来简单讲解下&lt;br&gt;&lt;img src=&quot;http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20180217132951752.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数学建模" scheme="http://blog.chenwe.top/categories/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>OKhttp的使用</title>
    <link href="http://blog.chenwe.top/2017/12/03/2017/2017-12-03%20OKhttp%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://blog.chenwe.top/2017/12/03/2017/2017-12-03 OKhttp的使用/</id>
    <published>2017-12-03T14:24:58.545Z</published>
    <updated>2017-12-09T09:23:29.017Z</updated>
    
    <content type="html"><![CDATA[<p>以前在写Android项目的时候<br>遇到网络访问方面的内容<br>总是用原生的方法去访问网络<br>十分麻烦而且代码冗杂</p>
<p>但是用框架就方便许多了<br>这里简单介绍下OKhttp的使用<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171203222856395.png" alt=""><br><a id="more"></a><br>这次对plus Android端进行了重构<br>首先就从网络访问这块改起</p>
<h2 id="Gradle-依赖"><a href="#Gradle-依赖" class="headerlink" title="Gradle 依赖"></a>Gradle 依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    testCompile &apos;com.squareup.okhttp3:mockwebserver:3.9.1&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>添加完依赖就可以开始搞事了</p>
<h2 id="访问网络"><a href="#访问网络" class="headerlink" title="访问网络"></a>访问网络</h2><p>Get方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getComments</span><span class="params">()</span> </span>&#123;</div><div class="line">    Request request = <span class="keyword">new</span> Request.Builder().url(<span class="string">"你的url"</span>).build();</div><div class="line">    client.newCall(request).enqueue(<span class="keyword">new</span> Callback() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">            Message msg = <span class="keyword">new</span> Message();</div><div class="line">            msg.what = <span class="number">1</span>;</div><div class="line">            msg.obj = response.body().string();</div><div class="line">            myHandler.sendMessage(msg);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Post方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendComment</span><span class="params">()</span> </span>&#123;</div><div class="line">    RequestBody body = <span class="keyword">new</span> FormBody.Builder()</div><div class="line">            .add(<span class="string">"body"</span>, content)<span class="comment">//添加键值对</span></div><div class="line">            .add(<span class="string">"discussion_id"</span>, Id + <span class="string">""</span>)</div><div class="line">            .build();</div><div class="line">    Request request = <span class="keyword">new</span> Request.Builder()</div><div class="line">            .url(<span class="string">"你的url"</span>)</div><div class="line">            .post(body)</div><div class="line">            .build();</div><div class="line">    client.newCall(request).enqueue(<span class="keyword">new</span> Callback() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">            Message msg = <span class="keyword">new</span> Message();</div><div class="line">            msg.what = <span class="number">2</span>;</div><div class="line">            msg.obj = response.body().string();</div><div class="line">            myHandler.sendMessage(msg);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们这里成功访问网络后，通过 <code>onResponse</code> 来执行<br>如果失败，则执行 <code>onFailure</code></p>
<h2 id="更新UI"><a href="#更新UI" class="headerlink" title="更新UI"></a>更新UI</h2><p>这里讲下用Handler的方法<br>为了防止内存泄漏，所以我们要使用内部静态Handler类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> Handler myHandler;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    myHandler = <span class="keyword">new</span> MyHandler(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 内部静态Handler 类 防止内存泄漏</div><div class="line"> */</div><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">    WeakReference&lt;YourActivity&gt; mActivityReference;</div><div class="line"></div><div class="line">    MyHandler(YourActivity activity) &#123;</div><div class="line">        mActivityReference = <span class="keyword">new</span> WeakReference&lt;YourActivity&gt;(activity);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">        YourActivity activity = mActivityReference.get();</div><div class="line">          <span class="keyword">if</span> (msg.what == <span class="number">1</span>) &#123;</div><div class="line">            <span class="comment">//TODO 修改UI</span></div><div class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (msg.what == <span class="number">2</span>) &#123;</div><div class="line">            <span class="comment">//TODO 修改UI</span></div><div class="line">          &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在onCreat方法里new一个myHandler后<br>就可以使用了</p>
<p>这样就不会造成内存泄漏了，而且也能够修改UI</p>
<p>以上就是OKhttp的简单使用了<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171209172147497.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以前在写Android项目的时候&lt;br&gt;遇到网络访问方面的内容&lt;br&gt;总是用原生的方法去访问网络&lt;br&gt;十分麻烦而且代码冗杂&lt;/p&gt;
&lt;p&gt;但是用框架就方便许多了&lt;br&gt;这里简单介绍下OKhttp的使用&lt;br&gt;&lt;img src=&quot;http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171203222856395.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://blog.chenwe.top/categories/Android/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot使用properties配置文件实现多环境配置</title>
    <link href="http://blog.chenwe.top/2017/11/13/2017/2017-11-19%20SpringBoot%E4%BD%BF%E7%94%A8properties%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>http://blog.chenwe.top/2017/11/13/2017/2017-11-19 SpringBoot使用properties配置文件实现多环境配置/</id>
    <published>2017-11-13T05:31:27.821Z</published>
    <updated>2017-11-19T08:10:17.126Z</updated>
    
    <content type="html"><![CDATA[<p>我们在编写项目的时候<br>总是会有线上环境与线下环境<br>其中有些东西是不一样的，比如本地文件路径与线上文件路径之类的<br>但是每次打包都要去手动修改各个地方，十分麻烦也很容易出错<br>所以这次我们使用properties配置文件实现多环境配置<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171113133918221.png" alt=""><br><a id="more"></a></p>
<h2 id="多环境配置"><a href="#多环境配置" class="headerlink" title="多环境配置"></a>多环境配置</h2><p>在application.properties 的同级目录下创建三个配置文件<br>分别为：<br>application-dev.properties  线下环境<br>application-pro.properties  线上环境<br>application-test.properties  测试环境</p>
<p>假如我们需要根据不同的环境，来配置不同的默认文件夹<br>我们可以这样写</p>
<p>application.properties<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">spring.profiles.active=pro</div><div class="line"></div><div class="line">spring.mvc.static-path-pattern=/**</div><div class="line">spring.resources.static-locations=classpath:/META-INF/resources/,classpath:/resources/,\</div><div class="line">  classpath:/static/,classpath:/public/,file:$&#123;config.me.fileroot&#125;</div></pre></td></tr></table></figure></p>
<p>application-dev.properties<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#线下环境</div><div class="line">config.me.fileroot=h:/</div><div class="line">config.me.host=localhost</div></pre></td></tr></table></figure></p>
<p>application-pro.properties<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#线上环境</div><div class="line">config.me.fileroot=/home/cw/cloud/cloudspace/</div><div class="line">config.me.host=10.30.90.16</div></pre></td></tr></table></figure></p>
<p>根据 application.properties 里的 <code>spring.profiles.active=</code>的不同<br>来使用不同的配置文件<br>这里我们是 pro 也就是线上环境，所以他会加载<code>application-pro.properties</code> 里的内容<br>当然，application.properties里的内容它也会加载<br>如果两个配置文件里有内容有冲突的话，以指定的配置文件优先</p>
<p>这样在每次发布项目的时候，就不用去改那么多东西了。<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171119161004815.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们在编写项目的时候&lt;br&gt;总是会有线上环境与线下环境&lt;br&gt;其中有些东西是不一样的，比如本地文件路径与线上文件路径之类的&lt;br&gt;但是每次打包都要去手动修改各个地方，十分麻烦也很容易出错&lt;br&gt;所以这次我们使用properties配置文件实现多环境配置&lt;br&gt;&lt;img src=&quot;http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171113133918221.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://blog.chenwe.top/categories/SpringBoot/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>基于机器学习的DeepVideoAnalytics开源视频检索工具的安装与简单使用</title>
    <link href="http://blog.chenwe.top/2017/11/05/2017/2017-11-05%20%E5%9F%BA%E4%BA%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84DeepVideoAnalytics%E5%BC%80%E6%BA%90%E8%A7%86%E9%A2%91%E6%A3%80%E7%B4%A2%E5%B7%A5%E5%85%B7%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>http://blog.chenwe.top/2017/11/05/2017/2017-11-05 基于机器学习的DeepVideoAnalytics开源视频检索工具的安装与简单使用/</id>
    <published>2017-11-05T07:21:32.587Z</published>
    <updated>2017-11-05T09:04:29.692Z</updated>
    
    <content type="html"><![CDATA[<p>DeepVideoAnalytics是一款强大的开源视频检索工具<br>这是<a href="https://github.com/AKSHAYUBHAT/DeepVideoAnalytics" target="_blank" rel="external">它的项目地址</a><br>今天来讲下他的安装与简单使用<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171105153108742.png" alt=""><br><a id="more"></a></p>
<h2 id="它的架构，数据和处理模型"><a href="#它的架构，数据和处理模型" class="headerlink" title="它的架构，数据和处理模型"></a>它的架构，数据和处理模型</h2><p><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171105153720957.png" alt=""><br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171105153744149.png" alt=""><br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171105153748958.png" alt=""></p>
<h3 id="他用到的库"><a href="#他用到的库" class="headerlink" title="他用到的库"></a>他用到的库</h3><ul>
<li>FFmpeg (not linked, called via a Subprocess)</li>
<li>Tensorflow</li>
<li>OpenCV</li>
<li>Numpy</li>
<li>Pytorch</li>
<li>Nvidia-docker</li>
<li>Docker-compose</li>
<li>All packages in requirements.txt &amp; used in Dockerfiles.</li>
</ul>
<h1 id="安装与使用"><a href="#安装与使用" class="headerlink" title="安装与使用"></a>安装与使用</h1><h2 id="服务器的选择"><a href="#服务器的选择" class="headerlink" title="服务器的选择"></a>服务器的选择</h2><p>这里我们采用docker 安装部署<br>因为镜像有点大，所以我们选用外国的 vultr来做我们的服务器<br>用<a href="https://www.vultr.com/?ref=7150491" target="_blank" rel="external">这个地址</a>注册可以获得优惠，充多少送多少</p>
<p>这里有一点要注意<br>因为这个东西有点庞大，所以对服务器的性能要求也是比较大的<br>这里推荐用 ubuntu 16.04 x64的系统<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171105154448431.png" alt="">配置的</p>
<h2 id="服务器安装部署"><a href="#服务器安装部署" class="headerlink" title="服务器安装部署"></a>服务器安装部署</h2><p>启动完服务器后，我们通过ssh远程连接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">λ ssh root@45.77.182.142</div><div class="line">The authenticity of host &apos;45.77.182.142 (45.77.182.142)&apos; can&apos;t be established.</div><div class="line">ECDSA key fingerprint is SHA256:DoHFnM4S93wKowhvmLcMHbq8WNzbER+dfd3KuMRIq4k.</div><div class="line">Are you sure you want to continue connecting (yes/no)? yes</div><div class="line">Warning: Permanently added &apos;45.77.182.142&apos; (ECDSA) to the list of known hosts.</div><div class="line">root@45.77.182.142&apos;s password:</div><div class="line">Welcome to Ubuntu 16.04.2 LTS (GNU/Linux 4.4.0-87-generic x86_64)</div><div class="line"></div><div class="line"> * Documentation:  https://help.ubuntu.com</div><div class="line"> * Management:     https://landscape.canonical.com</div><div class="line"> * Support:        https://ubuntu.com/advantage</div><div class="line"></div><div class="line">94 packages can be updated.</div><div class="line">30 updates are security updates.</div><div class="line"></div><div class="line"></div><div class="line">root@vultr:~#</div></pre></td></tr></table></figure></p>
<p>下面安装 wget工具<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install wget</div></pre></td></tr></table></figure></p>
<p>安装完成后，我们获取最新版本的 Docker 安装包并安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget -qO- https://get.docker.com/ | sh</div></pre></td></tr></table></figure></p>
<p>安装完成后输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">root@vultr:~# docker version</div><div class="line">Client:</div><div class="line"> Version:      17.10.0-ce</div><div class="line"> API version:  1.33</div><div class="line"> Go version:   go1.8.3</div><div class="line"> Git commit:   f4ffd25</div><div class="line"> Built:        Tue Oct 17 19:04:16 2017</div><div class="line"> OS/Arch:      linux/amd64</div><div class="line"></div><div class="line">Server:</div><div class="line"> Version:      17.10.0-ce</div><div class="line"> API version:  1.33 (minimum version 1.12)</div><div class="line"> Go version:   go1.8.3</div><div class="line"> Git commit:   f4ffd25</div><div class="line"> Built:        Tue Oct 17 19:02:56 2017</div><div class="line"> OS/Arch:      linux/amd64</div><div class="line"> Experimental: false</div></pre></td></tr></table></figure></p>
<p>可以查看版本</p>
<p>下面安装 python的 pip工具<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt install python-pip</div></pre></td></tr></table></figure></p>
<p>安装完成后再安装 <code>setuptools</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install -U pip setuptools</div></pre></td></tr></table></figure></p>
<p>下面再安装<code>compose</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- curl -sSL https://s3.amazonaws.com/circle-downloads/install-circleci-docker.sh | bash -s -- 1.10.0</div><div class="line">- pip install --upgrade pip</div><div class="line">- pip install docker-compose</div></pre></td></tr></table></figure></p>
<p>安装完成后，我们要从github上clone项目了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/AKSHAYUBHAT/DeepVideoAnalytics</div></pre></td></tr></table></figure></p>
<p>然后进入目录并用<code>docker-compose</code>运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd DeepVideoAnalytics/deploy/demo &amp;&amp; docker-compose up</div></pre></td></tr></table></figure></p>
<p>然后等待下载<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171105160313502.png" alt=""><br>等待服务启动<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171105160621423.png" alt=""><br>访问8000端口<br>看到这样的界面就代表成功部署了<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171105161546842.png" alt=""></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-2017110516552488.png" alt=""><br>点击上传视频<br>将我们想要检索的目标视频上传到服务器<br>服务器在接收到视频后，会在后台对其进行分类处理并标记特征</p>
<p>分析完成后 点击添加图片，上传想要检索的图片到后台，<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171105165632274.png" alt=""></p>
<p>上传完成后，调整图片大小到合适位置<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171105165915443.png" alt=""></p>
<p>因为上传的是面部图片，所以用索引器里选择 facenet<br>点击精确检索<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171105170021305.png" alt=""></p>
<p>这样我们就获得了视频中该面部的所有目标图像了<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171105170141552.png" alt=""><br>我们可以看即使是侧脸，也能够正确的被识别，说明这个识别率还是可以的。</p>
<p>点击其中一个图片，还能看到他在视频中的完整原图<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171105170301688.png" alt=""></p>
<p>也能分辨面部和人体<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171105170340403.png" alt=""></p>
<p>不得不说 Deep Video Analytics 是一个强大的开源视频检索工具<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171105170429151.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DeepVideoAnalytics是一款强大的开源视频检索工具&lt;br&gt;这是&lt;a href=&quot;https://github.com/AKSHAYUBHAT/DeepVideoAnalytics&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;它的项目地址&lt;/a&gt;&lt;br&gt;今天来讲下他的安装与简单使用&lt;br&gt;&lt;img src=&quot;http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171105153108742.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="机器学习" scheme="http://blog.chenwe.top/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>Oracle与jdbc实现增删改查</title>
    <link href="http://blog.chenwe.top/2017/10/29/2017/2017-10-29%20Oracle%E4%B8%8Ejdbc%E5%AE%9E%E7%8E%B0%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
    <id>http://blog.chenwe.top/2017/10/29/2017/2017-10-29 Oracle与jdbc实现增删改查/</id>
    <published>2017-10-29T07:40:47.154Z</published>
    <updated>2017-10-29T09:45:17.190Z</updated>
    
    <content type="html"><![CDATA[<p>这次会归本源<br>采用jdbc的方式连接Oracle 并实现CURD</p>
<p><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171029154326706.png" alt=""><br><a id="more"></a></p>
<h2 id="添加数据库驱动"><a href="#添加数据库驱动" class="headerlink" title="添加数据库驱动"></a>添加数据库驱动</h2><p>我用的是IDEA这款编辑器<br>所以在 File -&gt; Project structure -&gt; Libraries<br>里添加 对应版本号的 ojdbc.jar包<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171029154921469.png" alt=""></p>
<h2 id="编写-DbConnect-与Dao"><a href="#编写-DbConnect-与Dao" class="headerlink" title="编写 DbConnect 与Dao"></a>编写 DbConnect 与Dao</h2><p>这里用了单例模式<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span>  <span class="class"><span class="keyword">class</span> <span class="title">DbConnect</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> String url= <span class="string">"jdbc:oracle:thin:@localhost:1521:orcl"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> String name = <span class="string">"cw"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> String password = <span class="string">"654321"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> Connection conn = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DbConnect dbConnect = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DbConnect <span class="title">getInitJDBCUtil</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (dbConnect == <span class="keyword">null</span>) &#123;</div><div class="line"></div><div class="line">            <span class="comment">// 给类加锁防止线程并发</span></div><div class="line"></div><div class="line">            <span class="keyword">synchronized</span> (DbConnect.class) &#123;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (dbConnect == <span class="keyword">null</span>) &#123;</div><div class="line"></div><div class="line">                    dbConnect = <span class="keyword">new</span> DbConnect();</div><div class="line"></div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> dbConnect;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DbConnect</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// 通过静态代码块注册数据库驱动，保证注册只执行一次</span></div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">            <span class="comment">// 注册驱动有如下方式：</span></div><div class="line"></div><div class="line">            <span class="comment">// 1.通过驱动管理器注册驱动，但会注册两次，并且会对类产生依赖。如果该类不存在那就报错了。</span></div><div class="line"></div><div class="line">            <span class="comment">// DriverManager.registerDriver(newcom.mysql.jdbc.Driver());</span></div><div class="line"></div><div class="line">            <span class="comment">// 2.与3类似</span></div><div class="line"></div><div class="line">            <span class="comment">//System.setProperty("jdbc.drivers","com.mysql.jdbc.Driver");</span></div><div class="line"></div><div class="line">            Class.forName(<span class="string">"oracle.jdbc.driver.OracleDriver"</span>);<span class="comment">// 推荐使用方式</span></div><div class="line"></div><div class="line">        &#125;<span class="keyword">catch</span>(ClassNotFoundException e) &#123;</div><div class="line"></div><div class="line">            e.printStackTrace();</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// 获得连接</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">            conn = DriverManager.getConnection(url,name,password);</div><div class="line"></div><div class="line">        &#125;<span class="keyword">catch</span>(SQLException e) &#123;</div><div class="line"></div><div class="line">            e.printStackTrace();</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> conn;</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// 关闭连接</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeConnection</span><span class="params">(ResultSet rs, Statement statement, Connection con)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (rs != <span class="keyword">null</span>) &#123;</div><div class="line"></div><div class="line">                rs.close();</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;<span class="keyword">catch</span>(SQLException e) &#123;</div><div class="line"></div><div class="line">            e.printStackTrace();</div><div class="line"></div><div class="line">        &#125;<span class="keyword">finally</span>&#123;</div><div class="line"></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (statement != <span class="keyword">null</span>) &#123;</div><div class="line"></div><div class="line">                    statement.close();</div><div class="line"></div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;<span class="keyword">catch</span>(Exception e) &#123;</div><div class="line"></div><div class="line">                e.printStackTrace();</div><div class="line"></div><div class="line">            &#125;<span class="keyword">finally</span>&#123;</div><div class="line"></div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">                    <span class="keyword">if</span> (con != <span class="keyword">null</span>) &#123;</div><div class="line"></div><div class="line">                        con.close();</div><div class="line"></div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                &#125;<span class="keyword">catch</span>(SQLException e) &#123;</div><div class="line"></div><div class="line">                    e.printStackTrace();</div><div class="line"></div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>StudentDao<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDao</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(Student student)</span> </span>&#123;</div><div class="line"></div><div class="line">        Connection conn = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        PreparedStatement ps = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        ResultSet rs = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">            conn= DbConnect.getInitJDBCUtil().getConnection();</div><div class="line"></div><div class="line">            String sql = <span class="string">"insert into students(id,name,qq,age) values (?,?,?,?) "</span>;</div><div class="line"></div><div class="line">            ps= conn.prepareStatement(sql);</div><div class="line"></div><div class="line">            ps.setInt(<span class="number">1</span>,student.getId());</div><div class="line"></div><div class="line">            ps.setString(<span class="number">2</span>,student.getName());</div><div class="line"></div><div class="line">            ps.setInt(<span class="number">3</span>,student.getQq());</div><div class="line"></div><div class="line">            ps.setInt(<span class="number">4</span>,student.getAge());</div><div class="line"></div><div class="line">            ps.executeUpdate();</div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line"></div><div class="line">            DbConnect.getInitJDBCUtil().closeConnection(rs,ps, conn);</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line"></div><div class="line">        Connection conn = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        PreparedStatement ps = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        ResultSet rs = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">            conn= DbConnect.getInitJDBCUtil().getConnection();</div><div class="line"></div><div class="line">            String sql = <span class="string">"DELETE FROM students WHERE id = "</span> + id;</div><div class="line"></div><div class="line">            ps= conn.prepareStatement(sql);</div><div class="line"></div><div class="line">            <span class="comment">//ps.setInt(1,id);</span></div><div class="line"></div><div class="line"></div><div class="line">            ps.executeUpdate();</div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line"></div><div class="line">            DbConnect.getInitJDBCUtil().closeConnection(rs,ps, conn);</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(Student student)</span> </span>&#123;</div><div class="line"></div><div class="line">        Connection conn = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        PreparedStatement ps = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        ResultSet rs = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">            conn= DbConnect.getInitJDBCUtil().getConnection();</div><div class="line"></div><div class="line">            String sql = <span class="string">"update students set Age='"</span> + student.getAge() + <span class="string">"',qq='"</span> + student.getQq() + <span class="string">"',name='"</span> + student.getName() + <span class="string">"'where id='"</span> + student.getId() + <span class="string">"'"</span>;</div><div class="line"></div><div class="line">            ps= conn.prepareStatement(sql);</div><div class="line"></div><div class="line">            <span class="comment">//ps.setInt(1,id);</span></div><div class="line"></div><div class="line">            ps.executeUpdate();</div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line"></div><div class="line">            DbConnect.getInitJDBCUtil().closeConnection(rs,ps, conn);</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showUser</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        Connection conn = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        PreparedStatement ps = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        ResultSet rs = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">            conn= DbConnect.getInitJDBCUtil().getConnection();</div><div class="line"></div><div class="line">            String sql = <span class="string">"SELECT * FROM STUDENTS"</span>;</div><div class="line">            ps= conn.prepareStatement(sql);</div><div class="line"></div><div class="line">            ps.executeUpdate();</div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line"></div><div class="line">            DbConnect.getInitJDBCUtil().closeConnection(rs,ps, conn);</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里我们写了4种方法，对于增删改查<br><strong>建议每写完一句sql语句 就去测试一下</strong></p>
<p>接下来我们编写一个测试类来测试一下</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDaoTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        StudentDao studentDao = <span class="keyword">new</span> StudentDao();</div><div class="line">        studentDao.addUser(<span class="keyword">new</span> Student(<span class="number">1</span>, <span class="string">"Tom"</span>, <span class="number">1231</span>, <span class="number">3121</span>));</div><div class="line">        studentDao.addUser(<span class="keyword">new</span> Student(<span class="number">2</span>, <span class="string">"Jack"</span>, <span class="number">111111</span>, <span class="number">312221</span>));</div><div class="line">        studentDao.updateUser(<span class="keyword">new</span> Student(<span class="number">1</span>,<span class="string">"marry"</span>, <span class="number">12311</span>, <span class="number">56444</span>));</div><div class="line">        studentDao.deleteUser(<span class="number">2</span>);</div><div class="line">        studentDao.showUser();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171029170644186.png" alt=""></p>
<p>我们看到结果是我们预想的那样的<br>说明我们的增删改查都成功了</p>
<p>Oracle里是没有自增的选项的<br>所以我们要创建一个序列和触发器来实现功能。</p>
<p>创建序列：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">sequence</span> stu_seq</div><div class="line"><span class="keyword">increment</span> <span class="keyword">by</span> <span class="number">1</span></div><div class="line"><span class="keyword">start</span> <span class="keyword">with</span> <span class="number">1</span></div><div class="line"><span class="keyword">nomaxvalue</span></div><div class="line"><span class="keyword">nominvalue</span></div><div class="line">nocache;</div></pre></td></tr></table></figure></p>
<p>创建触发器：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">or</span>  <span class="keyword">replace</span> <span class="keyword">trigger</span> tr_stu</div><div class="line"><span class="keyword">before</span> <span class="keyword">insert</span> <span class="keyword">on</span> STUDENTS</div><div class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span></div><div class="line">  <span class="keyword">begin</span></div><div class="line">    <span class="keyword">select</span> stu_seq.nextval <span class="keyword">into</span> :new.id <span class="keyword">from</span> dual;</div><div class="line">  <span class="keyword">end</span>;</div></pre></td></tr></table></figure></p>
<p>运行两次测试程序，我们就发现我们的自增成功实现了<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171029174515292.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这次会归本源&lt;br&gt;采用jdbc的方式连接Oracle 并实现CURD&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171029154326706.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="jdbc" scheme="http://blog.chenwe.top/categories/jdbc/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot中Mybatis配置</title>
    <link href="http://blog.chenwe.top/2017/10/24/2017/2017-10-24%20SpringBoot%E4%B8%ADMybatis%E9%85%8D%E7%BD%AE/"/>
    <id>http://blog.chenwe.top/2017/10/24/2017/2017-10-24 SpringBoot中Mybatis配置/</id>
    <published>2017-10-24T13:30:42.176Z</published>
    <updated>2017-10-24T13:46:29.394Z</updated>
    
    <content type="html"><![CDATA[<p>上次在SpringBoot中整合Oracle和Mybatis<br>用的是Mybatis的注解方法来使用<br>这次我们用xml文件的方法来试试</p>
<p><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171024213257134.png" alt=""><br><a id="more"></a></p>
<h2 id="Mybatis配置"><a href="#Mybatis配置" class="headerlink" title="Mybatis配置"></a>Mybatis配置</h2><p>在pom.xml文件中写入<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在 <code>application.properties</code>写入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">spring.datasource.url=jdbc:mysql://localhost:3306/test?characterEncoding=utf8</div><div class="line">spring.datasource.username=root</div><div class="line">spring.datasource.password=</div><div class="line">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</div><div class="line"></div><div class="line">mybatis.mapper-locations=classpath:mapper/*.xml</div></pre></td></tr></table></figure></p>
<p>这里的<code>mybatis.mapper-locations=classpath:mapper/*.xml</code>是指一会儿我们在resources目录下要新建的mapper文件夹<br>里面存放.xml文件</p>
<p>然后新建一个实体类 Student<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">private</span> String names;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> names;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.names = name;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>再建一个StudentMapper文件<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Mapper</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentMapper</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">save</span><span class="params">(Student student)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(@Param(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id, @<span class="title">Param</span><span class="params">(<span class="string">"name"</span>)</span> String name)</span>;</div><div class="line"></div><div class="line">    <span class="function">List&lt;Student&gt; <span class="title">findAll</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在resources目录下新建一个 mapper文件夹 里面新建一个对应的 StudentMapper.xml文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" &gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.example.oracletest.mapper.StudentMapper"</span> &gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"save"</span> <span class="attr">parameterType</span>=<span class="string">"com.example.oracletest.domain.Student"</span>&gt;</span></div><div class="line">        insert into student(id,names) values(#&#123;id&#125;,#&#123;name&#125;)</div><div class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"delete"</span> <span class="attr">parameterType</span>=<span class="string">"com.example.oracletest.domain.Student"</span>&gt;</span></div><div class="line">        DELETE FROM student WHERE id=#&#123;id&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span> <span class="attr">parameterType</span>=<span class="string">"com.example.oracletest.domain.Student"</span>&gt;</span></div><div class="line">        UPDATE student set names=#&#123;name&#125; WHERE id=#&#123;id&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"com.example.oracletest.domain.Student"</span>&gt;</span></div><div class="line">        select * from student</div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>要和前面的StudentMapper.java相对应</p>
<p>然后给我们的启动类上添加注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableTransactionManagement</span></div><div class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.example.test.mapper"</span>)</div></pre></td></tr></table></figure></p>
<p>MapperScan 指定扫描的位置</p>
<p>下面我们就可以写一个测试类来单元测试了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@SpringBootTest</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OracleTestApplicationTests</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Autowired</span></div><div class="line">	<span class="keyword">private</span> StudentMapper mapper;</div><div class="line"></div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="meta">@Transactional</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span></span>&#123;</div><div class="line">		Student student = <span class="keyword">new</span> Student();</div><div class="line">		student.setName(<span class="string">"李四"</span>);</div><div class="line">		mapper.save(student);</div><div class="line">		printTable();</div><div class="line">		mapper.delete(<span class="number">1</span>);</div><div class="line">		printTable();</div><div class="line">		mapper.update(<span class="number">2</span>, <span class="string">"Jack"</span>);</div><div class="line">		printTable();</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printTable</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span> (Student s:</div><div class="line">		mapper.findAll()) &#123;</div><div class="line">			System.out.println(<span class="string">"用户信息"</span>+s.getName());</div><div class="line">		&#125;</div><div class="line">		System.out.println(<span class="string">"----------------------------"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里的<code>@Transactional</code> 注解可以让这个测试进行回滚<br>也就是每次测试完成后，对数据库的原始数据并不会有影响</p>
<p>运行测试并通过<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">用户信息张三</div><div class="line">用户信息aa</div><div class="line">用户信息李四</div><div class="line">----------------------------</div><div class="line">用户信息aa</div><div class="line">用户信息李四</div><div class="line">----------------------------</div><div class="line">用户信息Jack</div><div class="line">用户信息李四</div><div class="line">----------------------------</div></pre></td></tr></table></figure></p>
<p>这样对于 Mybatis的增删改查我们都测试成功了</p>
<p><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171024214514781.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上次在SpringBoot中整合Oracle和Mybatis&lt;br&gt;用的是Mybatis的注解方法来使用&lt;br&gt;这次我们用xml文件的方法来试试&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171024213257134.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://blog.chenwe.top/categories/SpringBoot/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>阿里云服务器Docker部署Oracle</title>
    <link href="http://blog.chenwe.top/2017/10/23/2017/2017-10-23%20%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8Docker%E9%83%A8%E7%BD%B2Oracle/"/>
    <id>http://blog.chenwe.top/2017/10/23/2017/2017-10-23 阿里云服务器Docker部署Oracle/</id>
    <published>2017-10-23T08:16:55.870Z</published>
    <updated>2017-10-23T08:54:21.425Z</updated>
    
    <content type="html"><![CDATA[<p>上次在自己的电脑上装Oracle<br>装了很久，而且用起来很卡，十分占资源，配置起来也很麻烦<br>于是打算用阿里云的服务器来装Oracle 远程使用<br>为了简化配置，所以用Docker来部署</p>
<p><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171023162041418.png" alt=""><br><a id="more"></a></p>
<h2 id="在Ubuntu上安装Docker服务"><a href="#在Ubuntu上安装Docker服务" class="headerlink" title="在Ubuntu上安装Docker服务"></a>在Ubuntu上安装Docker服务</h2><p>我这里服务器用的是Ubuntu 14系统<br>我用apt-get的方式来安装Docker服务</p>
<p>输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install docker.io</div></pre></td></tr></table></figure></p>
<p>中间让你确认，就输入 Y</p>
<p>安装完成后输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker version</div></pre></td></tr></table></figure></p>
<p>出现如下字样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Client version: 1.6.2</div><div class="line">Client API version: 1.18</div><div class="line">Go version (client): go1.2.1</div><div class="line">Git commit (client): 7c8fca2</div><div class="line">OS/Arch (client): linux/amd64</div><div class="line">Server version: 1.6.2</div><div class="line">Server API version: 1.18</div><div class="line">Go version (server): go1.2.1</div><div class="line">Git commit (server): 7c8fca2</div><div class="line">OS/Arch (server): linux/amd64</div></pre></td></tr></table></figure></p>
<p>就代表安装完成了<br>docker 的详细 可以查看这里<a href="https://docs.docker.com/" target="_blank" rel="external">Docker文档</a></p>
<h2 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h2><p>因为用的是阿里云服务器<br>位于国内<br>所以为了加快下载速度，同时防止下载失败<br>所以我这里选用 阿里云的<a href="https://dev.aliyun.com/search.html" target="_blank" rel="external">容器Hub</a>来下载镜像<br>我这里安装的Oracle容器是 <a href="https://dev.aliyun.com/detail.html?spm=5176.1972343.2.2.193eeedbr2a2iL&amp;repoId=1969" target="_blank" rel="external">helowin/oracle_11g</a>的容器</p>
<p>因为这个容器较大（有近7个G）<br>下载要耗费很多时间<br>所以我选择挂在后台下载<br>输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nohup docker pull registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g &amp;</div></pre></td></tr></table></figure></p>
<p>nohup 使得它即使退出中端也会继续下载， &amp;  让他保持在后台运行</p>
<p>等了足够长的一段时间后<br>我们输入命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">root@iZwz97zhk0psfzbsaxakxzZ:~# docker images</div><div class="line">REPOSITORY                                             TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</div><div class="line">registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g   latest              0c8d2ee3b120        21 months ago       6.849 GB</div></pre></td></tr></table></figure></p>
<p>查看我们本地拥有的镜像容器<br>我们看到我们已经拥有了一个 6.8G的镜像了</p>
<h2 id="运行与配置Docker里的Oracle"><a href="#运行与配置Docker里的Oracle" class="headerlink" title="运行与配置Docker里的Oracle"></a>运行与配置Docker里的Oracle</h2><p>输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -d -p 1521:1521 --name oracle_11g registry.aliyuncs.com/helowin/oracle_11g</div></pre></td></tr></table></figure></p>
<p>这里我将端口从里面的 1521 映射到 外部的1521端口<br>等待一段时间<br>输入 <code>docker ps</code> 查看docker的运行情况<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">root@iZwz97zhk0psfzbsaxakxzZ:~# docker ps</div><div class="line">CONTAINER ID        IMAGE                                             COMMAND                CREATED             STATUS              PORTS                    NAMES</div><div class="line">00bcc1c3577f        registry.aliyuncs.com/helowin/oracle_11g:latest   &quot;/bin/sh -c &apos;/home/o   3 hours ago         Up 3 hours          0.0.0.0:1521-&gt;1521/tcp   oracle_11g</div></pre></td></tr></table></figure></p>
<p>进入容器： <code>docker exec -it 容器ID /bin/bash</code><br>这里的容器ID是 <code>00bcc1c3577f</code></p>
<p>进入之后我们输入 <code>sqlplus</code> 是没有反应的<br>因为权限不够<br>所以我们输入<code>su root</code><br>获取root权限 密码是 helowin</p>
<p>获取到root权限后<br>输入 <code>vi /etc/profile</code>并在文件最后添加如下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">export ORACLE_HOME=/home/oracle/app/oracle/product/11.2.0/dbhome_2</div><div class="line">export ORACLE_SID=helowin</div><div class="line">export PATH=$ORACLE_HOME/bin:$PATH</div></pre></td></tr></table></figure></p>
<p>退出并保存</p>
<p>输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ln -s $ORACLE_HOME/bin/sqlplus /usr/bin</div></pre></td></tr></table></figure></p>
<p>来连接软件</p>
<p>然后 输入 <code>su - oracle</code> 切换成 Oracle用户<br>再登录sqlplus 输入<br><code>sqlplus /nolog</code><br><code>conn /as sysdba</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[oracle@00bcc1c3577f ~]$ sqlplus /nolog</div><div class="line"></div><div class="line">SQL*Plus: Release 11.2.0.1.0 Production on Mon Oct 23 13:13:00 2017</div><div class="line"></div><div class="line">Copyright (c) 1982, 2009, Oracle.  All rights reserved.</div><div class="line"></div><div class="line">SQL&gt; conn /as sysdba</div><div class="line">Connected.</div></pre></td></tr></table></figure></p>
<p>成后之后来执行下面的命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">alter user system identified by oracle;</div><div class="line">alter user sys identified by oracle;</div><div class="line">ALTER PROFILE DEFAULT LIMIT PASSWORD_LIFE_TIME UNLIMITED;</div></pre></td></tr></table></figure>
<p>我们把 system 和 sys的密码都定义成 oracle了</p>
<p>我们下面可以新建一个用户<br>输入以下命令查看我们用户空间的路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">SQL&gt; select name from v$datafile;</div><div class="line"></div><div class="line">NAME</div><div class="line">--------------------------------------------------------------------------------</div><div class="line">/home/oracle/app/oracle/oradata/helowin/system01.dbf</div><div class="line">/home/oracle/app/oracle/oradata/helowin/sysaux01.dbf</div><div class="line">/home/oracle/app/oracle/oradata/helowin/undotbs01.dbf</div><div class="line">/home/oracle/app/oracle/oradata/helowin/users01.dbf</div><div class="line">/home/oracle/app/oracle/oradata/helowin/example01.dbf</div></pre></td></tr></table></figure></p>
<p>我们看到我们的用户空间位于<code>/home/oracle/app/oracle/oradata/helowin/</code>下<br>所以我们可以创建新用户按照以下步骤<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">SQL&gt; create tablespace myspace datafile &apos;/home/oracle/app/oracle/oradata/helowin/myspace.dbf&apos; size 15M;</div><div class="line"></div><div class="line">Tablespace created.</div><div class="line"></div><div class="line">SQL&gt; create user me identified by mypassword default tablespace myspace;</div><div class="line"></div><div class="line">User created.</div><div class="line"></div><div class="line">SQL&gt; grant dba,connect to me;</div><div class="line"></div><div class="line">Grant succeeded.</div></pre></td></tr></table></figure></p>
<p>这样我们就创建了一个名为 <code>myspace.dbf</code>的用户空间<br>创建了一个名为 <code>me</code>的用户，密码是 mypassword ,用户空间是myspace<br>并赋予了 dba 和 connect权限</p>
<p>下面我们就可以通过  <code>SQL Developer</code>工具来连接了<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171023165301584.png" alt=""></p>
<p>这样我们就能远程连接我们在阿里云上的 Oracle数据库了</p>
<p><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171023165411222.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上次在自己的电脑上装Oracle&lt;br&gt;装了很久，而且用起来很卡，十分占资源，配置起来也很麻烦&lt;br&gt;于是打算用阿里云的服务器来装Oracle 远程使用&lt;br&gt;为了简化配置，所以用Docker来部署&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171023162041418.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://blog.chenwe.top/categories/Docker/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot整合Oracle与Mybatis</title>
    <link href="http://blog.chenwe.top/2017/10/21/2017/2017-10-21%20SpringBoot%E6%95%B4%E5%90%88Oracle%E4%B8%8EMybatis/"/>
    <id>http://blog.chenwe.top/2017/10/21/2017/2017-10-21 SpringBoot整合Oracle与Mybatis/</id>
    <published>2017-10-21T11:01:53.362Z</published>
    <updated>2017-10-21T11:47:55.521Z</updated>
    
    <content type="html"><![CDATA[<p>之前用的都是Mysql来做数据库 spring data jpa来实现持久层<br>这次来试试Oracle 和 Mybatis<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171021190838349.png" alt=""><br><a id="more"></a></p>
<h2 id="Oracle的驱动的安装"><a href="#Oracle的驱动的安装" class="headerlink" title="Oracle的驱动的安装"></a>Oracle的驱动的安装</h2><p>创建玩SpringBoot项目后<br>我们要把驱动也安装下<br>推荐用官方自带的驱动<br>位置在安装的目录下 <code>product\12.1.0\dbhome_1\jdbc\lib</code>里<br>里面的 <code>ojdbc6.jar</code>是JDK6的驱动<br>因为我现在的项目是JDK8的，所以我们要用<code>ojdbc7.jar</code>这个文件<br>打开IDEA -&gt; File -&gt; project Structure -&gt; Libraries 新建一个JAVA的依赖<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-2017102119152955.png" alt=""><br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171021191606391.png" alt=""><br>选中我们刚刚找到的<code>ojdbc7.jar</code> 文件</p>
<p>在pom.xml中写入<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oracle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ojdbc7<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="Oracle配置"><a href="#Oracle配置" class="headerlink" title="Oracle配置"></a>Oracle配置</h2><p>在application.properties 中写入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">spring.jpa.database=oracle</div><div class="line">spring.datasource.driver-class-name=oracle.jdbc.driver.OracleDriver</div><div class="line">spring.datasource.url=jdbc:oracle:thin:@localhost:1521:orcl</div><div class="line">spring.datasource.username=c##ccww</div><div class="line">spring.datasource.password=ccww</div><div class="line">spring.jpa.hibernate.ddl-auto=update</div></pre></td></tr></table></figure></p>
<p>开启Oracle服务后<br>运行一下SpringBoot 项目，如果没有报错，说明我们Oracle成功配置</p>
<h2 id="整合Mybatis"><a href="#整合Mybatis" class="headerlink" title="整合Mybatis"></a>整合Mybatis</h2><p>在pom.xml文件中写入<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>我们还写了一个测试相关的东西，为了方便等下的测试<br>在application.properties 中写入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mybatis.typeAliasesPackage=com.example.oracletest.domain</div></pre></td></tr></table></figure></p>
<p>指明实体类的所在文件夹</p>
<p>下面我们编写一个实体类Users.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Users</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Integer id;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>创建一个 mapper文件夹，用来存放Mybatis 的mapper文件<br>在这个文件夹下新建一个 UsersMapper.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Repository</span></div><div class="line"><span class="meta">@Mapper</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UsersMapper</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Insert</span>(<span class="string">"INSERT INTO Users(id, name) VALUES(#&#123;id&#125;, #&#123;name&#125;)"</span>)</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addUser</span><span class="params">(@Param(<span class="string">"id"</span>)</span> Integer id, @<span class="title">Param</span><span class="params">(<span class="string">"name"</span>)</span> String name)</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Delete</span>(<span class="string">"delete from Users where id=#&#123;id&#125;"</span>)</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteByUserId</span><span class="params">(@Param(<span class="string">"id"</span>)</span> Integer id)</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Update</span>(<span class="string">"update Users set name=#&#123;name&#125; where id=#&#123;id&#125;"</span>)</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(@Param(<span class="string">"id"</span>)</span> Integer id, @<span class="title">Param</span><span class="params">(<span class="string">"name"</span>)</span> String name)</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Select</span>(<span class="string">"SELECT * FROM Users"</span>)</div><div class="line">    <span class="meta">@Results</span>(&#123;</div><div class="line">            <span class="meta">@Result</span>(property = <span class="string">"id"</span>,  column = <span class="string">"id"</span>),</div><div class="line">            <span class="meta">@Result</span>(property = <span class="string">"name"</span>, column = <span class="string">"name"</span>)</div><div class="line">    &#125;)</div><div class="line">    <span class="function">List&lt;Users&gt; <span class="title">findAll</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们事先在数据库中新建一个Users的表，有id和name字段<br>并且先放入少量测试数据</p>
<p>我们还要再启动类中添加注解 <code>@MapperScan(&quot;com.example.oracletest.Mapper&quot;)</code><br>来指明mapper的所在文件夹<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.example.oracletest.Mapper"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OracleTestApplication</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		SpringApplication.run(OracleTestApplication.class, args);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样我们的Mybatis就整合好了<br>下面我们来测试下</p>
<p>我们在测试的文件夹下新建一个测试<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@SpringBootTest</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OracleTestApplicationTests</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Autowired</span></div><div class="line">	<span class="keyword">private</span> UsersMapper usersMapper;</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MybatisTest</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="comment">//查询用户表所有数据</span></div><div class="line">		printUserList();</div><div class="line"></div><div class="line">		<span class="comment">//插入新数据</span></div><div class="line">		usersMapper.addUser(<span class="number">3</span>,<span class="string">"Jack"</span>);</div><div class="line">		printUserList();</div><div class="line"></div><div class="line">		<span class="comment">//删除数据</span></div><div class="line">		usersMapper.deleteByUserId(<span class="number">2</span>);</div><div class="line">		printUserList();</div><div class="line"></div><div class="line">		<span class="comment">//修改数据</span></div><div class="line">		usersMapper.updateUser(<span class="number">1</span>, <span class="string">"Chen"</span>);</div><div class="line">		printUserList();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printUserList</span><span class="params">()</span> </span>&#123;</div><div class="line">		List&lt;Users&gt; usersList = usersMapper.findAll();</div><div class="line">		<span class="keyword">for</span> (Users user:</div><div class="line">				usersList) &#123;</div><div class="line">			System.out.println(<span class="string">"User ID = "</span> + user.getId());</div><div class="line">			System.out.println(<span class="string">"User name = "</span> + user.getName());</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		System.out.println(<span class="string">"--------------------------"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们来测试一下是否能够成功对数据库进行增删改查<br>右键 Run MybatisTest()<br>我这里成功获取了数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">User ID = 2</div><div class="line">User name = Marry</div><div class="line">User ID = 1</div><div class="line">User name = Tom</div><div class="line">--------------------------</div><div class="line">User ID = 2</div><div class="line">User name = Marry</div><div class="line">User ID = 3</div><div class="line">User name = Jack</div><div class="line">User ID = 1</div><div class="line">User name = Tom</div><div class="line">--------------------------</div><div class="line">User ID = 3</div><div class="line">User name = Jack</div><div class="line">User ID = 1</div><div class="line">User name = Tom</div><div class="line">--------------------------</div><div class="line">User ID = 3</div><div class="line">User name = Jack</div><div class="line">User ID = 1</div><div class="line">User name = Chen</div><div class="line">--------------------------</div></pre></td></tr></table></figure></p>
<p>增删改查都成功实现了<br>说明我们成功整合了Mybatis 并使用</p>
<p><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171021194754903.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前用的都是Mysql来做数据库 spring data jpa来实现持久层&lt;br&gt;这次来试试Oracle 和 Mybatis&lt;br&gt;&lt;img src=&quot;http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171021190838349.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://blog.chenwe.top/categories/SpringBoot/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>Oracle的安装与新用户的创建</title>
    <link href="http://blog.chenwe.top/2017/10/21/2017/2017-10-21%20Oracle%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E6%96%B0%E7%94%A8%E6%88%B7%E7%9A%84%E5%88%9B%E5%BB%BA/"/>
    <id>http://blog.chenwe.top/2017/10/21/2017/2017-10-21 Oracle的安装与新用户的创建/</id>
    <published>2017-10-21T08:42:15.276Z</published>
    <updated>2017-10-21T11:45:17.438Z</updated>
    
    <content type="html"><![CDATA[<p>之前用的都是Mysql来做数据库<br>这次来试试Oracle<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-2017102118360441.png" alt=""><br><a id="more"></a></p>
<h2 id="Oracle的安装"><a href="#Oracle的安装" class="headerlink" title="Oracle的安装"></a>Oracle的安装</h2><p>我这里使用的是Oracle 12c版本<br>在<a href="https://www.oracle.com/cn/database/index.html" target="_blank" rel="external">官方下载地址</a><br>里将两个压缩文件都下载过来<br>将这两个文件都解压出来<br>将<code>winx64_12102_database_2of2</code>里的stage 文件<br>与<code>winx64_12102_database_1of2</code>里的stage文件合并<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171021184009746.png" alt=""></p>
<p>然后点击setup 安装Oracle<br>具体的安装方法可以参考<a href="http://www.cnblogs.com/soraka/p/5855724.html" target="_blank" rel="external">这篇博客</a><br>安装过程十分的慢，请耐心等待</p>
<h2 id="启动Oracle服务"><a href="#启动Oracle服务" class="headerlink" title="启动Oracle服务"></a>启动Oracle服务</h2><p>我们首先要启动Oracle的服务<br>右键我的电脑 -&gt; 管理 -&gt; 服务和应用程序 -&gt; 服务<br>里面找到 <code>OracleServiceORCL</code> 和 <code>OracleOraDB12Home1TNSListener</code><br>选中后右键点击启动 来启动服务</p>
<h2 id="Oracle创建新用户与权限设置"><a href="#Oracle创建新用户与权限设置" class="headerlink" title="Oracle创建新用户与权限设置"></a>Oracle创建新用户与权限设置</h2><p>打开cmd<br>输入 <code>sqlplus</code><br>输入用户名和密码（安装的时候已经设置了）<br>出现如下界面代表成功了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">λ sqlplus</div><div class="line"></div><div class="line">SQL*Plus: Release 12.1.0.2.0 Production on 星期六 10月 21 15:42:13 2017</div><div class="line"></div><div class="line">Copyright (c) 1982, 2014, Oracle.  All rights reserved.</div><div class="line"></div><div class="line">请输入用户名:  system</div><div class="line">输入口令:</div><div class="line">上次成功登录时间: 星期六 10月 21 2017 15:41:23 +08:00</div><div class="line"></div><div class="line">连接到:</div><div class="line">Oracle Database 12c Enterprise Edition Release 12.1.0.2.0 - 64bit Production</div><div class="line">With the Partitioning, OLAP, Advanced Analytics and Real Application Testing options</div><div class="line"></div><div class="line">SQL&gt;</div></pre></td></tr></table></figure></p>
<p>下面我们创建一个表空间给新的用户<br>输入<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">SQL&gt; create tablespace stusys</div><div class="line">  2  datafile 'f:\app\stuysy.dbf'</div><div class="line">  3  size 10M;</div><div class="line"></div><div class="line">  表空间已创建。</div></pre></td></tr></table></figure></p>
<p>这里我们创建了一个 名为  <code>stusys</code>的表空间，位于f盘的app目录下，大小10M</p>
<p>下面我们创建一个新用户<br>输入<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">SQL&gt; create user c##ccww</div><div class="line">  2  identified by ccww</div><div class="line">  3  default tablespace stusys</div><div class="line">  4  temporary tablespace temp;</div><div class="line"></div><div class="line">  用户已创建。</div></pre></td></tr></table></figure></p>
<p>这里我们创建了一个名为c##ccww的用户<br><strong>在Oracle 12c版本里，创建新用户必须以c##开头</strong></p>
<p>下面我们给他添加权限<br>输入<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">SQL&gt; grant connect to c##ccww</div><div class="line"></div><div class="line">授权成功。</div><div class="line"></div><div class="line">SQL&gt; grant resource to c##ccww;</div><div class="line"></div><div class="line">授权成功。</div><div class="line"></div><div class="line">SQL&gt; alter user c##ccww default tablespace stusys;</div><div class="line"></div><div class="line">用户已更改。</div><div class="line"></div><div class="line">SQL&gt; grant unlimited tablespace to c##ccww;</div><div class="line"></div><div class="line">授权成功。</div></pre></td></tr></table></figure></p>
<p>我们还为他设置了用户空间</p>
<p>这样我们新用户就创建好了</p>
<h2 id="登录Sql-Developer"><a href="#登录Sql-Developer" class="headerlink" title="登录Sql Developer"></a>登录Sql Developer</h2><p>打开我们在安装Oracle的时候安装的 <code>Sql Developer</code>工具<br>这个是Oracle图形管理界面</p>
<p>输入刚刚的用户名密码<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171021185629533.png" alt=""><br>点击连接</p>
<p>这样我们成功登录了<br>下面我们可以选择表 来创建一个表了<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171021185720264.png" alt=""></p>
<p>这样，我们就完成了Oracle的安装与用户配置<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171021185750824.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前用的都是Mysql来做数据库&lt;br&gt;这次来试试Oracle&lt;br&gt;&lt;img src=&quot;http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-2017102118360441.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Oracle" scheme="http://blog.chenwe.top/categories/Oracle/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>理解Java的继承与多态</title>
    <link href="http://blog.chenwe.top/2017/10/15/2017/2017-10-15%20%E7%90%86%E8%A7%A3JAVA%E7%9A%84%E7%BB%A7%E6%89%BF%E4%B8%8E%E5%A4%9A%E6%80%81/"/>
    <id>http://blog.chenwe.top/2017/10/15/2017/2017-10-15 理解JAVA的继承与多态/</id>
    <published>2017-10-15T12:48:34.382Z</published>
    <updated>2017-10-16T08:20:54.785Z</updated>
    
    <content type="html"><![CDATA[<p>很多人其实只是粗略的过了一遍Java的知识点<br>基础并不扎实<br>虽然一开始的时候不会发现有什么弊端<br>但是随着工作的深入，对于基础的要求更加重要了</p>
<p>这里我来稍微总结下Java的继承与多态中需要注意的地方<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171015214220622.png" alt=""><br><a id="more"></a></p>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承可以提高代码复用<br>继承有下面几个特点</p>
<ul>
<li><p>1、子类拥有父类非 private 的属性和方法。</p>
</li>
<li><p>2、子类可以拥有自己属性和方法，即子类可以对父类进行扩展。</p>
</li>
<li><p>3、子类可以用自己的方式实现父类的方法。</p>
</li>
</ul>
<p>下面来介绍下向上转型<br>假如我们有两个类 <code>Wine.java</code> 和 <code>WhiteWine.java</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wine</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">one</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Wine one"</span>);</div><div class="line">        two();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">two</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Wine two"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WhiteWine</span> <span class="keyword">extends</span> <span class="title">Wine</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">one</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"WhiteWine one"</span>);</div><div class="line">        two();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">two</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"WhiteWine two"</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>WhiteWine 继承自 Wine<br>重载了one方法<br>重写了two方法</p>
<p>我们编写一个测试类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Wine wine = <span class="keyword">new</span> WhiteWine();</div><div class="line">        wine.one();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们将<code>WhiteWine</code>这个子类向上转型为<code>Wine</code>这个父类<br>但是子类中被重载的方法会丢失<br>我们运行上面的测试类，可以得到如下结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Wine one</div><div class="line">WhiteWine two</div></pre></td></tr></table></figure></p>
<p>在运行的时候，因为向上转型的关系，丢失了子类的<code>one(int i)</code>方法<br>所以调用了父类的<code>one()</code>方法<br>在 <code>one()</code>  方法中又要调用<code>two()</code>方法<br>因为子类重写亏了 <code>two()</code> 方法，所以再调用子类的 <code>two()</code>方法</p>
<p>所以继承的时候用向上转型，会丢失部分方法与属性</p>
<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>假如我们有三个类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(C obj)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (<span class="string">"A and C"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(A obj)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (<span class="string">"A and A"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(B obj)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> (<span class="string">"B and B"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(A obj)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> (<span class="string">"B and A"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>B 继承 A， C 继承 B<br>我们编写一个测试类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ABCDtest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        A a = <span class="keyword">new</span> B();</div><div class="line">        B b = <span class="keyword">new</span> B();</div><div class="line">        C c = <span class="keyword">new</span> C();</div><div class="line">        System.out.println(a.show(b));</div><div class="line">        System.out.println(a.show(c));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们运行测试类<br>得到以下结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">B and A</div><div class="line">A and C</div></pre></td></tr></table></figure></p>
<p>我们分析一下<br>因为在继承链中对象方法的调用存在一个优先级：this.show(O)、super.show(O)、this.show((super)O)、super.show((super)O)</p>
<p>所以在运行的时候<br>我们调用了一个由B向上转型的A类的方法show(O)<br>并且传入一个b的对象<br>因为优先级的关系<br>所以他会先去找 this.show(O) 里面有没有这个方法<br>这里的 this 就是 A<br>在A对象中并没有以 B为传入参数的show方法</p>
<p>所以我们去找下一个 super.show(O)方法<br>因为A没有父类<br>所以也没有</p>
<p>然后我们去找下一个 this.show((super)O)<br>这里 我们发现 B的父类是A<br>所以 这里相当于 A.show(A) 在A类中有<br>又因为B重写了A里的 show(A)方法<br>所以系统会调用 B类里的 show(A) 方法</p>
<p>于是就打出了 <code>B and A</code>这行</p>
<p>然后执行a.show(c)<br>因为 A类里有 show(C) 方法 且子类没有重写<br>所以直接执行并打印 <code>A and C</code></p>
<p><strong>这里是不是有点绕</strong><br>但其实自己去动手写下就很好理解了<br>一开始我也模模糊糊的<br>但是自己写了下，就很好理解了，主要是要自己亲自动手去做<br>慢慢来吧<br>部分代码参考自 <a href="http://wiki.jikexueyuan.com/project/java-enhancement/java-three.html" target="_blank" rel="external">此教程</a><br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171015213944524.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很多人其实只是粗略的过了一遍Java的知识点&lt;br&gt;基础并不扎实&lt;br&gt;虽然一开始的时候不会发现有什么弊端&lt;br&gt;但是随着工作的深入，对于基础的要求更加重要了&lt;/p&gt;
&lt;p&gt;这里我来稍微总结下Java的继承与多态中需要注意的地方&lt;br&gt;&lt;img src=&quot;http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171015214220622.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://blog.chenwe.top/categories/Java/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
</feed>
