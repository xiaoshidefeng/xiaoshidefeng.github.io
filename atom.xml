<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xiaoshidefeng的博客</title>
  <subtitle>一个计算机本科生</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.chenwe.top/"/>
  <updated>2017-12-09T09:23:29.017Z</updated>
  <id>http://blog.chenwe.top/</id>
  
  <author>
    <name>ChenWei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>OKhttp的使用</title>
    <link href="http://blog.chenwe.top/2017/12/03/2017/2017-12-03%20OKhttp%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://blog.chenwe.top/2017/12/03/2017/2017-12-03 OKhttp的使用/</id>
    <published>2017-12-03T14:24:58.545Z</published>
    <updated>2017-12-09T09:23:29.017Z</updated>
    
    <content type="html"><![CDATA[<p>以前在写Android项目的时候<br>遇到网络访问方面的内容<br>总是用原生的方法去访问网络<br>十分麻烦而且代码冗杂</p>
<p>但是用框架就方便许多了<br>这里简单介绍下OKhttp的使用<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171203222856395.png" alt=""><br><a id="more"></a><br>这次对plus Android端进行了重构<br>首先就从网络访问这块改起</p>
<h2 id="Gradle-依赖"><a href="#Gradle-依赖" class="headerlink" title="Gradle 依赖"></a>Gradle 依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    testCompile &apos;com.squareup.okhttp3:mockwebserver:3.9.1&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>添加完依赖就可以开始搞事了</p>
<h2 id="访问网络"><a href="#访问网络" class="headerlink" title="访问网络"></a>访问网络</h2><p>Get方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getComments</span><span class="params">()</span> </span>&#123;</div><div class="line">    Request request = <span class="keyword">new</span> Request.Builder().url(<span class="string">"你的url"</span>).build();</div><div class="line">    client.newCall(request).enqueue(<span class="keyword">new</span> Callback() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">            Message msg = <span class="keyword">new</span> Message();</div><div class="line">            msg.what = <span class="number">1</span>;</div><div class="line">            msg.obj = response.body().string();</div><div class="line">            myHandler.sendMessage(msg);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Post方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendComment</span><span class="params">()</span> </span>&#123;</div><div class="line">    RequestBody body = <span class="keyword">new</span> FormBody.Builder()</div><div class="line">            .add(<span class="string">"body"</span>, content)<span class="comment">//添加键值对</span></div><div class="line">            .add(<span class="string">"discussion_id"</span>, Id + <span class="string">""</span>)</div><div class="line">            .build();</div><div class="line">    Request request = <span class="keyword">new</span> Request.Builder()</div><div class="line">            .url(<span class="string">"你的url"</span>)</div><div class="line">            .post(body)</div><div class="line">            .build();</div><div class="line">    client.newCall(request).enqueue(<span class="keyword">new</span> Callback() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">            Message msg = <span class="keyword">new</span> Message();</div><div class="line">            msg.what = <span class="number">2</span>;</div><div class="line">            msg.obj = response.body().string();</div><div class="line">            myHandler.sendMessage(msg);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们这里成功访问网络后，通过 <code>onResponse</code> 来执行<br>如果失败，则执行 <code>onFailure</code></p>
<h2 id="更新UI"><a href="#更新UI" class="headerlink" title="更新UI"></a>更新UI</h2><p>这里讲下用Handler的方法<br>为了防止内存泄漏，所以我们要使用内部静态Handler类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> Handler myHandler;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    myHandler = <span class="keyword">new</span> MyHandler(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 内部静态Handler 类 防止内存泄漏</div><div class="line"> */</div><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">    WeakReference&lt;YourActivity&gt; mActivityReference;</div><div class="line"></div><div class="line">    MyHandler(YourActivity activity) &#123;</div><div class="line">        mActivityReference = <span class="keyword">new</span> WeakReference&lt;YourActivity&gt;(activity);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">        YourActivity activity = mActivityReference.get();</div><div class="line">          <span class="keyword">if</span> (msg.what == <span class="number">1</span>) &#123;</div><div class="line">            <span class="comment">//TODO 修改UI</span></div><div class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (msg.what == <span class="number">2</span>) &#123;</div><div class="line">            <span class="comment">//TODO 修改UI</span></div><div class="line">          &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在onCreat方法里new一个myHandler后<br>就可以使用了</p>
<p>这样就不会造成内存泄漏了，而且也能够修改UI</p>
<p>以上就是OKhttp的简单使用了<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171209172147497.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以前在写Android项目的时候&lt;br&gt;遇到网络访问方面的内容&lt;br&gt;总是用原生的方法去访问网络&lt;br&gt;十分麻烦而且代码冗杂&lt;/p&gt;
&lt;p&gt;但是用框架就方便许多了&lt;br&gt;这里简单介绍下OKhttp的使用&lt;br&gt;&lt;img src=&quot;http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171203222856395.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://blog.chenwe.top/categories/Android/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot使用properties配置文件实现多环境配置</title>
    <link href="http://blog.chenwe.top/2017/11/13/2017/2017-11-19%20SpringBoot%E4%BD%BF%E7%94%A8properties%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>http://blog.chenwe.top/2017/11/13/2017/2017-11-19 SpringBoot使用properties配置文件实现多环境配置/</id>
    <published>2017-11-13T05:31:27.820Z</published>
    <updated>2017-11-19T08:10:17.126Z</updated>
    
    <content type="html"><![CDATA[<p>我们在编写项目的时候<br>总是会有线上环境与线下环境<br>其中有些东西是不一样的，比如本地文件路径与线上文件路径之类的<br>但是每次打包都要去手动修改各个地方，十分麻烦也很容易出错<br>所以这次我们使用properties配置文件实现多环境配置<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171113133918221.png" alt=""><br><a id="more"></a></p>
<h2 id="多环境配置"><a href="#多环境配置" class="headerlink" title="多环境配置"></a>多环境配置</h2><p>在application.properties 的同级目录下创建三个配置文件<br>分别为：<br>application-dev.properties  线下环境<br>application-pro.properties  线上环境<br>application-test.properties  测试环境</p>
<p>假如我们需要根据不同的环境，来配置不同的默认文件夹<br>我们可以这样写</p>
<p>application.properties<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">spring.profiles.active=pro</div><div class="line"></div><div class="line">spring.mvc.static-path-pattern=/**</div><div class="line">spring.resources.static-locations=classpath:/META-INF/resources/,classpath:/resources/,\</div><div class="line">  classpath:/static/,classpath:/public/,file:$&#123;config.me.fileroot&#125;</div></pre></td></tr></table></figure></p>
<p>application-dev.properties<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#线下环境</div><div class="line">config.me.fileroot=h:/</div><div class="line">config.me.host=localhost</div></pre></td></tr></table></figure></p>
<p>application-pro.properties<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#线上环境</div><div class="line">config.me.fileroot=/home/cw/cloud/cloudspace/</div><div class="line">config.me.host=10.30.90.16</div></pre></td></tr></table></figure></p>
<p>根据 application.properties 里的 <code>spring.profiles.active=</code>的不同<br>来使用不同的配置文件<br>这里我们是 pro 也就是线上环境，所以他会加载<code>application-pro.properties</code> 里的内容<br>当然，application.properties里的内容它也会加载<br>如果两个配置文件里有内容有冲突的话，以指定的配置文件优先</p>
<p>这样在每次发布项目的时候，就不用去改那么多东西了。<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171119161004815.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们在编写项目的时候&lt;br&gt;总是会有线上环境与线下环境&lt;br&gt;其中有些东西是不一样的，比如本地文件路径与线上文件路径之类的&lt;br&gt;但是每次打包都要去手动修改各个地方，十分麻烦也很容易出错&lt;br&gt;所以这次我们使用properties配置文件实现多环境配置&lt;br&gt;&lt;img src=&quot;http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171113133918221.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://blog.chenwe.top/categories/SpringBoot/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>基于机器学习的DeepVideoAnalytics开源视频检索工具的安装与简单使用</title>
    <link href="http://blog.chenwe.top/2017/11/05/2017/2017-11-05%20%E5%9F%BA%E4%BA%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84DeepVideoAnalytics%E5%BC%80%E6%BA%90%E8%A7%86%E9%A2%91%E6%A3%80%E7%B4%A2%E5%B7%A5%E5%85%B7%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>http://blog.chenwe.top/2017/11/05/2017/2017-11-05 基于机器学习的DeepVideoAnalytics开源视频检索工具的安装与简单使用/</id>
    <published>2017-11-05T07:21:32.586Z</published>
    <updated>2017-11-05T09:04:29.692Z</updated>
    
    <content type="html"><![CDATA[<p>DeepVideoAnalytics是一款强大的开源视频检索工具<br>这是<a href="https://github.com/AKSHAYUBHAT/DeepVideoAnalytics" target="_blank" rel="external">它的项目地址</a><br>今天来讲下他的安装与简单使用<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171105153108742.png" alt=""><br><a id="more"></a></p>
<h2 id="它的架构，数据和处理模型"><a href="#它的架构，数据和处理模型" class="headerlink" title="它的架构，数据和处理模型"></a>它的架构，数据和处理模型</h2><p><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171105153720957.png" alt=""><br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171105153744149.png" alt=""><br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171105153748958.png" alt=""></p>
<h3 id="他用到的库"><a href="#他用到的库" class="headerlink" title="他用到的库"></a>他用到的库</h3><ul>
<li>FFmpeg (not linked, called via a Subprocess)</li>
<li>Tensorflow</li>
<li>OpenCV</li>
<li>Numpy</li>
<li>Pytorch</li>
<li>Nvidia-docker</li>
<li>Docker-compose</li>
<li>All packages in requirements.txt &amp; used in Dockerfiles.</li>
</ul>
<h1 id="安装与使用"><a href="#安装与使用" class="headerlink" title="安装与使用"></a>安装与使用</h1><h2 id="服务器的选择"><a href="#服务器的选择" class="headerlink" title="服务器的选择"></a>服务器的选择</h2><p>这里我们采用docker 安装部署<br>因为镜像有点大，所以我们选用外国的 vultr来做我们的服务器<br>用<a href="https://www.vultr.com/?ref=7150491" target="_blank" rel="external">这个地址</a>注册可以获得优惠，充多少送多少</p>
<p>这里有一点要注意<br>因为这个东西有点庞大，所以对服务器的性能要求也是比较大的<br>这里推荐用 ubuntu 16.04 x64的系统<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171105154448431.png" alt="">配置的</p>
<h2 id="服务器安装部署"><a href="#服务器安装部署" class="headerlink" title="服务器安装部署"></a>服务器安装部署</h2><p>启动完服务器后，我们通过ssh远程连接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">λ ssh root@45.77.182.142</div><div class="line">The authenticity of host &apos;45.77.182.142 (45.77.182.142)&apos; can&apos;t be established.</div><div class="line">ECDSA key fingerprint is SHA256:DoHFnM4S93wKowhvmLcMHbq8WNzbER+dfd3KuMRIq4k.</div><div class="line">Are you sure you want to continue connecting (yes/no)? yes</div><div class="line">Warning: Permanently added &apos;45.77.182.142&apos; (ECDSA) to the list of known hosts.</div><div class="line">root@45.77.182.142&apos;s password:</div><div class="line">Welcome to Ubuntu 16.04.2 LTS (GNU/Linux 4.4.0-87-generic x86_64)</div><div class="line"></div><div class="line"> * Documentation:  https://help.ubuntu.com</div><div class="line"> * Management:     https://landscape.canonical.com</div><div class="line"> * Support:        https://ubuntu.com/advantage</div><div class="line"></div><div class="line">94 packages can be updated.</div><div class="line">30 updates are security updates.</div><div class="line"></div><div class="line"></div><div class="line">root@vultr:~#</div></pre></td></tr></table></figure></p>
<p>下面安装 wget工具<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install wget</div></pre></td></tr></table></figure></p>
<p>安装完成后，我们获取最新版本的 Docker 安装包并安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget -qO- https://get.docker.com/ | sh</div></pre></td></tr></table></figure></p>
<p>安装完成后输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">root@vultr:~# docker version</div><div class="line">Client:</div><div class="line"> Version:      17.10.0-ce</div><div class="line"> API version:  1.33</div><div class="line"> Go version:   go1.8.3</div><div class="line"> Git commit:   f4ffd25</div><div class="line"> Built:        Tue Oct 17 19:04:16 2017</div><div class="line"> OS/Arch:      linux/amd64</div><div class="line"></div><div class="line">Server:</div><div class="line"> Version:      17.10.0-ce</div><div class="line"> API version:  1.33 (minimum version 1.12)</div><div class="line"> Go version:   go1.8.3</div><div class="line"> Git commit:   f4ffd25</div><div class="line"> Built:        Tue Oct 17 19:02:56 2017</div><div class="line"> OS/Arch:      linux/amd64</div><div class="line"> Experimental: false</div></pre></td></tr></table></figure></p>
<p>可以查看版本</p>
<p>下面安装 python的 pip工具<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt install python-pip</div></pre></td></tr></table></figure></p>
<p>安装完成后再安装 <code>setuptools</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install -U pip setuptools</div></pre></td></tr></table></figure></p>
<p>下面再安装<code>compose</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- curl -sSL https://s3.amazonaws.com/circle-downloads/install-circleci-docker.sh | bash -s -- 1.10.0</div><div class="line">- pip install --upgrade pip</div><div class="line">- pip install docker-compose</div></pre></td></tr></table></figure></p>
<p>安装完成后，我们要从github上clone项目了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/AKSHAYUBHAT/DeepVideoAnalytics</div></pre></td></tr></table></figure></p>
<p>然后进入目录并用<code>docker-compose</code>运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd DeepVideoAnalytics/deploy/demo &amp;&amp; docker-compose up</div></pre></td></tr></table></figure></p>
<p>然后等待下载<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171105160313502.png" alt=""><br>等待服务启动<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171105160621423.png" alt=""><br>访问8000端口<br>看到这样的界面就代表成功部署了<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171105161546842.png" alt=""></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-2017110516552488.png" alt=""><br>点击上传视频<br>将我们想要检索的目标视频上传到服务器<br>服务器在接收到视频后，会在后台对其进行分类处理并标记特征</p>
<p>分析完成后 点击添加图片，上传想要检索的图片到后台，<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171105165632274.png" alt=""></p>
<p>上传完成后，调整图片大小到合适位置<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171105165915443.png" alt=""></p>
<p>因为上传的是面部图片，所以用索引器里选择 facenet<br>点击精确检索<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171105170021305.png" alt=""></p>
<p>这样我们就获得了视频中该面部的所有目标图像了<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171105170141552.png" alt=""><br>我们可以看即使是侧脸，也能够正确的被识别，说明这个识别率还是可以的。</p>
<p>点击其中一个图片，还能看到他在视频中的完整原图<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171105170301688.png" alt=""></p>
<p>也能分辨面部和人体<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171105170340403.png" alt=""></p>
<p>不得不说 Deep Video Analytics 是一个强大的开源视频检索工具<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171105170429151.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DeepVideoAnalytics是一款强大的开源视频检索工具&lt;br&gt;这是&lt;a href=&quot;https://github.com/AKSHAYUBHAT/DeepVideoAnalytics&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;它的项目地址&lt;/a&gt;&lt;br&gt;今天来讲下他的安装与简单使用&lt;br&gt;&lt;img src=&quot;http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171105153108742.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="机器学习" scheme="http://blog.chenwe.top/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>Oracle与jdbc实现增删改查</title>
    <link href="http://blog.chenwe.top/2017/10/29/2017/2017-10-29%20Oracle%E4%B8%8Ejdbc%E5%AE%9E%E7%8E%B0%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
    <id>http://blog.chenwe.top/2017/10/29/2017/2017-10-29 Oracle与jdbc实现增删改查/</id>
    <published>2017-10-29T07:40:47.153Z</published>
    <updated>2017-10-29T09:45:17.190Z</updated>
    
    <content type="html"><![CDATA[<p>这次会归本源<br>采用jdbc的方式连接Oracle 并实现CURD</p>
<p><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171029154326706.png" alt=""><br><a id="more"></a></p>
<h2 id="添加数据库驱动"><a href="#添加数据库驱动" class="headerlink" title="添加数据库驱动"></a>添加数据库驱动</h2><p>我用的是IDEA这款编辑器<br>所以在 File -&gt; Project structure -&gt; Libraries<br>里添加 对应版本号的 ojdbc.jar包<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171029154921469.png" alt=""></p>
<h2 id="编写-DbConnect-与Dao"><a href="#编写-DbConnect-与Dao" class="headerlink" title="编写 DbConnect 与Dao"></a>编写 DbConnect 与Dao</h2><p>这里用了单例模式<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span>  <span class="class"><span class="keyword">class</span> <span class="title">DbConnect</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> String url= <span class="string">"jdbc:oracle:thin:@localhost:1521:orcl"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> String name = <span class="string">"cw"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> String password = <span class="string">"654321"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> Connection conn = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DbConnect dbConnect = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DbConnect <span class="title">getInitJDBCUtil</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (dbConnect == <span class="keyword">null</span>) &#123;</div><div class="line"></div><div class="line">            <span class="comment">// 给类加锁防止线程并发</span></div><div class="line"></div><div class="line">            <span class="keyword">synchronized</span> (DbConnect.class) &#123;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (dbConnect == <span class="keyword">null</span>) &#123;</div><div class="line"></div><div class="line">                    dbConnect = <span class="keyword">new</span> DbConnect();</div><div class="line"></div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> dbConnect;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DbConnect</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// 通过静态代码块注册数据库驱动，保证注册只执行一次</span></div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">            <span class="comment">// 注册驱动有如下方式：</span></div><div class="line"></div><div class="line">            <span class="comment">// 1.通过驱动管理器注册驱动，但会注册两次，并且会对类产生依赖。如果该类不存在那就报错了。</span></div><div class="line"></div><div class="line">            <span class="comment">// DriverManager.registerDriver(newcom.mysql.jdbc.Driver());</span></div><div class="line"></div><div class="line">            <span class="comment">// 2.与3类似</span></div><div class="line"></div><div class="line">            <span class="comment">//System.setProperty("jdbc.drivers","com.mysql.jdbc.Driver");</span></div><div class="line"></div><div class="line">            Class.forName(<span class="string">"oracle.jdbc.driver.OracleDriver"</span>);<span class="comment">// 推荐使用方式</span></div><div class="line"></div><div class="line">        &#125;<span class="keyword">catch</span>(ClassNotFoundException e) &#123;</div><div class="line"></div><div class="line">            e.printStackTrace();</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// 获得连接</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">            conn = DriverManager.getConnection(url,name,password);</div><div class="line"></div><div class="line">        &#125;<span class="keyword">catch</span>(SQLException e) &#123;</div><div class="line"></div><div class="line">            e.printStackTrace();</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> conn;</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// 关闭连接</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeConnection</span><span class="params">(ResultSet rs, Statement statement, Connection con)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (rs != <span class="keyword">null</span>) &#123;</div><div class="line"></div><div class="line">                rs.close();</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;<span class="keyword">catch</span>(SQLException e) &#123;</div><div class="line"></div><div class="line">            e.printStackTrace();</div><div class="line"></div><div class="line">        &#125;<span class="keyword">finally</span>&#123;</div><div class="line"></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (statement != <span class="keyword">null</span>) &#123;</div><div class="line"></div><div class="line">                    statement.close();</div><div class="line"></div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;<span class="keyword">catch</span>(Exception e) &#123;</div><div class="line"></div><div class="line">                e.printStackTrace();</div><div class="line"></div><div class="line">            &#125;<span class="keyword">finally</span>&#123;</div><div class="line"></div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">                    <span class="keyword">if</span> (con != <span class="keyword">null</span>) &#123;</div><div class="line"></div><div class="line">                        con.close();</div><div class="line"></div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                &#125;<span class="keyword">catch</span>(SQLException e) &#123;</div><div class="line"></div><div class="line">                    e.printStackTrace();</div><div class="line"></div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>StudentDao<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDao</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(Student student)</span> </span>&#123;</div><div class="line"></div><div class="line">        Connection conn = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        PreparedStatement ps = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        ResultSet rs = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">            conn= DbConnect.getInitJDBCUtil().getConnection();</div><div class="line"></div><div class="line">            String sql = <span class="string">"insert into students(id,name,qq,age) values (?,?,?,?) "</span>;</div><div class="line"></div><div class="line">            ps= conn.prepareStatement(sql);</div><div class="line"></div><div class="line">            ps.setInt(<span class="number">1</span>,student.getId());</div><div class="line"></div><div class="line">            ps.setString(<span class="number">2</span>,student.getName());</div><div class="line"></div><div class="line">            ps.setInt(<span class="number">3</span>,student.getQq());</div><div class="line"></div><div class="line">            ps.setInt(<span class="number">4</span>,student.getAge());</div><div class="line"></div><div class="line">            ps.executeUpdate();</div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line"></div><div class="line">            DbConnect.getInitJDBCUtil().closeConnection(rs,ps, conn);</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line"></div><div class="line">        Connection conn = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        PreparedStatement ps = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        ResultSet rs = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">            conn= DbConnect.getInitJDBCUtil().getConnection();</div><div class="line"></div><div class="line">            String sql = <span class="string">"DELETE FROM students WHERE id = "</span> + id;</div><div class="line"></div><div class="line">            ps= conn.prepareStatement(sql);</div><div class="line"></div><div class="line">            <span class="comment">//ps.setInt(1,id);</span></div><div class="line"></div><div class="line"></div><div class="line">            ps.executeUpdate();</div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line"></div><div class="line">            DbConnect.getInitJDBCUtil().closeConnection(rs,ps, conn);</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(Student student)</span> </span>&#123;</div><div class="line"></div><div class="line">        Connection conn = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        PreparedStatement ps = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        ResultSet rs = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">            conn= DbConnect.getInitJDBCUtil().getConnection();</div><div class="line"></div><div class="line">            String sql = <span class="string">"update students set Age='"</span> + student.getAge() + <span class="string">"',qq='"</span> + student.getQq() + <span class="string">"',name='"</span> + student.getName() + <span class="string">"'where id='"</span> + student.getId() + <span class="string">"'"</span>;</div><div class="line"></div><div class="line">            ps= conn.prepareStatement(sql);</div><div class="line"></div><div class="line">            <span class="comment">//ps.setInt(1,id);</span></div><div class="line"></div><div class="line">            ps.executeUpdate();</div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line"></div><div class="line">            DbConnect.getInitJDBCUtil().closeConnection(rs,ps, conn);</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showUser</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        Connection conn = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        PreparedStatement ps = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        ResultSet rs = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">            conn= DbConnect.getInitJDBCUtil().getConnection();</div><div class="line"></div><div class="line">            String sql = <span class="string">"SELECT * FROM STUDENTS"</span>;</div><div class="line">            ps= conn.prepareStatement(sql);</div><div class="line"></div><div class="line">            ps.executeUpdate();</div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line"></div><div class="line">            DbConnect.getInitJDBCUtil().closeConnection(rs,ps, conn);</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里我们写了4种方法，对于增删改查<br><strong>建议每写完一句sql语句 就去测试一下</strong></p>
<p>接下来我们编写一个测试类来测试一下</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDaoTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        StudentDao studentDao = <span class="keyword">new</span> StudentDao();</div><div class="line">        studentDao.addUser(<span class="keyword">new</span> Student(<span class="number">1</span>, <span class="string">"Tom"</span>, <span class="number">1231</span>, <span class="number">3121</span>));</div><div class="line">        studentDao.addUser(<span class="keyword">new</span> Student(<span class="number">2</span>, <span class="string">"Jack"</span>, <span class="number">111111</span>, <span class="number">312221</span>));</div><div class="line">        studentDao.updateUser(<span class="keyword">new</span> Student(<span class="number">1</span>,<span class="string">"marry"</span>, <span class="number">12311</span>, <span class="number">56444</span>));</div><div class="line">        studentDao.deleteUser(<span class="number">2</span>);</div><div class="line">        studentDao.showUser();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171029170644186.png" alt=""></p>
<p>我们看到结果是我们预想的那样的<br>说明我们的增删改查都成功了</p>
<p>Oracle里是没有自增的选项的<br>所以我们要创建一个序列和触发器来实现功能。</p>
<p>创建序列：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">sequence</span> stu_seq</div><div class="line"><span class="keyword">increment</span> <span class="keyword">by</span> <span class="number">1</span></div><div class="line"><span class="keyword">start</span> <span class="keyword">with</span> <span class="number">1</span></div><div class="line"><span class="keyword">nomaxvalue</span></div><div class="line"><span class="keyword">nominvalue</span></div><div class="line">nocache;</div></pre></td></tr></table></figure></p>
<p>创建触发器：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">or</span>  <span class="keyword">replace</span> <span class="keyword">trigger</span> tr_stu</div><div class="line"><span class="keyword">before</span> <span class="keyword">insert</span> <span class="keyword">on</span> STUDENTS</div><div class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span></div><div class="line">  <span class="keyword">begin</span></div><div class="line">    <span class="keyword">select</span> stu_seq.nextval <span class="keyword">into</span> :new.id <span class="keyword">from</span> dual;</div><div class="line">  <span class="keyword">end</span>;</div></pre></td></tr></table></figure></p>
<p>运行两次测试程序，我们就发现我们的自增成功实现了<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171029174515292.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这次会归本源&lt;br&gt;采用jdbc的方式连接Oracle 并实现CURD&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171029154326706.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="jdbc" scheme="http://blog.chenwe.top/categories/jdbc/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot中Mybatis配置</title>
    <link href="http://blog.chenwe.top/2017/10/24/2017/2017-10-24%20SpringBoot%E4%B8%ADMybatis%E9%85%8D%E7%BD%AE/"/>
    <id>http://blog.chenwe.top/2017/10/24/2017/2017-10-24 SpringBoot中Mybatis配置/</id>
    <published>2017-10-24T13:30:42.176Z</published>
    <updated>2017-10-24T13:46:29.393Z</updated>
    
    <content type="html"><![CDATA[<p>上次在SpringBoot中整合Oracle和Mybatis<br>用的是Mybatis的注解方法来使用<br>这次我们用xml文件的方法来试试</p>
<p><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171024213257134.png" alt=""><br><a id="more"></a></p>
<h2 id="Mybatis配置"><a href="#Mybatis配置" class="headerlink" title="Mybatis配置"></a>Mybatis配置</h2><p>在pom.xml文件中写入<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在 <code>application.properties</code>写入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">spring.datasource.url=jdbc:mysql://localhost:3306/test?characterEncoding=utf8</div><div class="line">spring.datasource.username=root</div><div class="line">spring.datasource.password=</div><div class="line">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</div><div class="line"></div><div class="line">mybatis.mapper-locations=classpath:mapper/*.xml</div></pre></td></tr></table></figure></p>
<p>这里的<code>mybatis.mapper-locations=classpath:mapper/*.xml</code>是指一会儿我们在resources目录下要新建的mapper文件夹<br>里面存放.xml文件</p>
<p>然后新建一个实体类 Student<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">private</span> String names;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> names;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.names = name;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>再建一个StudentMapper文件<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Mapper</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentMapper</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">save</span><span class="params">(Student student)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(@Param(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id, @<span class="title">Param</span><span class="params">(<span class="string">"name"</span>)</span> String name)</span>;</div><div class="line"></div><div class="line">    <span class="function">List&lt;Student&gt; <span class="title">findAll</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在resources目录下新建一个 mapper文件夹 里面新建一个对应的 StudentMapper.xml文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" &gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.example.oracletest.mapper.StudentMapper"</span> &gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"save"</span> <span class="attr">parameterType</span>=<span class="string">"com.example.oracletest.domain.Student"</span>&gt;</span></div><div class="line">        insert into student(id,names) values(#&#123;id&#125;,#&#123;name&#125;)</div><div class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"delete"</span> <span class="attr">parameterType</span>=<span class="string">"com.example.oracletest.domain.Student"</span>&gt;</span></div><div class="line">        DELETE FROM student WHERE id=#&#123;id&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span> <span class="attr">parameterType</span>=<span class="string">"com.example.oracletest.domain.Student"</span>&gt;</span></div><div class="line">        UPDATE student set names=#&#123;name&#125; WHERE id=#&#123;id&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"com.example.oracletest.domain.Student"</span>&gt;</span></div><div class="line">        select * from student</div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>要和前面的StudentMapper.java相对应</p>
<p>然后给我们的启动类上添加注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableTransactionManagement</span></div><div class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.example.test.mapper"</span>)</div></pre></td></tr></table></figure></p>
<p>MapperScan 指定扫描的位置</p>
<p>下面我们就可以写一个测试类来单元测试了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@SpringBootTest</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OracleTestApplicationTests</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Autowired</span></div><div class="line">	<span class="keyword">private</span> StudentMapper mapper;</div><div class="line"></div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="meta">@Transactional</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span></span>&#123;</div><div class="line">		Student student = <span class="keyword">new</span> Student();</div><div class="line">		student.setName(<span class="string">"李四"</span>);</div><div class="line">		mapper.save(student);</div><div class="line">		printTable();</div><div class="line">		mapper.delete(<span class="number">1</span>);</div><div class="line">		printTable();</div><div class="line">		mapper.update(<span class="number">2</span>, <span class="string">"Jack"</span>);</div><div class="line">		printTable();</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printTable</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span> (Student s:</div><div class="line">		mapper.findAll()) &#123;</div><div class="line">			System.out.println(<span class="string">"用户信息"</span>+s.getName());</div><div class="line">		&#125;</div><div class="line">		System.out.println(<span class="string">"----------------------------"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里的<code>@Transactional</code> 注解可以让这个测试进行回滚<br>也就是每次测试完成后，对数据库的原始数据并不会有影响</p>
<p>运行测试并通过<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">用户信息张三</div><div class="line">用户信息aa</div><div class="line">用户信息李四</div><div class="line">----------------------------</div><div class="line">用户信息aa</div><div class="line">用户信息李四</div><div class="line">----------------------------</div><div class="line">用户信息Jack</div><div class="line">用户信息李四</div><div class="line">----------------------------</div></pre></td></tr></table></figure></p>
<p>这样对于 Mybatis的增删改查我们都测试成功了</p>
<p><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171024214514781.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上次在SpringBoot中整合Oracle和Mybatis&lt;br&gt;用的是Mybatis的注解方法来使用&lt;br&gt;这次我们用xml文件的方法来试试&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171024213257134.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://blog.chenwe.top/categories/SpringBoot/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>阿里云服务器Docker部署Oracle</title>
    <link href="http://blog.chenwe.top/2017/10/23/2017/2017-10-23%20%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8Docker%E9%83%A8%E7%BD%B2Oracle/"/>
    <id>http://blog.chenwe.top/2017/10/23/2017/2017-10-23 阿里云服务器Docker部署Oracle/</id>
    <published>2017-10-23T08:16:55.870Z</published>
    <updated>2017-10-23T08:54:21.424Z</updated>
    
    <content type="html"><![CDATA[<p>上次在自己的电脑上装Oracle<br>装了很久，而且用起来很卡，十分占资源，配置起来也很麻烦<br>于是打算用阿里云的服务器来装Oracle 远程使用<br>为了简化配置，所以用Docker来部署</p>
<p><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171023162041418.png" alt=""><br><a id="more"></a></p>
<h2 id="在Ubuntu上安装Docker服务"><a href="#在Ubuntu上安装Docker服务" class="headerlink" title="在Ubuntu上安装Docker服务"></a>在Ubuntu上安装Docker服务</h2><p>我这里服务器用的是Ubuntu 14系统<br>我用apt-get的方式来安装Docker服务</p>
<p>输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install docker.io</div></pre></td></tr></table></figure></p>
<p>中间让你确认，就输入 Y</p>
<p>安装完成后输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker version</div></pre></td></tr></table></figure></p>
<p>出现如下字样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Client version: 1.6.2</div><div class="line">Client API version: 1.18</div><div class="line">Go version (client): go1.2.1</div><div class="line">Git commit (client): 7c8fca2</div><div class="line">OS/Arch (client): linux/amd64</div><div class="line">Server version: 1.6.2</div><div class="line">Server API version: 1.18</div><div class="line">Go version (server): go1.2.1</div><div class="line">Git commit (server): 7c8fca2</div><div class="line">OS/Arch (server): linux/amd64</div></pre></td></tr></table></figure></p>
<p>就代表安装完成了<br>docker 的详细 可以查看这里<a href="https://docs.docker.com/" target="_blank" rel="external">Docker文档</a></p>
<h2 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h2><p>因为用的是阿里云服务器<br>位于国内<br>所以为了加快下载速度，同时防止下载失败<br>所以我这里选用 阿里云的<a href="https://dev.aliyun.com/search.html" target="_blank" rel="external">容器Hub</a>来下载镜像<br>我这里安装的Oracle容器是 <a href="https://dev.aliyun.com/detail.html?spm=5176.1972343.2.2.193eeedbr2a2iL&amp;repoId=1969" target="_blank" rel="external">helowin/oracle_11g</a>的容器</p>
<p>因为这个容器较大（有近7个G）<br>下载要耗费很多时间<br>所以我选择挂在后台下载<br>输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nohup docker pull registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g &amp;</div></pre></td></tr></table></figure></p>
<p>nohup 使得它即使退出中端也会继续下载， &amp;  让他保持在后台运行</p>
<p>等了足够长的一段时间后<br>我们输入命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">root@iZwz97zhk0psfzbsaxakxzZ:~# docker images</div><div class="line">REPOSITORY                                             TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</div><div class="line">registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g   latest              0c8d2ee3b120        21 months ago       6.849 GB</div></pre></td></tr></table></figure></p>
<p>查看我们本地拥有的镜像容器<br>我们看到我们已经拥有了一个 6.8G的镜像了</p>
<h2 id="运行与配置Docker里的Oracle"><a href="#运行与配置Docker里的Oracle" class="headerlink" title="运行与配置Docker里的Oracle"></a>运行与配置Docker里的Oracle</h2><p>输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -d -p 1521:1521 --name oracle_11g registry.aliyuncs.com/helowin/oracle_11g</div></pre></td></tr></table></figure></p>
<p>这里我将端口从里面的 1521 映射到 外部的1521端口<br>等待一段时间<br>输入 <code>docker ps</code> 查看docker的运行情况<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">root@iZwz97zhk0psfzbsaxakxzZ:~# docker ps</div><div class="line">CONTAINER ID        IMAGE                                             COMMAND                CREATED             STATUS              PORTS                    NAMES</div><div class="line">00bcc1c3577f        registry.aliyuncs.com/helowin/oracle_11g:latest   &quot;/bin/sh -c &apos;/home/o   3 hours ago         Up 3 hours          0.0.0.0:1521-&gt;1521/tcp   oracle_11g</div></pre></td></tr></table></figure></p>
<p>进入容器： <code>docker exec -it 容器ID /bin/bash</code><br>这里的容器ID是 <code>00bcc1c3577f</code></p>
<p>进入之后我们输入 <code>sqlplus</code> 是没有反应的<br>因为权限不够<br>所以我们输入<code>su root</code><br>获取root权限 密码是 helowin</p>
<p>获取到root权限后<br>输入 <code>vi /etc/profile</code>并在文件最后添加如下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">export ORACLE_HOME=/home/oracle/app/oracle/product/11.2.0/dbhome_2</div><div class="line">export ORACLE_SID=helowin</div><div class="line">export PATH=$ORACLE_HOME/bin:$PATH</div></pre></td></tr></table></figure></p>
<p>退出并保存</p>
<p>输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ln -s $ORACLE_HOME/bin/sqlplus /usr/bin</div></pre></td></tr></table></figure></p>
<p>来连接软件</p>
<p>然后 输入 <code>su - oracle</code> 切换成 Oracle用户<br>再登录sqlplus 输入<br><code>sqlplus /nolog</code><br><code>conn /as sysdba</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[oracle@00bcc1c3577f ~]$ sqlplus /nolog</div><div class="line"></div><div class="line">SQL*Plus: Release 11.2.0.1.0 Production on Mon Oct 23 13:13:00 2017</div><div class="line"></div><div class="line">Copyright (c) 1982, 2009, Oracle.  All rights reserved.</div><div class="line"></div><div class="line">SQL&gt; conn /as sysdba</div><div class="line">Connected.</div></pre></td></tr></table></figure></p>
<p>成后之后来执行下面的命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">alter user system identified by oracle;</div><div class="line">alter user sys identified by oracle;</div><div class="line">ALTER PROFILE DEFAULT LIMIT PASSWORD_LIFE_TIME UNLIMITED;</div></pre></td></tr></table></figure>
<p>我们把 system 和 sys的密码都定义成 oracle了</p>
<p>我们下面可以新建一个用户<br>输入以下命令查看我们用户空间的路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">SQL&gt; select name from v$datafile;</div><div class="line"></div><div class="line">NAME</div><div class="line">--------------------------------------------------------------------------------</div><div class="line">/home/oracle/app/oracle/oradata/helowin/system01.dbf</div><div class="line">/home/oracle/app/oracle/oradata/helowin/sysaux01.dbf</div><div class="line">/home/oracle/app/oracle/oradata/helowin/undotbs01.dbf</div><div class="line">/home/oracle/app/oracle/oradata/helowin/users01.dbf</div><div class="line">/home/oracle/app/oracle/oradata/helowin/example01.dbf</div></pre></td></tr></table></figure></p>
<p>我们看到我们的用户空间位于<code>/home/oracle/app/oracle/oradata/helowin/</code>下<br>所以我们可以创建新用户按照以下步骤<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">SQL&gt; create tablespace myspace datafile &apos;/home/oracle/app/oracle/oradata/helowin/myspace.dbf&apos; size 15M;</div><div class="line"></div><div class="line">Tablespace created.</div><div class="line"></div><div class="line">SQL&gt; create user me identified by mypassword default tablespace myspace;</div><div class="line"></div><div class="line">User created.</div><div class="line"></div><div class="line">SQL&gt; grant dba,connect to me;</div><div class="line"></div><div class="line">Grant succeeded.</div></pre></td></tr></table></figure></p>
<p>这样我们就创建了一个名为 <code>myspace.dbf</code>的用户空间<br>创建了一个名为 <code>me</code>的用户，密码是 mypassword ,用户空间是myspace<br>并赋予了 dba 和 connect权限</p>
<p>下面我们就可以通过  <code>SQL Developer</code>工具来连接了<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171023165301584.png" alt=""></p>
<p>这样我们就能远程连接我们在阿里云上的 Oracle数据库了</p>
<p><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171023165411222.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上次在自己的电脑上装Oracle&lt;br&gt;装了很久，而且用起来很卡，十分占资源，配置起来也很麻烦&lt;br&gt;于是打算用阿里云的服务器来装Oracle 远程使用&lt;br&gt;为了简化配置，所以用Docker来部署&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171023162041418.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://blog.chenwe.top/categories/Docker/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot整合Oracle与Mybatis</title>
    <link href="http://blog.chenwe.top/2017/10/21/2017/2017-10-21%20SpringBoot%E6%95%B4%E5%90%88Oracle%E4%B8%8EMybatis/"/>
    <id>http://blog.chenwe.top/2017/10/21/2017/2017-10-21 SpringBoot整合Oracle与Mybatis/</id>
    <published>2017-10-21T11:01:53.362Z</published>
    <updated>2017-10-21T11:47:55.521Z</updated>
    
    <content type="html"><![CDATA[<p>之前用的都是Mysql来做数据库 spring data jpa来实现持久层<br>这次来试试Oracle 和 Mybatis<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171021190838349.png" alt=""><br><a id="more"></a></p>
<h2 id="Oracle的驱动的安装"><a href="#Oracle的驱动的安装" class="headerlink" title="Oracle的驱动的安装"></a>Oracle的驱动的安装</h2><p>创建玩SpringBoot项目后<br>我们要把驱动也安装下<br>推荐用官方自带的驱动<br>位置在安装的目录下 <code>product\12.1.0\dbhome_1\jdbc\lib</code>里<br>里面的 <code>ojdbc6.jar</code>是JDK6的驱动<br>因为我现在的项目是JDK8的，所以我们要用<code>ojdbc7.jar</code>这个文件<br>打开IDEA -&gt; File -&gt; project Structure -&gt; Libraries 新建一个JAVA的依赖<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-2017102119152955.png" alt=""><br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171021191606391.png" alt=""><br>选中我们刚刚找到的<code>ojdbc7.jar</code> 文件</p>
<p>在pom.xml中写入<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oracle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ojdbc7<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="Oracle配置"><a href="#Oracle配置" class="headerlink" title="Oracle配置"></a>Oracle配置</h2><p>在application.properties 中写入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">spring.jpa.database=oracle</div><div class="line">spring.datasource.driver-class-name=oracle.jdbc.driver.OracleDriver</div><div class="line">spring.datasource.url=jdbc:oracle:thin:@localhost:1521:orcl</div><div class="line">spring.datasource.username=c##ccww</div><div class="line">spring.datasource.password=ccww</div><div class="line">spring.jpa.hibernate.ddl-auto=update</div></pre></td></tr></table></figure></p>
<p>开启Oracle服务后<br>运行一下SpringBoot 项目，如果没有报错，说明我们Oracle成功配置</p>
<h2 id="整合Mybatis"><a href="#整合Mybatis" class="headerlink" title="整合Mybatis"></a>整合Mybatis</h2><p>在pom.xml文件中写入<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>我们还写了一个测试相关的东西，为了方便等下的测试<br>在application.properties 中写入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mybatis.typeAliasesPackage=com.example.oracletest.domain</div></pre></td></tr></table></figure></p>
<p>指明实体类的所在文件夹</p>
<p>下面我们编写一个实体类Users.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Users</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Integer id;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>创建一个 mapper文件夹，用来存放Mybatis 的mapper文件<br>在这个文件夹下新建一个 UsersMapper.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Repository</span></div><div class="line"><span class="meta">@Mapper</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UsersMapper</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Insert</span>(<span class="string">"INSERT INTO Users(id, name) VALUES(#&#123;id&#125;, #&#123;name&#125;)"</span>)</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addUser</span><span class="params">(@Param(<span class="string">"id"</span>)</span> Integer id, @<span class="title">Param</span><span class="params">(<span class="string">"name"</span>)</span> String name)</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Delete</span>(<span class="string">"delete from Users where id=#&#123;id&#125;"</span>)</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteByUserId</span><span class="params">(@Param(<span class="string">"id"</span>)</span> Integer id)</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Update</span>(<span class="string">"update Users set name=#&#123;name&#125; where id=#&#123;id&#125;"</span>)</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(@Param(<span class="string">"id"</span>)</span> Integer id, @<span class="title">Param</span><span class="params">(<span class="string">"name"</span>)</span> String name)</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Select</span>(<span class="string">"SELECT * FROM Users"</span>)</div><div class="line">    <span class="meta">@Results</span>(&#123;</div><div class="line">            <span class="meta">@Result</span>(property = <span class="string">"id"</span>,  column = <span class="string">"id"</span>),</div><div class="line">            <span class="meta">@Result</span>(property = <span class="string">"name"</span>, column = <span class="string">"name"</span>)</div><div class="line">    &#125;)</div><div class="line">    <span class="function">List&lt;Users&gt; <span class="title">findAll</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们事先在数据库中新建一个Users的表，有id和name字段<br>并且先放入少量测试数据</p>
<p>我们还要再启动类中添加注解 <code>@MapperScan(&quot;com.example.oracletest.Mapper&quot;)</code><br>来指明mapper的所在文件夹<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.example.oracletest.Mapper"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OracleTestApplication</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		SpringApplication.run(OracleTestApplication.class, args);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样我们的Mybatis就整合好了<br>下面我们来测试下</p>
<p>我们在测试的文件夹下新建一个测试<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@SpringBootTest</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OracleTestApplicationTests</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Autowired</span></div><div class="line">	<span class="keyword">private</span> UsersMapper usersMapper;</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MybatisTest</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="comment">//查询用户表所有数据</span></div><div class="line">		printUserList();</div><div class="line"></div><div class="line">		<span class="comment">//插入新数据</span></div><div class="line">		usersMapper.addUser(<span class="number">3</span>,<span class="string">"Jack"</span>);</div><div class="line">		printUserList();</div><div class="line"></div><div class="line">		<span class="comment">//删除数据</span></div><div class="line">		usersMapper.deleteByUserId(<span class="number">2</span>);</div><div class="line">		printUserList();</div><div class="line"></div><div class="line">		<span class="comment">//修改数据</span></div><div class="line">		usersMapper.updateUser(<span class="number">1</span>, <span class="string">"Chen"</span>);</div><div class="line">		printUserList();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printUserList</span><span class="params">()</span> </span>&#123;</div><div class="line">		List&lt;Users&gt; usersList = usersMapper.findAll();</div><div class="line">		<span class="keyword">for</span> (Users user:</div><div class="line">				usersList) &#123;</div><div class="line">			System.out.println(<span class="string">"User ID = "</span> + user.getId());</div><div class="line">			System.out.println(<span class="string">"User name = "</span> + user.getName());</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		System.out.println(<span class="string">"--------------------------"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们来测试一下是否能够成功对数据库进行增删改查<br>右键 Run MybatisTest()<br>我这里成功获取了数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">User ID = 2</div><div class="line">User name = Marry</div><div class="line">User ID = 1</div><div class="line">User name = Tom</div><div class="line">--------------------------</div><div class="line">User ID = 2</div><div class="line">User name = Marry</div><div class="line">User ID = 3</div><div class="line">User name = Jack</div><div class="line">User ID = 1</div><div class="line">User name = Tom</div><div class="line">--------------------------</div><div class="line">User ID = 3</div><div class="line">User name = Jack</div><div class="line">User ID = 1</div><div class="line">User name = Tom</div><div class="line">--------------------------</div><div class="line">User ID = 3</div><div class="line">User name = Jack</div><div class="line">User ID = 1</div><div class="line">User name = Chen</div><div class="line">--------------------------</div></pre></td></tr></table></figure></p>
<p>增删改查都成功实现了<br>说明我们成功整合了Mybatis 并使用</p>
<p><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171021194754903.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前用的都是Mysql来做数据库 spring data jpa来实现持久层&lt;br&gt;这次来试试Oracle 和 Mybatis&lt;br&gt;&lt;img src=&quot;http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171021190838349.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://blog.chenwe.top/categories/SpringBoot/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>Oracle的安装与新用户的创建</title>
    <link href="http://blog.chenwe.top/2017/10/21/2017/2017-10-21%20Oracle%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E6%96%B0%E7%94%A8%E6%88%B7%E7%9A%84%E5%88%9B%E5%BB%BA/"/>
    <id>http://blog.chenwe.top/2017/10/21/2017/2017-10-21 Oracle的安装与新用户的创建/</id>
    <published>2017-10-21T08:42:15.276Z</published>
    <updated>2017-10-21T11:45:17.437Z</updated>
    
    <content type="html"><![CDATA[<p>之前用的都是Mysql来做数据库<br>这次来试试Oracle<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-2017102118360441.png" alt=""><br><a id="more"></a></p>
<h2 id="Oracle的安装"><a href="#Oracle的安装" class="headerlink" title="Oracle的安装"></a>Oracle的安装</h2><p>我这里使用的是Oracle 12c版本<br>在<a href="https://www.oracle.com/cn/database/index.html" target="_blank" rel="external">官方下载地址</a><br>里将两个压缩文件都下载过来<br>将这两个文件都解压出来<br>将<code>winx64_12102_database_2of2</code>里的stage 文件<br>与<code>winx64_12102_database_1of2</code>里的stage文件合并<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171021184009746.png" alt=""></p>
<p>然后点击setup 安装Oracle<br>具体的安装方法可以参考<a href="http://www.cnblogs.com/soraka/p/5855724.html" target="_blank" rel="external">这篇博客</a><br>安装过程十分的慢，请耐心等待</p>
<h2 id="启动Oracle服务"><a href="#启动Oracle服务" class="headerlink" title="启动Oracle服务"></a>启动Oracle服务</h2><p>我们首先要启动Oracle的服务<br>右键我的电脑 -&gt; 管理 -&gt; 服务和应用程序 -&gt; 服务<br>里面找到 <code>OracleServiceORCL</code> 和 <code>OracleOraDB12Home1TNSListener</code><br>选中后右键点击启动 来启动服务</p>
<h2 id="Oracle创建新用户与权限设置"><a href="#Oracle创建新用户与权限设置" class="headerlink" title="Oracle创建新用户与权限设置"></a>Oracle创建新用户与权限设置</h2><p>打开cmd<br>输入 <code>sqlplus</code><br>输入用户名和密码（安装的时候已经设置了）<br>出现如下界面代表成功了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">λ sqlplus</div><div class="line"></div><div class="line">SQL*Plus: Release 12.1.0.2.0 Production on 星期六 10月 21 15:42:13 2017</div><div class="line"></div><div class="line">Copyright (c) 1982, 2014, Oracle.  All rights reserved.</div><div class="line"></div><div class="line">请输入用户名:  system</div><div class="line">输入口令:</div><div class="line">上次成功登录时间: 星期六 10月 21 2017 15:41:23 +08:00</div><div class="line"></div><div class="line">连接到:</div><div class="line">Oracle Database 12c Enterprise Edition Release 12.1.0.2.0 - 64bit Production</div><div class="line">With the Partitioning, OLAP, Advanced Analytics and Real Application Testing options</div><div class="line"></div><div class="line">SQL&gt;</div></pre></td></tr></table></figure></p>
<p>下面我们创建一个表空间给新的用户<br>输入<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">SQL&gt; create tablespace stusys</div><div class="line">  2  datafile 'f:\app\stuysy.dbf'</div><div class="line">  3  size 10M;</div><div class="line"></div><div class="line">  表空间已创建。</div></pre></td></tr></table></figure></p>
<p>这里我们创建了一个 名为  <code>stusys</code>的表空间，位于f盘的app目录下，大小10M</p>
<p>下面我们创建一个新用户<br>输入<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">SQL&gt; create user c##ccww</div><div class="line">  2  identified by ccww</div><div class="line">  3  default tablespace stusys</div><div class="line">  4  temporary tablespace temp;</div><div class="line"></div><div class="line">  用户已创建。</div></pre></td></tr></table></figure></p>
<p>这里我们创建了一个名为c##ccww的用户<br><strong>在Oracle 12c版本里，创建新用户必须以c##开头</strong></p>
<p>下面我们给他添加权限<br>输入<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">SQL&gt; grant connect to c##ccww</div><div class="line"></div><div class="line">授权成功。</div><div class="line"></div><div class="line">SQL&gt; grant resource to c##ccww;</div><div class="line"></div><div class="line">授权成功。</div><div class="line"></div><div class="line">SQL&gt; alter user c##ccww default tablespace stusys;</div><div class="line"></div><div class="line">用户已更改。</div><div class="line"></div><div class="line">SQL&gt; grant unlimited tablespace to c##ccww;</div><div class="line"></div><div class="line">授权成功。</div></pre></td></tr></table></figure></p>
<p>我们还为他设置了用户空间</p>
<p>这样我们新用户就创建好了</p>
<h2 id="登录Sql-Developer"><a href="#登录Sql-Developer" class="headerlink" title="登录Sql Developer"></a>登录Sql Developer</h2><p>打开我们在安装Oracle的时候安装的 <code>Sql Developer</code>工具<br>这个是Oracle图形管理界面</p>
<p>输入刚刚的用户名密码<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171021185629533.png" alt=""><br>点击连接</p>
<p>这样我们成功登录了<br>下面我们可以选择表 来创建一个表了<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171021185720264.png" alt=""></p>
<p>这样，我们就完成了Oracle的安装与用户配置<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171021185750824.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前用的都是Mysql来做数据库&lt;br&gt;这次来试试Oracle&lt;br&gt;&lt;img src=&quot;http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-2017102118360441.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Oracle" scheme="http://blog.chenwe.top/categories/Oracle/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>理解Java的继承与多态</title>
    <link href="http://blog.chenwe.top/2017/10/15/2017/2017-10-15%20%E7%90%86%E8%A7%A3JAVA%E7%9A%84%E7%BB%A7%E6%89%BF%E4%B8%8E%E5%A4%9A%E6%80%81/"/>
    <id>http://blog.chenwe.top/2017/10/15/2017/2017-10-15 理解JAVA的继承与多态/</id>
    <published>2017-10-15T12:48:34.382Z</published>
    <updated>2017-10-16T08:20:54.784Z</updated>
    
    <content type="html"><![CDATA[<p>很多人其实只是粗略的过了一遍Java的知识点<br>基础并不扎实<br>虽然一开始的时候不会发现有什么弊端<br>但是随着工作的深入，对于基础的要求更加重要了</p>
<p>这里我来稍微总结下Java的继承与多态中需要注意的地方<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171015214220622.png" alt=""><br><a id="more"></a></p>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承可以提高代码复用<br>继承有下面几个特点</p>
<ul>
<li><p>1、子类拥有父类非 private 的属性和方法。</p>
</li>
<li><p>2、子类可以拥有自己属性和方法，即子类可以对父类进行扩展。</p>
</li>
<li><p>3、子类可以用自己的方式实现父类的方法。</p>
</li>
</ul>
<p>下面来介绍下向上转型<br>假如我们有两个类 <code>Wine.java</code> 和 <code>WhiteWine.java</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wine</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">one</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Wine one"</span>);</div><div class="line">        two();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">two</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Wine two"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WhiteWine</span> <span class="keyword">extends</span> <span class="title">Wine</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">one</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"WhiteWine one"</span>);</div><div class="line">        two();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">two</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"WhiteWine two"</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>WhiteWine 继承自 Wine<br>重载了one方法<br>重写了two方法</p>
<p>我们编写一个测试类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Wine wine = <span class="keyword">new</span> WhiteWine();</div><div class="line">        wine.one();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们将<code>WhiteWine</code>这个子类向上转型为<code>Wine</code>这个父类<br>但是子类中被重载的方法会丢失<br>我们运行上面的测试类，可以得到如下结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Wine one</div><div class="line">WhiteWine two</div></pre></td></tr></table></figure></p>
<p>在运行的时候，因为向上转型的关系，丢失了子类的<code>one(int i)</code>方法<br>所以调用了父类的<code>one()</code>方法<br>在 <code>one()</code>  方法中又要调用<code>two()</code>方法<br>因为子类重写亏了 <code>two()</code> 方法，所以再调用子类的 <code>two()</code>方法</p>
<p>所以继承的时候用向上转型，会丢失部分方法与属性</p>
<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>假如我们有三个类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(C obj)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (<span class="string">"A and C"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(A obj)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (<span class="string">"A and A"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(B obj)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> (<span class="string">"B and B"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(A obj)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> (<span class="string">"B and A"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>B 继承 A， C 继承 B<br>我们编写一个测试类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ABCDtest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        A a = <span class="keyword">new</span> B();</div><div class="line">        B b = <span class="keyword">new</span> B();</div><div class="line">        C c = <span class="keyword">new</span> C();</div><div class="line">        System.out.println(a.show(b));</div><div class="line">        System.out.println(a.show(c));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们运行测试类<br>得到以下结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">B and A</div><div class="line">A and C</div></pre></td></tr></table></figure></p>
<p>我们分析一下<br>因为在继承链中对象方法的调用存在一个优先级：this.show(O)、super.show(O)、this.show((super)O)、super.show((super)O)</p>
<p>所以在运行的时候<br>我们调用了一个由B向上转型的A类的方法show(O)<br>并且传入一个b的对象<br>因为优先级的关系<br>所以他会先去找 this.show(O) 里面有没有这个方法<br>这里的 this 就是 A<br>在A对象中并没有以 B为传入参数的show方法</p>
<p>所以我们去找下一个 super.show(O)方法<br>因为A没有父类<br>所以也没有</p>
<p>然后我们去找下一个 this.show((super)O)<br>这里 我们发现 B的父类是A<br>所以 这里相当于 A.show(A) 在A类中有<br>又因为B重写了A里的 show(A)方法<br>所以系统会调用 B类里的 show(A) 方法</p>
<p>于是就打出了 <code>B and A</code>这行</p>
<p>然后执行a.show(c)<br>因为 A类里有 show(C) 方法 且子类没有重写<br>所以直接执行并打印 <code>A and C</code></p>
<p><strong>这里是不是有点绕</strong><br>但其实自己去动手写下就很好理解了<br>一开始我也模模糊糊的<br>但是自己写了下，就很好理解了，主要是要自己亲自动手去做<br>慢慢来吧<br>部分代码参考自 <a href="http://wiki.jikexueyuan.com/project/java-enhancement/java-three.html" target="_blank" rel="external">此教程</a><br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171015213944524.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很多人其实只是粗略的过了一遍Java的知识点&lt;br&gt;基础并不扎实&lt;br&gt;虽然一开始的时候不会发现有什么弊端&lt;br&gt;但是随着工作的深入，对于基础的要求更加重要了&lt;/p&gt;
&lt;p&gt;这里我来稍微总结下Java的继承与多态中需要注意的地方&lt;br&gt;&lt;img src=&quot;http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171015214220622.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://blog.chenwe.top/categories/Java/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>图书信息推送系统（三）</title>
    <link href="http://blog.chenwe.top/2017/10/04/2017/2017-10-04%20%E5%9B%BE%E4%B9%A6%E4%BF%A1%E6%81%AF%E6%8E%A8%E9%80%81%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://blog.chenwe.top/2017/10/04/2017/2017-10-04 图书信息推送系统（三）/</id>
    <published>2017-10-04T11:54:40.530Z</published>
    <updated>2017-10-04T12:15:32.122Z</updated>
    
    <content type="html"><![CDATA[<p>上回书说到<br>具体功能的实现</p>
<p>这次我们来讲下服务器的部署<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171004195538281.png" alt=""></p>
<a id="more"></a>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>在第一篇里我们搭建了数据库的环境<br>现在我们要一个JAVA的运行环境<br>因为我的项目是用JAVA1.8做的<br>所以我们要安装JAVA1.8</p>
<p>这里我用apt-get 来安装<br>先用 <code>apt-cache search package</code>这条命令来搜索相关的软件包<br>获取到的结果如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">cw@tang-pc:~$ apt-cache search java8</div><div class="line">default-jdk - Standard Java or Java compatible Development Kit</div><div class="line">default-jdk-headless - Standard Java or Java compatible Development Kit (headless)</div><div class="line">default-jre - Standard Java or Java compatible Runtime</div><div class="line">default-jre-headless - Standard Java or Java compatible Runtime (headless)</div><div class="line">openjdk-8-jdk - OpenJDK Development Kit (JDK)</div><div class="line">openjdk-8-jdk-headless - OpenJDK Development Kit (JDK) (headless)</div><div class="line">openjdk-8-jre - OpenJDK Java runtime, using Hotspot JIT</div><div class="line">openjdk-8-jre-headless - OpenJDK Java runtime, using Hotspot JIT (headless)</div><div class="line">openjdk-9-jdk - OpenJDK Development Kit (JDK)</div><div class="line">openjdk-9-jdk-headless - OpenJDK Development Kit (JDK) (headless)</div><div class="line">openjdk-9-jre - OpenJDK Java runtime, using Hotspot JIT</div><div class="line">openjdk-9-jre-headless - OpenJDK Java runtime, using Hotspot JIT (headless)</div><div class="line">oracle-java8 - Oracle Java(TM) Development Kit (JDK) 8</div></pre></td></tr></table></figure></p>
<p>我这里选择最后一个 <code>oracle-java8</code>来安装</p>
<p>输入 <code>sudo apt-get install oracle-java8</code><br>来在Linux下安装java8</p>
<p>输入 <code>java -version</code> 来查看版本</p>
<h2 id="更换JDK版本"><a href="#更换JDK版本" class="headerlink" title="更换JDK版本"></a>更换JDK版本</h2><p>可能因为原来就有一些老版本的jdk关系<br>所以安装的JAVA8可能不生效<br>如果这里版本不是我们想要的版本<br>我们可以输入 <code>update-alternatives --config java</code><br>来按照提示更改JAVA版本</p>
<p>安装完成后<br>我们在外面的IDEA中我们用maven打包项目<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171004201007493.png" alt=""></p>
<p>打包完成后，我们移动到Linux里面的目录下</p>
<p>输入<code>java -jar 你的项目.jar mylog.txt &amp;</code><br>这样就能在后台运行了</p>
<p>我们查看我们的日志内容是否正常<br>如果一切正常，那么我们就成功部署了</p>
<p><strong>至此，我们的图书信息推送系统就完成了，可以去对应的地址去测试<br>但是要注意一点，因为我用的是学校里的电脑改的服务器，用的是校园网，所以只能由校园网来访问，外部的网络无法访问我们的系统页面。<br>当初选择学校的自制服务器，也是因为学校图书系统只能由校园网访问，所以只能通过我们在校园网上构建的爬虫来获取数据。</strong><br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171004201503644.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上回书说到&lt;br&gt;具体功能的实现&lt;/p&gt;
&lt;p&gt;这次我们来讲下服务器的部署&lt;br&gt;&lt;img src=&quot;http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171004195538281.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://blog.chenwe.top/categories/SpringBoot/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>图书信息推送系统（二）</title>
    <link href="http://blog.chenwe.top/2017/10/03/2017/2017-10-03%20%E5%9B%BE%E4%B9%A6%E4%BF%A1%E6%81%AF%E6%8E%A8%E9%80%81%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://blog.chenwe.top/2017/10/03/2017/2017-10-03 图书信息推送系统（二）/</id>
    <published>2017-10-03T12:16:23.865Z</published>
    <updated>2017-10-03T12:51:42.236Z</updated>
    
    <content type="html"><![CDATA[<p>上回书说到<br>Linux数据库的配置以及远程连接</p>
<p>这次我们来讲下具体功能的实现<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171003202042469.png" alt=""></p>
<a id="more"></a>
<h2 id="功能模块"><a href="#功能模块" class="headerlink" title="功能模块"></a>功能模块</h2><p>我将这个系统分为以下几个模块来实现</p>
<ul>
<li>爬虫模块<br>负责获取图书数据</li>
<li>网站模块<br>负责网站前后端</li>
<li>邮件服务模块<br>负责邮件发送的任务</li>
<li>定时模块<br>负责定时执行任务</li>
</ul>
<h2 id="爬虫模块"><a href="#爬虫模块" class="headerlink" title="爬虫模块"></a>爬虫模块</h2><p>我们用JAVA做一个爬虫<br>去获取网页的数据<br>这里我用了<code>Jsoup</code>这个库</p>
<h2 id="Jsoup安装与使用"><a href="#Jsoup安装与使用" class="headerlink" title="Jsoup安装与使用"></a>Jsoup安装与使用</h2><p>我用maven安装 在pom.xml里写入<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jsoup<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsoup<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>我们定一个方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUrl</span><span class="params">(String url, String email)</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">//Jsoup来提取图书馆藏信息</span></div><div class="line">        Document doc = Jsoup.connect(url)</div><div class="line">                <span class="comment">//.data("query", "Java")</span></div><div class="line">                .userAgent(<span class="string">"'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) '                            'Chrome/51.0.2704.63 Safari/537.36'"</span>)</div><div class="line">                <span class="comment">//.cookie("auth", "token")</span></div><div class="line">                .timeout(<span class="number">10000</span>)</div><div class="line">                <span class="comment">//.post()</span></div><div class="line">                .get();</div><div class="line"></div><div class="line">        Elements elements = doc.select(<span class="string">".whitetext td"</span>);</div><div class="line">        <span class="keyword">for</span> (Element ele : elements) &#123;</div><div class="line">            String text = ele.text();</div><div class="line">            System.out.println(text);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们先通过<code>Jsoup.connect(url)</code>方法 获取一个Document对象<br>我们调用<code>doc.select()</code>方法来定位我们要的元素（详细使用方法参考<a href="https://jsoup.org/apidocs/" target="_blank" rel="external">Jsoup Selector文档</a>）<br>在获取完之后 这里我将获取的数据 打印出来了<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171001164957520.png" alt=""></p>
<h2 id="网站模块"><a href="#网站模块" class="headerlink" title="网站模块"></a>网站模块</h2><p>这里 我用<code>thymeleaf</code>来作为模板<br>thymeleaf的具体用法不多介绍<br>有兴趣可以去看下<a href="http://www.thymeleaf.org/documentation.html" target="_blank" rel="external">Thymeleaf官方文档</a></p>
<p>这里简单讲下一个表单功能的实现<br>先放代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">role</span>=<span class="string">"form"</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/edit&#125;"</span> <span class="attr">th:object</span>=<span class="string">"$&#123;sub&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"url"</span>&gt;</span>图书链接（带http://）:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span>  <span class="attr">id</span>=<span class="string">"url"</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">th:value</span>=<span class="string">"*&#123;url&#125;"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"email"</span>&gt;</span>邮箱:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">th:value</span>=<span class="string">"*&#123;email&#125;"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span>  <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>这里我提交到 是一个 对象<br>我把它命名为sub</p>
<p>对应的在<code>controller</code>里我也接收这个<code>sub</code>对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/edit"</span>, method= RequestMethod.POST)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">edit</span><span class="params">(@ModelAttribute(<span class="string">"sub"</span>)</span>Subscription subscription, RedirectAttributes model) </span>&#123;</div><div class="line">    System.out.println(subscription.getUrl());</div><div class="line">    <span class="keyword">if</span> (addBookService.addBook(subscription)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"redirect:/add_success"</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"redirect:/add_error"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在controller里，我们对拿来的<code>sub</code>对象 强制转换成 <code>Subscription</code>对象<br>这个对象就是我们的实体类了</p>
<p>然后将 <code>Subscription</code>对象交给我们的service层来执行具体的逻辑</p>
<p>判断是否可以加入我们的数据库<br>如果成功加入数据库，我们将请求重定向到成功的页面<br>否则重定向到失败的页面</p>
<p>这样，我们就完成了一个从前端到后台的交互。<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171003204110811.png" alt=""></p>
<h2 id="邮件模块"><a href="#邮件模块" class="headerlink" title="邮件模块"></a>邮件模块</h2><p>关于邮件发送，我的博客之前也介绍过<br>有兴趣的话可以去 这篇<a href="http://blog.chenwe.top/2017/07/18/2017/SpringBoot%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/">SpringBoot发送邮件</a>看下</p>
<h2 id="定时模块"><a href="#定时模块" class="headerlink" title="定时模块"></a>定时模块</h2><p>关于定时，我的博客之前也介绍过<br>有兴趣的话可以去，这篇<a href="http://blog.chenwe.top/2017/07/20/2017/SpringBoot%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/">SpringBoot定时任务</a>看下</p>
<p>我这里讲下我这个推送的思路</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Scheduled</span>(cron = <span class="string">"0 0 7,8,9,10,11,12,13,14,15,16,17,18 * * ?"</span>)</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"这个是定时任务第 "</span> + (count++) + <span class="string">" 次执行"</span>);</div><div class="line"></div><div class="line">    List&lt;Subscription&gt; list = subscriptionRepository.findBySended(<span class="keyword">false</span>);</div><div class="line">    <span class="keyword">if</span> (list == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (Subscription sub:</div><div class="line">         list) &#123;</div><div class="line">        String email = sub.getEmail();</div><div class="line">        String url = sub.getUrl();</div><div class="line">        libSpider.Get_Url(url, email);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我在每天白天每隔一个小时，自动开始运行这个服务<br>我们先获取之前在数据库登记的所有的订阅的且没发送过邮件的数据<br>遍历这个<code>List</code><br>获取url和邮箱，交给我们的爬虫邮件服务去处理<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Get_Url</span><span class="params">(String url, String email)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        Boolean is_inLib = <span class="keyword">false</span>;</div><div class="line">        String[] book_info = <span class="keyword">new</span> String[<span class="number">7</span>];</div><div class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="comment">//Jsoup来提取图书馆藏信息</span></div><div class="line">        Document doc = Jsoup.connect(url)</div><div class="line">                <span class="comment">//.data("query", "Java")</span></div><div class="line">                .userAgent(<span class="string">"'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) '                            'Chrome/51.0.2704.63 Safari/537.36'"</span>)</div><div class="line">                <span class="comment">//.cookie("auth", "token")</span></div><div class="line">                .timeout(<span class="number">10000</span>)</div><div class="line">                <span class="comment">//.post()</span></div><div class="line">                .get();</div><div class="line"></div><div class="line">        Elements elements = doc.select(<span class="string">".whitetext td"</span>);</div><div class="line">        <span class="keyword">for</span> (Element ele : elements) &#123;</div><div class="line">            String text = ele.text();               <span class="comment">//获取当前标签（元素）的文本值</span></div><div class="line"></div><div class="line">            <span class="keyword">if</span> (count &lt; <span class="number">5</span>) &#123;</div><div class="line">                book_info[count] = text;</div><div class="line">                count ++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (text.equals(<span class="string">"可借"</span>)) &#123;</div><div class="line">                is_inLib = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (is_inLib) &#123;</div><div class="line">            <span class="comment">//正则表达式找出书名</span></div><div class="line">            String result = <span class="string">""</span>;</div><div class="line">            Pattern pattern = Pattern.compile(<span class="string">"document.title = \"(.*?)\";"</span>);</div><div class="line">            Matcher matcher = pattern.matcher(doc.toString());</div><div class="line">            <span class="keyword">while</span> (matcher.find()) &#123;</div><div class="line">                System.out.println(matcher.group(<span class="number">1</span>));</div><div class="line">                Book book = <span class="keyword">new</span> Book(book_info[<span class="number">0</span>], <span class="string">"《"</span> + matcher.group(<span class="number">1</span>) + <span class="string">"》"</span>, book_info[<span class="number">1</span>], book_info[<span class="number">3</span>]);</div><div class="line">                <span class="keyword">if</span> (mailUtil.sendGetBookMail(email, book)) &#123;</div><div class="line">                    List&lt;Subscription&gt; list = subscriptionRepository.findByEmailAndAndUrlAndAndSended(email, url, <span class="keyword">false</span>);</div><div class="line">                    <span class="keyword">for</span> (Subscription sub:</div><div class="line">                            list) &#123;</div><div class="line">                        sub.setSended(<span class="keyword">true</span>);</div><div class="line">                        subscriptionRepository.save(sub);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>爬虫获取对应URL的数据<br>如果图书到馆，那么将图书的相关信息通过邮件服务发送给我们的订阅者</p>
<p>邮件服务会生成一封HTML邮件，将图书相关数据发送到订阅者邮箱<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171003205045713.png" alt=""></p>
<p><strong>这样我们的整个功能就实现了<br>接下来就是部署了<br>请听下回博客分解</strong><br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171003205141163.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上回书说到&lt;br&gt;Linux数据库的配置以及远程连接&lt;/p&gt;
&lt;p&gt;这次我们来讲下具体功能的实现&lt;br&gt;&lt;img src=&quot;http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171003202042469.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://blog.chenwe.top/categories/SpringBoot/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>图书信息推送系统（一）</title>
    <link href="http://blog.chenwe.top/2017/10/01/2017/2017-10-01%20%E5%9B%BE%E4%B9%A6%E4%BF%A1%E6%81%AF%E6%8E%A8%E9%80%81%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://blog.chenwe.top/2017/10/01/2017/2017-10-01 图书信息推送系统（一）/</id>
    <published>2017-10-01T07:46:23.184Z</published>
    <updated>2017-10-01T08:54:58.321Z</updated>
    
    <content type="html"><![CDATA[<p>之前把实验室的一台废弃的主机改装成了Ubuntu系统<br>于是我准备把它拿来搞事请</p>
<p>我们学校的图书馆虽然可以网上查询图书信息<br>但是却没有提供图书到馆通知的功能<br>有时候想借一本书，但是却被别人借走了<br>自己就要时不时关注图书的信息，十分麻烦<br>所以，开始搞事<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171001155255849.png" alt=""></p>
<a id="more"></a>
<h2 id="搞什么事"><a href="#搞什么事" class="headerlink" title="搞什么事"></a>搞什么事</h2><p>做一个用邮件推送的图书到馆信息推送系统</p>
<h2 id="用到哪些东西"><a href="#用到哪些东西" class="headerlink" title="用到哪些东西"></a>用到哪些东西</h2><ul>
<li><p>java爬虫<br>用来获取图书信息</p>
</li>
<li><p>SpringBoot<br>用来搭建网站以及整合与管理后台服务</p>
</li>
<li><p>MySql关系数据库<br>用来存储订阅信息</p>
</li>
</ul>
<h2 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h2><p>开发环境的数据库配置这里就不多说了<br>网上相关教程有很多</p>
<p>这里讲下在Linux下配置数据库 并远程连接管理</p>
<h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h3><p>安装的方法有很多<br>这里讲下 apt-get的方式<br>在终端输入命令<br><code>sudo apt-get install mysql-server mysql-client</code><br>安装过程中会让你设置一个数据库密码</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>安装完成后<br>我们先进入mysql<br><code>mysql -u root -p</code><br>输入密码 进入后<br>输入 <code>GRANT ALL PRIVILEGES ON *.* TO &lt;用户名&gt;@&quot;%&quot; IDENTIFIED BY &#39;&lt;密码&gt;&#39; WITH GRANT OPTION;</code><br>创建一个远程连接的用户<br>再输入 <code>FLUSH RIVILEGES;</code>刷新权限表</p>
<p>退出mysql</p>
<p>修改mysql的配置文件<br><code>vi /etc/mysql/my.cnf</code><br>把里面的 <code>127.0.0.1</code>那行 用 <code>#</code>注释掉</p>
<p>启动mysql服务<code>sudo service mysql start</code></p>
<h3 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h3><p>现在我们就可以远程连接了<br>这里我用的是MySQL Workbench<br>新建一个连接<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171001164625658.png" alt=""><br>填好相应的内容</p>
<p>如果前面都是正确的话 应该就成功连上了</p>
<p><strong>这样我们就配好了数据库<br>接下来就是写代码来实现功能了<br>下次再讲吧</strong></p>
<p><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171001164957520.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前把实验室的一台废弃的主机改装成了Ubuntu系统&lt;br&gt;于是我准备把它拿来搞事请&lt;/p&gt;
&lt;p&gt;我们学校的图书馆虽然可以网上查询图书信息&lt;br&gt;但是却没有提供图书到馆通知的功能&lt;br&gt;有时候想借一本书，但是却被别人借走了&lt;br&gt;自己就要时不时关注图书的信息，十分麻烦&lt;br&gt;所以，开始搞事&lt;br&gt;&lt;img src=&quot;http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20171001155255849.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://blog.chenwe.top/categories/SpringBoot/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot中的缓存支持</title>
    <link href="http://blog.chenwe.top/2017/09/15/2017/2017-09-15%20Spring%20Boot%E4%B8%AD%E7%9A%84%E7%BC%93%E5%AD%98%E6%94%AF%E6%8C%81/"/>
    <id>http://blog.chenwe.top/2017/09/15/2017/2017-09-15 Spring Boot中的缓存支持/</id>
    <published>2017-09-15T08:22:03.250Z</published>
    <updated>2017-09-15T08:44:11.894Z</updated>
    
    <content type="html"><![CDATA[<p>当数据库的数据规模越来越大的时候<br>数据库的查询容易变成影响用户体验的瓶颈<br>是时候加入缓存来提高性能了<br><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20170915162439368.png" alt=""></p>
<a id="more"></a>
<h2 id="有哪些缓存工具"><a href="#有哪些缓存工具" class="headerlink" title="有哪些缓存工具"></a>有哪些缓存工具</h2><p>常见的有Redis 和 EhCache<br>今天讲下EhCache</p>
<h2 id="EhCache"><a href="#EhCache" class="headerlink" title="EhCache"></a>EhCache</h2><blockquote>
<p>EhCache 是一个纯Java的进程内缓存框架，具有快速、精干等特点，是Hibernate中默认的CacheProvider。</p>
</blockquote>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>pom.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sf.ehcache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>添加完依赖后<br>在resources目录下新建 <code>ehcache.xml</code>文件<br>ehcache.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line">         <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">"ehcache.xsd"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">cache</span> <span class="attr">name</span>=<span class="string">"powers"</span></span></div><div class="line">           <span class="attr">maxEntriesLocalHeap</span>=<span class="string">"200"</span></div><div class="line">           <span class="attr">timeToLiveSeconds</span>=<span class="string">"10"</span>&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">cache</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>这里的<code>timeToLiveSeconds</code>是更新时间<br>这里我们设置10秒钟后自动更新数据</p>
<p>在启动类中添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@SpringBootApplication</div><div class="line">@EnableCaching</div></pre></td></tr></table></figure></p>
<p>在Repository中添加<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@CacheConfig</span>(cacheNames = <span class="string">"powers"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PowerRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Power</span>, <span class="title">Integer</span>&gt; </span>&#123;</div><div class="line">    <span class="meta">@Cacheable</span></div><div class="line">    <span class="function">List&lt;Power&gt; <span class="title">findAll</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里我们把<code>cacheNames</code>和前面的配置里对应<br>在要缓存的地方写上<code>@Cacheable</code></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>先在 <code>application.properties</code>中添加显示sql<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">spring.jpa.show-sql=true</div></pre></td></tr></table></figure></p>
<p>在测试类中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> PowerService powerService;</div><div class="line"></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">totest</span><span class="params">()</span> </span>&#123;</div><div class="line">  List&lt;Power&gt; list1 = powerService.findAll();</div><div class="line">  System.out.println(<span class="string">"第一次查询："</span> + list1.get(<span class="number">0</span>));</div><div class="line"></div><div class="line">  List&lt;Power&gt; list2 = powerService.findAll();</div><div class="line">  System.out.println(<span class="string">"第二次查询："</span> + list2.get(<span class="number">0</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>写好测试类开始测试<br>打印出结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Hibernate: select power0_.power_id as power_id1_1_, power0_.building_name as building2_1_, power0_.date_num as date_num3_1_, power0_.dorm_num as dorm_num4_1_, power0_.residual_electricity as residual5_1_ from lowpower power0_</div><div class="line">第一次查询：com.example.demo.domain.Power@1ae90cb9</div><div class="line">第二次查询：com.example.demo.domain.Power@1ae90cb9</div></pre></td></tr></table></figure></p>
<p>我们发现第二次查询是没有打印出sql语句的<br>因为我们在第一次查询后，就把数据缓存了</p>
<p>因为我们设置了10秒钟更新缓存数据<br>所以如果在外部改变数据库的一些字段<br>查询在10秒后也能得到更新<br>这里就不演示了</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>利用缓存来优化数据库<br>可以减缓数据库的压力<br>改善用户体验</p>
<p><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20170915163858970.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当数据库的数据规模越来越大的时候&lt;br&gt;数据库的查询容易变成影响用户体验的瓶颈&lt;br&gt;是时候加入缓存来提高性能了&lt;br&gt;&lt;img src=&quot;http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20170915162439368.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://blog.chenwe.top/categories/SpringBoot/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>数据库RAID简介</title>
    <link href="http://blog.chenwe.top/2017/09/14/2017/2017-09-14%20%E6%95%B0%E6%8D%AE%E5%BA%93RAID%E7%AE%80%E4%BB%8B/"/>
    <id>http://blog.chenwe.top/2017/09/14/2017/2017-09-14 数据库RAID简介/</id>
    <published>2017-09-14T08:04:23.254Z</published>
    <updated>2017-09-15T08:44:10.696Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>RAID （ Redundant Array of Independent Disks ）即独立磁盘冗余阵列，通常简称为磁盘阵列。 简单地说， RAID 是由多个独立的高性能磁盘驱动器组成的磁盘子系统，从而提供比单个磁盘更高的存储性能和数据冗余的技术。</p>
</blockquote>
<p><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20170914160646934.png" alt=""></p>
<a id="more"></a>
<h2 id="有哪些RAID"><a href="#有哪些RAID" class="headerlink" title="有哪些RAID"></a>有哪些RAID</h2><p>常见的有6种RAID类型<br>RAID 等级 | RAID0 | RAID1 | RAID5 | RAID6 | RAID10 |</p>
<p>这里我们简单的介绍一下 RAID0 RAID1 RAID5 RAID10</p>
<h2 id="RAID0"><a href="#RAID0" class="headerlink" title="RAID0"></a>RAID0</h2><p><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-2017091416153039.png" alt=""></p>
<blockquote>
<p>RAID 0又称为Stripe或Striping，它代表了所有RAID级别中最高的存储性能。RAID 0提高存储性能的原理是把连续的数据分散到多个磁盘上存取，这样，系统有数据请求就可以被多个磁盘并行的执行，每个磁盘执行属于它自己的那部分数据请求。这种数据上的并行操作可以充分利用总线的带宽，显著提高磁盘整体存取性能。</p>
</blockquote>
<p>RAID0 没有数据冗余，没有数据校验的磁盘阵列。<br>实现它需要至少两块以上的硬盘，将两个硬盘并成一块，数据连续分割在各个盘上。<br>因为带宽加倍，所以读写速度加倍，但是在提高速度的同时，却带来了安全上的问题。<br>只要任何一块硬盘损坏就会丢失所有数据。因此RAID 0 不可应用于需要数据高可用性的关键领域。</p>
<h2 id="RAID1"><a href="#RAID1" class="headerlink" title="RAID1"></a>RAID1</h2><p><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-2017091416172531.png" alt=""></p>
<blockquote>
<p>RAID 1通过磁盘数据镜像实现数据冗余，在成对的独立磁盘上产生互 为备份的数据。当原始数据繁忙时，可直接从镜像拷贝中读取数据，因此RAID 1可以提高读取性能。RAID 1是磁盘阵列中单位成本最高的，但提供了很高的数据安全性和可用性。当一个磁盘失效时，系统可以自动切换到镜像磁盘上读写，而不需要重组失效的数据。</p>
</blockquote>
<p>RAID1是将一个两块硬盘所构成RAID磁盘阵列。<br>其容量仅等于一块硬盘的容量，因为另一块只是当作数据“镜像”。<br>在提升速度的时候，也保护了数据的安全，但是成本较高。</p>
<h2 id="RAID5"><a href="#RAID5" class="headerlink" title="RAID5"></a>RAID5</h2><p><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20170914161833407.png" alt=""></p>
<blockquote>
<p>RAID 5 是一种存储性能、数据安全和存储成本兼顾的存储解决方案。 RAID 5可以理解为是RAID 0和RAID 1的折中方案。RAID 5可以为系统提供数据安全保障，但保障程度要比Mirror低而磁盘空间利用率要比Mirror高。RAID 5具有和RAID 0相近似的数据读取速度，只是多了一个奇偶校验信息，写入数据的速度比对单个磁盘进行写入操作稍慢。同时由于多个数据对应一个奇偶校验信息，RAID 5的磁盘空间利用率要比RAID 1高，存储成本相对较低，是目前运用较多的一种解决方案。</p>
</blockquote>
<p>RAID5 可以通过<a href="https://baike.baidu.com/item/%E5%A5%87%E5%81%B6%E6%A0%A1%E9%AA%8C" target="_blank" rel="external">奇偶校验</a>来恢复损坏的盘的数据<br>但是只能损坏一块硬盘，如果同时损坏两块硬盘，那么数据也是无法恢复</p>
<h2 id="RAID10"><a href="#RAID10" class="headerlink" title="RAID10"></a>RAID10</h2><p><img src="http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20170914162321744.png" alt=""></p>
<blockquote>
<p>Raid 10是一个Raid 1与Raid0的组合体，它是利用奇偶校验实现条带集镜像，所以它继承了Raid0的快速和Raid1的安全。我们知道，RAID 1在这里就是一个冗余的备份阵列，而RAID 0则负责数据的读写阵列。其实，右图只是一种RAID 10方式，更多的情况是从主通路分出两路，做Striping操作，即把数据分割，而这分出来的每一路则再分两路，做Mirroring操作，即互做镜像。</p>
</blockquote>
<p>RAID10 将 RAID0 RAID1 的标准相结合<br>在连续地以位或字节为单位分割数据并且并行读/写多个磁盘的同时，为每一块磁盘作磁盘镜像进行冗余。<br>它有效的吸收了两者的优点<br>这种结构的可扩充性不好，这种解决方案被广泛应用，使用此方案比较昂贵。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;RAID （ Redundant Array of Independent Disks ）即独立磁盘冗余阵列，通常简称为磁盘阵列。 简单地说， RAID 是由多个独立的高性能磁盘驱动器组成的磁盘子系统，从而提供比单个磁盘更高的存储性能和数据冗余的技术。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://ow9eu3p52.bkt.clouddn.com/markdown-img-paste-20170914160646934.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://blog.chenwe.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>获取Cookie时中文乱码</title>
    <link href="http://blog.chenwe.top/2017/09/11/2017/%E8%8E%B7%E5%8F%96Cookie%E6%97%B6%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/"/>
    <id>http://blog.chenwe.top/2017/09/11/2017/获取Cookie时中文乱码/</id>
    <published>2017-09-11T08:45:12.450Z</published>
    <updated>2017-09-11T08:53:06.240Z</updated>
    
    <content type="html"><![CDATA[<p>在获取Cookie时出现了中文乱码<br>服务器传来的数据是正常的，没有乱码</p>
<p><img src="http://otj6w86xd.bkt.clouddn.com/wenhao.jpg" alt=""></p>
<a id="more"></a>
<h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><p>这里先放出正确的代码(已Vue为例<br>  )<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置Cookie</span></div><div class="line">Vue.prototype.setCookie = <span class="function">(<span class="params">c_name, value, expiredays</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">var</span> exdate = <span class="keyword">new</span> <span class="built_in">Date</span>();　　　　</div><div class="line">  exdate.setDate(exdate.getDate() + expiredays);　　　　</div><div class="line">  <span class="built_in">document</span>.cookie = c_name + <span class="string">"="</span> + <span class="built_in">escape</span>(value) + ((expiredays == <span class="literal">null</span>) ? <span class="string">""</span> : <span class="string">";expires="</span> + exdate.toGMTString());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在设置Cookie里<code>escape()</code>函数进行了编码<br>它能将一些特殊符号使用十六进制表示</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取cookie、</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> arr, reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(^| )"</span> + name + <span class="string">"=([^;]*)(;|$)"</span>);</div><div class="line">  <span class="keyword">if</span> (arr = <span class="built_in">document</span>.cookie.match(reg))</div><div class="line">    <span class="keyword">return</span> <span class="built_in">unescape</span>(arr[<span class="number">2</span>]);</div><div class="line">  <span class="keyword">else</span></div><div class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里的<code>unescape()</code>函数可对通过<code>escape()</code> 编码的字符串进行解码。</p>
<p>这样我们就可以在获取Cookie的时候不会出现中文乱码了</p>
<p><img src="http://otj6w86xd.bkt.clouddn.com/lianhong.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在获取Cookie时出现了中文乱码&lt;br&gt;服务器传来的数据是正常的，没有乱码&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://otj6w86xd.bkt.clouddn.com/wenhao.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Cookie" scheme="http://blog.chenwe.top/categories/Cookie/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js去掉链接里的井号</title>
    <link href="http://blog.chenwe.top/2017/09/10/2017/Vue.js%E5%8E%BB%E6%8E%89%E9%93%BE%E6%8E%A5%E9%87%8C%E7%9A%84%E4%BA%95%E5%8F%B7/"/>
    <id>http://blog.chenwe.top/2017/09/10/2017/Vue.js去掉链接里的井号/</id>
    <published>2017-09-10T06:37:51.431Z</published>
    <updated>2017-09-11T14:10:54.250Z</updated>
    
    <content type="html"><![CDATA[<p>在用vue-router的时候<br>有时候会在连接里会出现一个 #<br>不太美观</p>
<p>要怎么去掉呢？<br><img src="http://otj6w86xd.bkt.clouddn.com/huajizuo.jpg" alt=""></p>
<a id="more"></a>
<h2 id="为什么会有井号-？"><a href="#为什么会有井号-？" class="headerlink" title="为什么会有井号 #？"></a>为什么会有井号 #？</h2><p>因为vue-router 默认 hash 模式 —— 使用 URL 的 hash 来模拟一个完整的 URL，于是当 URL 改变时，页面不会重新加载。</p>
<h2 id="怎么去掉？"><a href="#怎么去掉？" class="headerlink" title="怎么去掉？"></a>怎么去掉？</h2><p>如果不想要很丑的 hash，我们可以用路由的 history 模式，这种模式充分利用 history.pushState API 来完成 URL 跳转而无须重新加载页面。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">const router = new VueRouter(&#123;</div><div class="line">  mode: &apos;history&apos;,</div><div class="line">  routes: [...]</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>这样连接中的 # 就没了</p>
<p>更加详细的说明可以参考 <a href="https://router.vuejs.org/zh-cn/essentials/history-mode.html" target="_blank" rel="external">文档</a></p>
<p><img src="http://otj6w86xd.bkt.clouddn.com/lianhong.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在用vue-router的时候&lt;br&gt;有时候会在连接里会出现一个 #&lt;br&gt;不太美观&lt;/p&gt;
&lt;p&gt;要怎么去掉呢？&lt;br&gt;&lt;img src=&quot;http://otj6w86xd.bkt.clouddn.com/huajizuo.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://blog.chenwe.top/categories/Vue/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js平行组件之间通信</title>
    <link href="http://blog.chenwe.top/2017/09/09/2017/Vue.js%E5%B9%B3%E8%A1%8C%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E9%80%9A%E4%BF%A1/"/>
    <id>http://blog.chenwe.top/2017/09/09/2017/Vue.js平行组件之间通信/</id>
    <published>2017-09-09T03:14:03.850Z</published>
    <updated>2017-09-11T14:10:50.257Z</updated>
    
    <content type="html"><![CDATA[<p>在用Vue.js做项目的时候<br>有时候会需要平行组件（非父子组件）之间传递数据的情况</p>
<p>该怎么做呢？<br><img src="http://otj6w86xd.bkt.clouddn.com/bqb-cm.jpg" alt=""></p>
<a id="more"></a>
<h2 id="该怎么办？"><a href="#该怎么办？" class="headerlink" title="该怎么办？"></a>该怎么办？</h2><p>用eventBus来实现</p>
<p>在原来的Vue1.0中组件之间的通信主要通过vm.$dispatch沿着父链向上传播和用vm.$broadcast向下广播来实现。<br>在vue2.0中，已经废除了这种用法。<br>在Vue2.0中可以使用Vuex</p>
<blockquote>
<p>Vuex基于SPA的应用，使用全局state共享数据，达到组件与组件间的通讯。如果你没有开发过大型的单页应用(SPA)就立刻上 Vuex，可能会觉得繁琐然后排斥，这是很正常的 —— 如果是个简单的应用，大多数情况下，不用 Vuex 还好，你要的可能就是个简单的 全局事件总线(global event bus)。不过，如果你构建的是一个中到大型单页应用，当你在考虑如何更好的在 Vue 组件外处理状态时，Vuex 自然就是你的下一步选择。</p>
</blockquote>
<p>如果我们的项目只是一个简单的应用也可以不用Vuex<br>用eventBus来实现</p>
<h2 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h2><p>先在common/js下创建一个js文件<br>命名为 bus.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vue();</div></pre></td></tr></table></figure></p>
<p>在要两个兄弟组件中引入bus<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Bus <span class="keyword">from</span> <span class="string">'./js/bus.js'</span>;</div></pre></td></tr></table></figure></p>
<p>在事件发起组件中<br>我们假设有一个点击事件 <code>showLoginDia</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"el-dropdown-link"</span> @<span class="attr">click</span>=<span class="string">"showLoginDia($event)"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>我们在showLoginDia中传入一个 event<br>在方法中利用bus来传递数据实现对另一个组件的通信<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Bus.$emit(<span class="string">'login'</span>, event.target);</div></pre></td></tr></table></figure></p>
<p>这样我们点击就通过Bus传递了一个点击事件的event.target名为<code>‘login’</code></p>
<p>然后我们在要接收的组件的 <code>created()</code>中调用bus监听事件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Bus.$on(<span class="string">'login'</span>, target =&gt; &#123;</div><div class="line">  <span class="keyword">this</span>.$set(<span class="keyword">this</span>.items, <span class="number">2</span>, <span class="keyword">this</span>.bindDormItem);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<ul>
<li>这里我们用$set来更新数组，才能实时更新DOM</li>
</ul>
<p>这样在每次点击的时候，就能通过bus来传递事件到平行组件了</p>
<p><img src="http://otj6w86xd.bkt.clouddn.com/lianhong.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在用Vue.js做项目的时候&lt;br&gt;有时候会需要平行组件（非父子组件）之间传递数据的情况&lt;/p&gt;
&lt;p&gt;该怎么做呢？&lt;br&gt;&lt;img src=&quot;http://otj6w86xd.bkt.clouddn.com/bqb-cm.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://blog.chenwe.top/categories/Vue/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>使用Xpath来制作python3爬虫</title>
    <link href="http://blog.chenwe.top/2017/09/08/2017/%E4%BD%BF%E7%94%A8Xpath%E6%9D%A5%E5%88%B6%E4%BD%9Cpython3%E7%88%AC%E8%99%AB/"/>
    <id>http://blog.chenwe.top/2017/09/08/2017/使用Xpath来制作python3爬虫/</id>
    <published>2017-09-08T06:52:51.867Z</published>
    <updated>2017-09-08T10:59:59.223Z</updated>
    
    <content type="html"><![CDATA[<p>之前用Python3制作了一个爬虫<br>但是在服务器运行后<br>发现每隔一段时间<br>爬虫就会崩溃</p>
<p><img src="http://otj6w86xd.bkt.clouddn.com/wulian.jpg" alt=""></p>
<a id="more"></a>
<h2 id="问题的产生"><a href="#问题的产生" class="headerlink" title="问题的产生"></a>问题的产生</h2><p>发现每隔一段时间<br>爬虫就会崩溃<br>调查日志后发现是爬取的网页的一些样式变了<br>因为我用的是正则表达式来获取数据<br>所以一些样式变了会导致无法正常的获取数据</p>
<p>在知道问题后，我觉定用 Xpath来优化爬虫</p>
<h2 id="什么是Xpath"><a href="#什么是Xpath" class="headerlink" title="什么是Xpath"></a>什么是Xpath</h2><p>以下是Wiki的解释：</p>
<blockquote>
<p>XPath即为XML路径语言（XML Path Language），它是一种用来确定XML文档中某部分位置的语言。 XPath基于XML的树状结构，提供在数据结构树中找寻节点的能力。 起初XPath的提出的初衷是将其作为一个通用的、介于XPointer与XSL间的语法模型。</p>
</blockquote>
<p>如果用Xpath的话<br>就不会出现部分样式更改，而导致爬虫无法正常工作的情况出现了</p>
<h2 id="Xpath库的安装"><a href="#Xpath库的安装" class="headerlink" title="Xpath库的安装"></a>Xpath库的安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install lxml</div></pre></td></tr></table></figure>
<p> 如果是Python3<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install python3-lxml</div></pre></td></tr></table></figure></p>
<h2 id="Xpath的引用"><a href="#Xpath的引用" class="headerlink" title="Xpath的引用"></a>Xpath的引用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">from lxml import etree</div></pre></td></tr></table></figure>
<h2 id="Xpath入门"><a href="#Xpath入门" class="headerlink" title="Xpath入门"></a>Xpath入门</h2><p>可以看下w3school里关于<a href="http://www.w3school.com.cn/xpath/index.asp" target="_blank" rel="external">Xpath的教程</a></p>
<h2 id="Xpath获取的小技巧"><a href="#Xpath获取的小技巧" class="headerlink" title="Xpath获取的小技巧"></a>Xpath获取的小技巧</h2><p>用chrome浏览器<br>按f12选中我们要的元素后<br>在HTML中 右键 -&gt; Copy -&gt; Copy Xpath<br>这样我们就复制了一段Xpath</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>我们在获取完HTML后<br>我们可以定义一个函数来格式化数据,返回xml结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">def getxpath(html):</div><div class="line">    return etree.HTML(html)</div></pre></td></tr></table></figure></p>
<p>然后我们调用这个方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">contentTree = getxpath(contentBytes)</div><div class="line">content = contentTree.xpath(&apos;//*[@id=&quot;weisite&quot;]/div[1]/div/section/table/tbody/tr/td/text()&apos;)</div></pre></td></tr></table></figure></p>
<p>这里的content是一个数组<br>表<code>tr</code>下的所有td元素里的text值</p>
<p>这样我们就用Xpath完成了一个简单的爬虫</p>
<p><img src="http://otj6w86xd.bkt.clouddn.com/lianhong.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前用Python3制作了一个爬虫&lt;br&gt;但是在服务器运行后&lt;br&gt;发现每隔一段时间&lt;br&gt;爬虫就会崩溃&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://otj6w86xd.bkt.clouddn.com/wulian.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="SpringMVC" scheme="http://blog.chenwe.top/categories/SpringMVC/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js中修改router-link的样式</title>
    <link href="http://blog.chenwe.top/2017/08/29/2017/Vue.js%E4%B8%AD%E4%BF%AE%E6%94%B9router-link%E7%9A%84%E6%A0%B7%E5%BC%8F/"/>
    <id>http://blog.chenwe.top/2017/08/29/2017/Vue.js中修改router-link的样式/</id>
    <published>2017-08-29T11:20:34.758Z</published>
    <updated>2017-09-11T14:11:03.262Z</updated>
    
    <content type="html"><![CDATA[<p>在用vue.js 的时候<br>有个地方用到了router-link<br>并且要修改router-link的样式</p>
<p>但是我发现直接修改router-link是不行的</p>
<p><img src="http://otj6w86xd.bkt.clouddn.com/wulian.jpg" alt=""></p>
<a id="more"></a>
<h2 id="该怎么办？"><a href="#该怎么办？" class="headerlink" title="该怎么办？"></a>该怎么办？</h2><p>其实router-link标签和a 标签是一样的<br>我们可以通过对a标签修改<br>达到修改router-link的目的</p>
<p>例如想实现类似手机APP顶部的tab标签<br>可以这样(styl语法)</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div id="app"&gt;</div><div class="line">    &lt;div class="tab border-1px"&gt;</div><div class="line">      &lt;div class="tab-item"&gt;</div><div class="line">        &lt;router-link to="/goods"&gt;商品&lt;/router-link&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">      &lt;div class="tab-item"&gt;</div><div class="line">        &lt;router-link to="/ratings"&gt;评论&lt;/router-link&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">      &lt;div class="tab-item"&gt;</div><div class="line">        &lt;router-link to="/seller"&gt;商家&lt;/router-link&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">export default &#123;</div><div class="line">  name: 'app'</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div><div class="line"></div><div class="line">&lt;style lang="stylus" rel="stylesheet/stylus"&gt;</div><div class="line">    .tab</div><div class="line">      display:flex</div><div class="line">      width: 100%</div><div class="line">      height: 40px</div><div class="line">      line-height: 40px</div><div class="line">      border-1px(rgba(7, 17, 27, 0.1))</div><div class="line">      .tab-item</div><div class="line">        flex: 1</div><div class="line">        text-align: center</div><div class="line">        &amp; &gt; a</div><div class="line">          display: block</div><div class="line">          font-size: 14px</div><div class="line">          color: rgb(77, 85, 93)</div><div class="line">          &amp;.active</div><div class="line">            color: rgb(240, 20, 20)</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<p>效果图：</p>
<p><img src="http://otj6w86xd.bkt.clouddn.com/ele-tab.png" alt=""></p>
<p><img src="http://otj6w86xd.bkt.clouddn.com/bqb-bcm.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在用vue.js 的时候&lt;br&gt;有个地方用到了router-link&lt;br&gt;并且要修改router-link的样式&lt;/p&gt;
&lt;p&gt;但是我发现直接修改router-link是不行的&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://otj6w86xd.bkt.clouddn.com/wulian.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://blog.chenwe.top/categories/Vue/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js中使用axios数据赋值报错</title>
    <link href="http://blog.chenwe.top/2017/08/28/2017/Vue.js%E4%B8%AD%E4%BD%BF%E7%94%A8axios%E6%95%B0%E6%8D%AE%E8%B5%8B%E5%80%BC%E6%8A%A5%E9%94%99/"/>
    <id>http://blog.chenwe.top/2017/08/28/2017/Vue.js中使用axios数据赋值报错/</id>
    <published>2017-08-28T09:04:57.623Z</published>
    <updated>2017-09-11T14:10:59.690Z</updated>
    
    <content type="html"><![CDATA[<p>在用vue.js的axios插件来获取数据的时候<br>踩了一个坑</p>
<p>获取到的数据对象不能赋值给变量</p>
<p><img src="http://otj6w86xd.bkt.clouddn.com/bqb-cm.jpg" alt=""></p>
<a id="more"></a>
<h2 id="问题的代码"><a href="#问题的代码" class="headerlink" title="问题的代码"></a>问题的代码</h2><p>问题代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">data() &#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">seller</span>: &#123;&#125;,</div><div class="line">  &#125;</div><div class="line">&#125;,</div><div class="line"><span class="attr">methods</span>: &#123;</div><div class="line">  getData() &#123;</div><div class="line">    axios.get(<span class="string">'./static/data.json'</span>)</div><div class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</div><div class="line">      <span class="keyword">this</span>.seller = response.data.seller;</div><div class="line">    &#125;)</div><div class="line">    .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(error);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我想通过axios来获取data.json里面的seller对象<br>然后赋值给我们的seller<br>但是会报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">TypeError: Cannot set property &apos;seller&apos; of undefined</div><div class="line">    at eval (App.vue?87b3:54)</div><div class="line">    at &lt;anonymous&gt;</div></pre></td></tr></table></figure></p>
<p>它说我们不能赋值给seller</p>
<p>一开始我怀疑是不是数据没拿到<br>于是打印数据<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(response.data.seller);</div></pre></td></tr></table></figure></p>
<p>发现是可以的<br>也就是说是赋值的时候出现了问题</p>
<h2 id="问题的原因"><a href="#问题的原因" class="headerlink" title="问题的原因"></a>问题的原因</h2><p>经过自己的网上资料查找<br>找到了问题的原因</p>
<p>因为 this 指向更改了<br>所以 this.seller 是拿不到对象的<br>（上面的代码可是官方推荐的代码。。居然容易踩坑）</p>
<h2 id="问题的解决"><a href="#问题的解决" class="headerlink" title="问题的解决"></a>问题的解决</h2><p>使用箭头函数来获取数据</p>
<p>示例代码:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">axios.get(<span class="string">'./static/data.json'</span>).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">this</span>.seller = response.data.seller;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.seller);</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>用箭头函数来实现后<br>就不会报错了<br>问题也解决了</p>
<p><img src="http://otj6w86xd.bkt.clouddn.com/bqb-bcm.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在用vue.js的axios插件来获取数据的时候&lt;br&gt;踩了一个坑&lt;/p&gt;
&lt;p&gt;获取到的数据对象不能赋值给变量&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://otj6w86xd.bkt.clouddn.com/bqb-cm.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://blog.chenwe.top/categories/Vue/"/>
    
    
      <category term="study" scheme="http://blog.chenwe.top/tags/study/"/>
    
      <category term="code" scheme="http://blog.chenwe.top/tags/code/"/>
    
  </entry>
  
</feed>
